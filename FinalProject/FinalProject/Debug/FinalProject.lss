
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800140  00800140  00000804  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000130d  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ea  00000000  00000000  00001c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c1  00000000  00000000  0000223b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  000029fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a73  00000000  00000000  000030cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00003b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
   4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
   6:	33 c0       	rjmp	.+102    	; 0x6e <__bad_interrupt>
   8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__vector_5>
   c:	30 c0       	rjmp	.+96     	; 0x6e <__bad_interrupt>
   e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
  10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
  12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>
  14:	2c c0       	rjmp	.+88     	; 0x6e <__bad_interrupt>
  16:	2b c0       	rjmp	.+86     	; 0x6e <__bad_interrupt>
  18:	2a c0       	rjmp	.+84     	; 0x6e <__bad_interrupt>
  1a:	29 c0       	rjmp	.+82     	; 0x6e <__bad_interrupt>
  1c:	28 c0       	rjmp	.+80     	; 0x6e <__bad_interrupt>
  1e:	27 c0       	rjmp	.+78     	; 0x6e <__bad_interrupt>
  20:	26 c0       	rjmp	.+76     	; 0x6e <__bad_interrupt>
  22:	25 c0       	rjmp	.+74     	; 0x6e <__bad_interrupt>
  24:	c6 c1       	rjmp	.+908    	; 0x3b2 <__vector_18>
  26:	4a c3       	rjmp	.+1684   	; 0x6bc <__vector_19>
  28:	22 c0       	rjmp	.+68     	; 0x6e <__bad_interrupt>
  2a:	21 c0       	rjmp	.+66     	; 0x6e <__bad_interrupt>
  2c:	20 c0       	rjmp	.+64     	; 0x6e <__bad_interrupt>
  2e:	1f c0       	rjmp	.+62     	; 0x6e <__bad_interrupt>
  30:	1e c0       	rjmp	.+60     	; 0x6e <__bad_interrupt>
  32:	1d c0       	rjmp	.+58     	; 0x6e <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	38 39       	cpi	r19, 0x98	; 152
  36:	38 39       	cpi	r19, 0x98	; 152

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf ef       	ldi	r28, 0xFF	; 255
  3e:	d4 e0       	ldi	r29, 0x04	; 4
  40:	de bf       	out	0x3e, r29	; 62
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	11 e0       	ldi	r17, 0x01	; 1
  46:	a0 e0       	ldi	r26, 0x00	; 0
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	e0 e3       	ldi	r30, 0x30	; 48
  4c:	f7 e0       	ldi	r31, 0x07	; 7
  4e:	02 c0       	rjmp	.+4      	; 0x54 <__do_copy_data+0x10>
  50:	05 90       	lpm	r0, Z+
  52:	0d 92       	st	X+, r0
  54:	a0 34       	cpi	r26, 0x40	; 64
  56:	b1 07       	cpc	r27, r17
  58:	d9 f7       	brne	.-10     	; 0x50 <__do_copy_data+0xc>

0000005a <__do_clear_bss>:
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	a0 e4       	ldi	r26, 0x40	; 64
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	01 c0       	rjmp	.+2      	; 0x64 <.do_clear_bss_start>

00000062 <.do_clear_bss_loop>:
  62:	1d 92       	st	X+, r1

00000064 <.do_clear_bss_start>:
  64:	a1 38       	cpi	r26, 0x81	; 129
  66:	b2 07       	cpc	r27, r18
  68:	e1 f7       	brne	.-8      	; 0x62 <.do_clear_bss_loop>
  6a:	c4 d1       	rcall	.+904    	; 0x3f4 <main>
  6c:	5f c3       	rjmp	.+1726   	; 0x72c <_exit>

0000006e <__bad_interrupt>:
  6e:	c8 cf       	rjmp	.-112    	; 0x0 <__vectors>

00000070 <__vector_5>:
char check_bit;

const char pin[pin_length] PROGMEM = "8989";

// Interrupt for Keypad
ISR(PCINT2_vect){
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	2f 93       	push	r18
  7c:	3f 93       	push	r19
  7e:	4f 93       	push	r20
  80:	5f 93       	push	r21
  82:	6f 93       	push	r22
  84:	7f 93       	push	r23
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
	tmp2 = PORTD;
  92:	8b b1       	in	r24, 0x0b	; 11
	tmp2 &= ~(0x06);	// Clear PD2/PD3
  94:	89 7f       	andi	r24, 0xF9	; 249
  96:	80 93 6f 01 	sts	0x016F, r24
	PORTD = tmp2;
  9a:	8b b9       	out	0x0b, r24	; 11
	tmp2 = PORTC;
  9c:	88 b1       	in	r24, 0x08	; 8
	tmp2 &= ~(0x16);
  9e:	89 7e       	andi	r24, 0xE9	; 233
  a0:	80 93 6f 01 	sts	0x016F, r24
	PORTC = tmp2;	// Clear PC4
  a4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	80 e7       	ldi	r24, 0x70	; 112
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <__vector_5+0x3c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__vector_5+0x46>
  b6:	00 00       	nop
	
	_delay_ms(100);
	
	if((curr_state == Get_Pin)||(curr_state == Check_Pin)){
  b8:	80 91 46 01 	lds	r24, 0x0146
  bc:	90 91 47 01 	lds	r25, 0x0147
  c0:	02 97       	sbiw	r24, 0x02	; 2
  c2:	08 f0       	brcs	.+2      	; 0xc6 <__vector_5+0x56>
  c4:	65 c1       	rjmp	.+714    	; 0x390 <__vector_5+0x320>
		PORTC |= (1 << 5);	// Turn LED off -- Sets bit
  c6:	45 9a       	sbi	0x08, 5	; 8
		if(bit_is_clear(PIND,4)){
  c8:	4c 99       	sbic	0x09, 4	; 9
  ca:	4b c0       	rjmp	.+150    	; 0x162 <__vector_5+0xf2>
			//PORTD &= ~(1 << 0);
			PORTC |= (1 << 4);
  cc:	44 9a       	sbi	0x08, 4	; 8
			PORTD |= (1 << 2);
  ce:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	86 e9       	ldi	r24, 0x96	; 150
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <__vector_5+0x64>
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
  d8:	4c 99       	sbic	0x09, 4	; 9
  da:	10 c0       	rjmp	.+32     	; 0xfc <__vector_5+0x8c>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	ac d2       	rcall	.+1368   	; 0x63a <lcd_puts>
					flag++;
  e2:	80 91 40 01 	lds	r24, 0x0140
  e6:	90 91 41 01 	lds	r25, 0x0141
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 41 01 	sts	0x0141, r25
  f0:	80 93 40 01 	sts	0x0140, r24
					key = '1';
  f4:	81 e3       	ldi	r24, 0x31	; 49
  f6:	80 93 7b 01 	sts	0x017B, r24
  fa:	cc c0       	rjmp	.+408    	; 0x294 <__vector_5+0x224>
		
			}else{
		
			PORTD |= (1 << 3);
  fc:	5b 9a       	sbi	0x0b, 3	; 11
	
			PORTC &= ~(1 << 4);
  fe:	44 98       	cbi	0x08, 4	; 8
 100:	86 e9       	ldi	r24, 0x96	; 150
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__vector_5+0x94>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
 108:	4c 99       	sbic	0x09, 4	; 9
 10a:	10 c0       	rjmp	.+32     	; 0x12c <__vector_5+0xbc>

					//curr_userPin[flag] = key;
					lcd_puts("*");
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	94 d2       	rcall	.+1320   	; 0x63a <lcd_puts>
					flag++;
 112:	80 91 40 01 	lds	r24, 0x0140
 116:	90 91 41 01 	lds	r25, 0x0141
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 41 01 	sts	0x0141, r25
 120:	80 93 40 01 	sts	0x0140, r24
					key = '2';
 124:	82 e3       	ldi	r24, 0x32	; 50
 126:	80 93 7b 01 	sts	0x017B, r24
 12a:	b4 c0       	rjmp	.+360    	; 0x294 <__vector_5+0x224>
		
			}else{
				
			PORTC |= (1 << 4);
 12c:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 12e:	5a 98       	cbi	0x0b, 2	; 11
 130:	86 e9       	ldi	r24, 0x96	; 150
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <__vector_5+0xc4>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
 138:	4c 99       	sbic	0x09, 4	; 9
 13a:	0f c0       	rjmp	.+30     	; 0x15a <__vector_5+0xea>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	7c d2       	rcall	.+1272   	; 0x63a <lcd_puts>
					flag++;
 142:	80 91 40 01 	lds	r24, 0x0140
 146:	90 91 41 01 	lds	r25, 0x0141
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	90 93 41 01 	sts	0x0141, r25
 150:	80 93 40 01 	sts	0x0140, r24
					key = '3';
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	80 93 7b 01 	sts	0x017B, r24
			}
			PORTD &= ~(1 << 3);
 15a:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 5);
 15c:	45 98       	cbi	0x08, 5	; 8
			PORTD &= ~(1 << 2);
 15e:	5a 98       	cbi	0x0b, 2	; 11
 160:	99 c0       	rjmp	.+306    	; 0x294 <__vector_5+0x224>
		
			}

		}		
	
	}else if(bit_is_clear(PIND,5)){
 162:	4d 99       	sbic	0x09, 5	; 9
 164:	4b c0       	rjmp	.+150    	; 0x1fc <__vector_5+0x18c>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 166:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 168:	5a 9a       	sbi	0x0b, 2	; 11
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <__vector_5+0xfe>
	_delay_loop_2(100);

	if(bit_is_clear(PIND,5)){
 172:	4d 99       	sbic	0x09, 5	; 9
 174:	10 c0       	rjmp	.+32     	; 0x196 <__vector_5+0x126>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	5f d2       	rcall	.+1214   	; 0x63a <lcd_puts>
		flag++;
 17c:	80 91 40 01 	lds	r24, 0x0140
 180:	90 91 41 01 	lds	r25, 0x0141
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 41 01 	sts	0x0141, r25
 18a:	80 93 40 01 	sts	0x0140, r24
		key = '4';
 18e:	84 e3       	ldi	r24, 0x34	; 52
 190:	80 93 7b 01 	sts	0x017B, r24
 194:	7f c0       	rjmp	.+254    	; 0x294 <__vector_5+0x224>
	
		}else{
	
		PORTD |= (1 << 3);
 196:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 198:	44 98       	cbi	0x08, 4	; 8
 19a:	86 e9       	ldi	r24, 0x96	; 150
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <__vector_5+0x12e>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,5)){
 1a2:	4d 99       	sbic	0x09, 5	; 9
 1a4:	10 c0       	rjmp	.+32     	; 0x1c6 <__vector_5+0x156>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	47 d2       	rcall	.+1166   	; 0x63a <lcd_puts>
			flag++;
 1ac:	80 91 40 01 	lds	r24, 0x0140
 1b0:	90 91 41 01 	lds	r25, 0x0141
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 41 01 	sts	0x0141, r25
 1ba:	80 93 40 01 	sts	0x0140, r24
			key = '5';
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	80 93 7b 01 	sts	0x017B, r24
 1c4:	67 c0       	rjmp	.+206    	; 0x294 <__vector_5+0x224>
		
			}else{
		
			PORTC |= (1 << 4);
 1c6:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 1c8:	5a 98       	cbi	0x0b, 2	; 11
 1ca:	86 e9       	ldi	r24, 0x96	; 150
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <__vector_5+0x15e>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,5)){
 1d2:	4d 99       	sbic	0x09, 5	; 9
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <__vector_5+0x184>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	2f d2       	rcall	.+1118   	; 0x63a <lcd_puts>
				flag++;
 1dc:	80 91 40 01 	lds	r24, 0x0140
 1e0:	90 91 41 01 	lds	r25, 0x0141
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	90 93 41 01 	sts	0x0141, r25
 1ea:	80 93 40 01 	sts	0x0140, r24
				key = '6';
 1ee:	86 e3       	ldi	r24, 0x36	; 54
 1f0:	80 93 7b 01 	sts	0x017B, r24
			}
			PORTD &= ~(1 << 3);
 1f4:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 1f6:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 1f8:	5a 98       	cbi	0x0b, 2	; 11
 1fa:	4c c0       	rjmp	.+152    	; 0x294 <__vector_5+0x224>
		
		}

	}

	}else if(bit_is_clear(PIND,6)){
 1fc:	4e 99       	sbic	0x09, 6	; 9
 1fe:	4a c0       	rjmp	.+148    	; 0x294 <__vector_5+0x224>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 200:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 202:	5a 9a       	sbi	0x0b, 2	; 11
 204:	86 e9       	ldi	r24, 0x96	; 150
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <__vector_5+0x198>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,6)){
 20c:	4e 99       	sbic	0x09, 6	; 9
 20e:	10 c0       	rjmp	.+32     	; 0x230 <__vector_5+0x1c0>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	12 d2       	rcall	.+1060   	; 0x63a <lcd_puts>
		flag++;
 216:	80 91 40 01 	lds	r24, 0x0140
 21a:	90 91 41 01 	lds	r25, 0x0141
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 41 01 	sts	0x0141, r25
 224:	80 93 40 01 	sts	0x0140, r24
		key = '7';
 228:	87 e3       	ldi	r24, 0x37	; 55
 22a:	80 93 7b 01 	sts	0x017B, r24
 22e:	32 c0       	rjmp	.+100    	; 0x294 <__vector_5+0x224>
	
		}else{
	
		PORTD |= (1 << 3);
 230:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 232:	44 98       	cbi	0x08, 4	; 8
 234:	86 e9       	ldi	r24, 0x96	; 150
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <__vector_5+0x1c8>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,6)){
 23c:	4e 99       	sbic	0x09, 6	; 9
 23e:	10 c0       	rjmp	.+32     	; 0x260 <__vector_5+0x1f0>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	fa d1       	rcall	.+1012   	; 0x63a <lcd_puts>
			flag++;
 246:	80 91 40 01 	lds	r24, 0x0140
 24a:	90 91 41 01 	lds	r25, 0x0141
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 41 01 	sts	0x0141, r25
 254:	80 93 40 01 	sts	0x0140, r24
			key = '8';
 258:	88 e3       	ldi	r24, 0x38	; 56
 25a:	80 93 7b 01 	sts	0x017B, r24
 25e:	1a c0       	rjmp	.+52     	; 0x294 <__vector_5+0x224>
		
			}else{
		
			PORTC |= (1 << 4);
 260:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 262:	5a 98       	cbi	0x0b, 2	; 11
 264:	86 e9       	ldi	r24, 0x96	; 150
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <__vector_5+0x1f8>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,6)){
 26c:	4e 99       	sbic	0x09, 6	; 9
 26e:	0f c0       	rjmp	.+30     	; 0x28e <__vector_5+0x21e>
				
				//curr_userPin[flag] = key;
				lcd_puts("*");
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	e2 d1       	rcall	.+964    	; 0x63a <lcd_puts>
				flag++;
 276:	80 91 40 01 	lds	r24, 0x0140
 27a:	90 91 41 01 	lds	r25, 0x0141
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 41 01 	sts	0x0141, r25
 284:	80 93 40 01 	sts	0x0140, r24
				key = '9';
 288:	89 e3       	ldi	r24, 0x39	; 57
 28a:	80 93 7b 01 	sts	0x017B, r24
			}
			PORTD &= ~(1 << 3);
 28e:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 290:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 292:	5a 98       	cbi	0x0b, 2	; 11

	}

	}

	if(bit_is_clear(PIND,7)){
 294:	4f 99       	sbic	0x09, 7	; 9
 296:	4a c0       	rjmp	.+148    	; 0x32c <__vector_5+0x2bc>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 298:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 29a:	5a 9a       	sbi	0x0b, 2	; 11
 29c:	86 e9       	ldi	r24, 0x96	; 150
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <__vector_5+0x230>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,7)){
 2a4:	4f 99       	sbic	0x09, 7	; 9
 2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <__vector_5+0x258>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	c6 d1       	rcall	.+908    	; 0x63a <lcd_puts>
		flag++;
 2ae:	80 91 40 01 	lds	r24, 0x0140
 2b2:	90 91 41 01 	lds	r25, 0x0141
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 41 01 	sts	0x0141, r25
 2bc:	80 93 40 01 	sts	0x0140, r24
		key = '*';
 2c0:	8a e2       	ldi	r24, 0x2A	; 42
 2c2:	80 93 7b 01 	sts	0x017B, r24
 2c6:	32 c0       	rjmp	.+100    	; 0x32c <__vector_5+0x2bc>
	
		}else{
	
		PORTD |= (1 << 3);
 2c8:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 2ca:	44 98       	cbi	0x08, 4	; 8
 2cc:	8a ef       	ldi	r24, 0xFA	; 250
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <__vector_5+0x260>
	
		_delay_loop_2(250);
	
		if(bit_is_clear(PIND,7)){
 2d4:	4f 99       	sbic	0x09, 7	; 9
 2d6:	10 c0       	rjmp	.+32     	; 0x2f8 <__vector_5+0x288>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	ae d1       	rcall	.+860    	; 0x63a <lcd_puts>
			flag++;
 2de:	80 91 40 01 	lds	r24, 0x0140
 2e2:	90 91 41 01 	lds	r25, 0x0141
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	90 93 41 01 	sts	0x0141, r25
 2ec:	80 93 40 01 	sts	0x0140, r24
			key = '0';
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	80 93 7b 01 	sts	0x017B, r24
 2f6:	1a c0       	rjmp	.+52     	; 0x32c <__vector_5+0x2bc>
		
			}else{
		
			PORTC |= (1 << 4);
 2f8:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 2fa:	5a 98       	cbi	0x0b, 2	; 11
 2fc:	86 e9       	ldi	r24, 0x96	; 150
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <__vector_5+0x290>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,7)){
 304:	4f 99       	sbic	0x09, 7	; 9
 306:	0f c0       	rjmp	.+30     	; 0x326 <__vector_5+0x2b6>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	96 d1       	rcall	.+812    	; 0x63a <lcd_puts>
				flag++;
 30e:	80 91 40 01 	lds	r24, 0x0140
 312:	90 91 41 01 	lds	r25, 0x0141
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	90 93 41 01 	sts	0x0141, r25
 31c:	80 93 40 01 	sts	0x0140, r24
				key = '#';
 320:	83 e2       	ldi	r24, 0x23	; 35
 322:	80 93 7b 01 	sts	0x017B, r24
			}
			PORTD &= ~(1 << 3);
 326:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 328:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 32a:	5a 98       	cbi	0x0b, 2	; 11
 32c:	86 e9       	ldi	r24, 0x96	; 150
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <__vector_5+0x2c0>

	}
	
	_delay_loop_2(150);
	
	if(key != ' '){
 334:	80 91 7b 01 	lds	r24, 0x017B
 338:	80 32       	cpi	r24, 0x20	; 32
 33a:	39 f0       	breq	.+14     	; 0x34a <__vector_5+0x2da>
		curr_userPin[flag] = key;
 33c:	e0 91 40 01 	lds	r30, 0x0140
 340:	f0 91 41 01 	lds	r31, 0x0141
 344:	e3 58       	subi	r30, 0x83	; 131
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	80 83       	st	Z, r24
		//flag++;
		//lcd_puts("*");
		//PORTC &= ~(1 << 5);
	}
	
	if(flag >= 4){
 34a:	80 91 40 01 	lds	r24, 0x0140
 34e:	90 91 41 01 	lds	r25, 0x0141
 352:	04 97       	sbiw	r24, 0x04	; 4
 354:	ec f0       	brlt	.+58     	; 0x390 <__vector_5+0x320>
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
 356:	5c d1       	rcall	.+696    	; 0x610 <lcd_home>
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
			final_userPin[i-1] = key;
 358:	80 91 7e 01 	lds	r24, 0x017E
 35c:	80 93 6a 01 	sts	0x016A, r24
 360:	80 91 7f 01 	lds	r24, 0x017F
 364:	80 93 6b 01 	sts	0x016B, r24
 368:	80 91 80 01 	lds	r24, 0x0180
 36c:	80 93 6c 01 	sts	0x016C, r24
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
 370:	80 91 81 01 	lds	r24, 0x0181
			final_userPin[i-1] = key;
 374:	80 93 6d 01 	sts	0x016D, r24
 378:	80 93 7b 01 	sts	0x017B, r24
		}
	
		pin_event = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 43 01 	sts	0x0143, r25
 384:	80 93 42 01 	sts	0x0142, r24
		flag = 0;
 388:	10 92 41 01 	sts	0x0141, r1
 38c:	10 92 40 01 	sts	0x0140, r1
//		check_pin();
	}

}
}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	7f 91       	pop	r23
 39e:	6f 91       	pop	r22
 3a0:	5f 91       	pop	r21
 3a2:	4f 91       	pop	r20
 3a4:	3f 91       	pop	r19
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <__vector_18>:

//Data received on the serial port interrupt -- RX
ISR(USART_RX_vect){
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
	if(curr_state == Validate_User){
 3c0:	80 91 46 01 	lds	r24, 0x0146
 3c4:	90 91 47 01 	lds	r25, 0x0147
 3c8:	04 97       	sbiw	r24, 0x04	; 4
 3ca:	09 f4       	brne	.+2      	; 0x3ce <__vector_18+0x1c>
		PORTC &= ~(1 << 5);	// Turn LED on for 5 seconds
 3cc:	45 98       	cbi	0x08, 5	; 8
	
	}
}
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <USART_Init>:

void USART_Init(){
	UBRR0H = (unsigned char)(BUADRATE>>8); // Sets up baudrate
 3dc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)BUADRATE;
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);	// Enable receiver and transmitter
 3e6:	88 e1       	ldi	r24, 0x18	; 24
 3e8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data/2stop bit
 3ec:	8e e0       	ldi	r24, 0x0E	; 14
 3ee:	80 93 c2 00 	sts	0x00C2, r24
 3f2:	08 95       	ret

000003f4 <main>:
}

int main(void)            // Main Loop
{
	
	DDRB = 0b00101000;
 3f4:	88 e2       	ldi	r24, 0x28	; 40
 3f6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b01111111;	// PC5 for keypad (before PD1)
 3f8:	8f e7       	ldi	r24, 0x7F	; 127
 3fa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00001110;	// PD0 (RX) input & PD1 (TX) output for serial/ PD3 is now PD0 for keypad
 3fc:	8e e0       	ldi	r24, 0x0E	; 14
 3fe:	8a b9       	out	0x0a, r24	; 10
	//DDRD &= ~(1 << PD3);	// Set PD3 as input for mag card
	PORTC |= (1 << 5);	// Turn LED off -- Sets bit
 400:	45 9a       	sbi	0x08, 5	; 8
	//PORTB |= (1 << 1);
	PORTD = 0xF0;
 402:	c0 ef       	ldi	r28, 0xF0	; 240
 404:	cb b9       	out	0x0b, r28	; 11
	
	USART_Init();
 406:	ea df       	rcall	.-44     	; 0x3dc <USART_Init>
	
	// Enables pin change interrupt 
	tmp3 = PCICR;
 408:	e8 e6       	ldi	r30, 0x68	; 104
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
	tmp3 = 1 << (PCIE2) | 0 << (PCIE1) | 0 << (PCIE0);
 40e:	84 e0       	ldi	r24, 0x04	; 4
 410:	80 93 7a 01 	sts	0x017A, r24
	PCICR = tmp3;
 414:	80 83       	st	Z, r24
	tmp3 = PCMSK2;
 416:	ed e6       	ldi	r30, 0x6D	; 109
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
	tmp3 = 1 << (PCINT23) | 1 << (PCINT22) | 1 << (PCINT21) | 1 << (PCINT20) | 0 << (PCINT19) | 0 << (PCINT18) | 0 << (PCINT17) | 0 << (PCINT16);
 41c:	c0 93 7a 01 	sts	0x017A, r28
	PCMSK2 = tmp3;
 420:	c0 83       	st	Z, r28
	
	sei();                // Enables global interrupts
 422:	78 94       	sei

	
	lcd_init(LCD_DISP_ON);
 424:	8c e0       	ldi	r24, 0x0C	; 12
 426:	18 d1       	rcall	.+560    	; 0x658 <lcd_init>
					while(pin_event != 1){
						_delay_us(50);
						// Forever loop until keypad enters in 4 numbers for pin
					}
					pin_event = 0;
					curr_state = Check_Pin;
 428:	01 e0       	ldi	r16, 0x01	; 1
 42a:	10 e0       	ldi	r17, 0x00	; 0
				curr_state = Check_Pin;
			 break;
			 
			 case Check_Pin:
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
					curr_state = Authorize;
 42c:	68 94       	set
 42e:	ee 24       	eor	r14, r14
 430:	e1 f8       	bld	r14, 1
 432:	f1 2c       	mov	r15, r1
				lcd_puts("Access Granted");
				
				PORTC &= ~(1 << 5);	// Turn LED on for 5 seconds
				_delay_ms(1000);
				swipe_event = 0;
				curr_state = Scan_Finger;
 434:	c3 e0       	ldi	r28, 0x03	; 3
 436:	d0 e0       	ldi	r29, 0x00	; 0
	
	lcd_init(LCD_DISP_ON);
	
	 while(1)
	 {
		 switch(curr_state){
 438:	80 91 46 01 	lds	r24, 0x0146
 43c:	90 91 47 01 	lds	r25, 0x0147
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	91 05       	cpc	r25, r1
 444:	51 f1       	breq	.+84     	; 0x49a <main+0xa6>
 446:	1c f4       	brge	.+6      	; 0x44e <main+0x5a>
 448:	00 97       	sbiw	r24, 0x00	; 0
 44a:	51 f0       	breq	.+20     	; 0x460 <main+0x6c>
 44c:	f9 cf       	rjmp	.-14     	; 0x440 <main+0x4c>
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	91 05       	cpc	r25, r1
 452:	09 f4       	brne	.+2      	; 0x456 <main+0x62>
 454:	5a c0       	rjmp	.+180    	; 0x50a <__stack+0xb>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	91 05       	cpc	r25, r1
 45a:	09 f4       	brne	.+2      	; 0x45e <main+0x6a>
 45c:	6e c0       	rjmp	.+220    	; 0x53a <__stack+0x3b>
 45e:	f0 cf       	rjmp	.-32     	; 0x440 <main+0x4c>
			 
			 case Get_Pin:
				lcd_clrscr();
 460:	d4 d0       	rcall	.+424    	; 0x60a <lcd_clrscr>
				//lcd_puts("Print Valid ");
				//lcd_putc('\n');
				lcd_puts("Enter PIN: ");
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	e9 d0       	rcall	.+466    	; 0x63a <lcd_puts>
				while(pin_event != 1){
 468:	80 91 42 01 	lds	r24, 0x0142
 46c:	90 91 43 01 	lds	r25, 0x0143
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	51 f0       	breq	.+20     	; 0x488 <main+0x94>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 474:	25 e8       	ldi	r18, 0x85	; 133
 476:	2a 95       	dec	r18
 478:	f1 f7       	brne	.-4      	; 0x476 <main+0x82>
 47a:	00 00       	nop
 47c:	80 91 42 01 	lds	r24, 0x0142
 480:	90 91 43 01 	lds	r25, 0x0143
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	b1 f7       	brne	.-20     	; 0x474 <main+0x80>
					_delay_us(50);
					 // Forever loop until keypad enters in 4 numbers for pin
			    }   
				pin_event = 0;
 488:	10 92 43 01 	sts	0x0143, r1
 48c:	10 92 42 01 	sts	0x0142, r1
				curr_state = Check_Pin;
 490:	10 93 47 01 	sts	0x0147, r17
 494:	00 93 46 01 	sts	0x0146, r16
			 break;
 498:	cf cf       	rjmp	.-98     	; 0x438 <main+0x44>
			 
			 case Check_Pin:
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
 49a:	44 e0       	ldi	r20, 0x04	; 4
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	64 e3       	ldi	r22, 0x34	; 52
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	8a e6       	ldi	r24, 0x6A	; 106
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	34 d1       	rcall	.+616    	; 0x710 <strncmp_P>
 4a8:	89 2b       	or	r24, r25
 4aa:	29 f4       	brne	.+10     	; 0x4b6 <main+0xc2>
					curr_state = Authorize;
 4ac:	f0 92 47 01 	sts	0x0147, r15
 4b0:	e0 92 46 01 	sts	0x0146, r14
 4b4:	c1 cf       	rjmp	.-126    	; 0x438 <main+0x44>
				}else{
					lcd_clrscr();
 4b6:	a9 d0       	rcall	.+338    	; 0x60a <lcd_clrscr>
					lcd_puts("Pin invalid");
 4b8:	8e e0       	ldi	r24, 0x0E	; 14
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	be d0       	rcall	.+380    	; 0x63a <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	98 e0       	ldi	r25, 0x08	; 8
 4c2:	2d e3       	ldi	r18, 0x3D	; 61
 4c4:	81 50       	subi	r24, 0x01	; 1
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	20 40       	sbci	r18, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <main+0xd0>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <main+0xda>
 4ce:	00 00       	nop
					_delay_ms(2500);
					lcd_clrscr();
 4d0:	9c d0       	rcall	.+312    	; 0x60a <lcd_clrscr>
					lcd_puts("Enter PIN:");
 4d2:	8a e1       	ldi	r24, 0x1A	; 26
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	b1 d0       	rcall	.+354    	; 0x63a <lcd_puts>
					while(pin_event != 1){
 4d8:	80 91 42 01 	lds	r24, 0x0142
 4dc:	90 91 43 01 	lds	r25, 0x0143
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	51 f0       	breq	.+20     	; 0x4f8 <main+0x104>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e4:	85 e8       	ldi	r24, 0x85	; 133
 4e6:	8a 95       	dec	r24
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <main+0xf2>
 4ea:	00 00       	nop
 4ec:	80 91 42 01 	lds	r24, 0x0142
 4f0:	90 91 43 01 	lds	r25, 0x0143
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	b1 f7       	brne	.-20     	; 0x4e4 <main+0xf0>
						_delay_us(50);
						// Forever loop until keypad enters in 4 numbers for pin
					}
					pin_event = 0;
 4f8:	10 92 43 01 	sts	0x0143, r1
 4fc:	10 92 42 01 	sts	0x0142, r1
					curr_state = Check_Pin;
 500:	10 93 47 01 	sts	0x0147, r17
 504:	00 93 46 01 	sts	0x0146, r16
 508:	97 cf       	rjmp	.-210    	; 0x438 <main+0x44>
				}
				
			 break;
			 
			 case Authorize:
				lcd_clrscr();
 50a:	7f d0       	rcall	.+254    	; 0x60a <lcd_clrscr>
				lcd_puts("Access Granted");
 50c:	85 e2       	ldi	r24, 0x25	; 37
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	94 d0       	rcall	.+296    	; 0x63a <lcd_puts>
				
				PORTC &= ~(1 << 5);	// Turn LED on for 5 seconds
 512:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 514:	9f ef       	ldi	r25, 0xFF	; 255
 516:	29 e6       	ldi	r18, 0x69	; 105
 518:	88 e1       	ldi	r24, 0x18	; 24
 51a:	91 50       	subi	r25, 0x01	; 1
 51c:	20 40       	sbci	r18, 0x00	; 0
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	e1 f7       	brne	.-8      	; 0x51a <__stack+0x1b>
 522:	00 c0       	rjmp	.+0      	; 0x524 <__stack+0x25>
 524:	00 00       	nop
				_delay_ms(1000);
				swipe_event = 0;
 526:	10 92 45 01 	sts	0x0145, r1
 52a:	10 92 44 01 	sts	0x0144, r1
				curr_state = Scan_Finger;
 52e:	d0 93 47 01 	sts	0x0147, r29
 532:	c0 93 46 01 	sts	0x0146, r28
				PORTC |= (1 << 5);	// Turn LED off
 536:	45 9a       	sbi	0x08, 5	; 8
			
			  break;
 538:	7f cf       	rjmp	.-258    	; 0x438 <main+0x44>
			  
			  case Scan_Finger:
			  lcd_clrscr();	// Initialize LCD with text
 53a:	67 d0       	rcall	.+206    	; 0x60a <lcd_clrscr>
			  lcd_puts("Scan Finger");
 53c:	84 e3       	ldi	r24, 0x34	; 52
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	7c d0       	rcall	.+248    	; 0x63a <lcd_puts>
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	28 e0       	ldi	r18, 0x08	; 8
 546:	8d e3       	ldi	r24, 0x3D	; 61
 548:	91 50       	subi	r25, 0x01	; 1
 54a:	20 40       	sbci	r18, 0x00	; 0
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <__stack+0x49>
 550:	00 c0       	rjmp	.+0      	; 0x552 <__stack+0x53>
 552:	00 00       	nop
			  _delay_ms(2500);
			  if(swipe_event == 0){
 554:	80 91 44 01 	lds	r24, 0x0144
 558:	90 91 45 01 	lds	r25, 0x0145
 55c:	89 2b       	or	r24, r25
 55e:	29 f4       	brne	.+10     	; 0x56a <__stack+0x6b>
				  curr_state = Scan_Finger;	// No card swipe
 560:	d0 93 47 01 	sts	0x0147, r29
 564:	c0 93 46 01 	sts	0x0146, r28
 568:	67 cf       	rjmp	.-306    	; 0x438 <main+0x44>
				  }else{
				  curr_state = Validate_User;
 56a:	84 e0       	ldi	r24, 0x04	; 4
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	90 93 47 01 	sts	0x0147, r25
 572:	80 93 46 01 	sts	0x0146, r24
 576:	60 cf       	rjmp	.-320    	; 0x438 <main+0x44>

00000578 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 578:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57a:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 57c:	2b 98       	cbi	0x05, 3	; 5
 57e:	08 95       	ret

00000580 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 586:	66 23       	and	r22, r22
 588:	11 f0       	breq	.+4      	; 0x58e <lcd_write+0xe>
       lcd_rs_high();
 58a:	2d 9a       	sbi	0x05, 5	; 5
 58c:	01 c0       	rjmp	.+2      	; 0x590 <lcd_write+0x10>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 58e:	2d 98       	cbi	0x05, 5	; 5
    }
    lcd_rw_low();    /* RW=0  write mode      */
 590:	2c 98       	cbi	0x05, 4	; 5

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 592:	87 b1       	in	r24, 0x07	; 7
 594:	8f 60       	ori	r24, 0x0F	; 15
 596:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 598:	c8 b1       	in	r28, 0x08	; 8
 59a:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 59c:	8d 2f       	mov	r24, r29
 59e:	82 95       	swap	r24
 5a0:	8f 70       	andi	r24, 0x0F	; 15
 5a2:	8c 2b       	or	r24, r28
 5a4:	88 b9       	out	0x08, r24	; 8
        lcd_e_toggle();
 5a6:	e8 df       	rcall	.-48     	; 0x578 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 5a8:	df 70       	andi	r29, 0x0F	; 15
 5aa:	dc 2b       	or	r29, r28
 5ac:	d8 b9       	out	0x08, r29	; 8
        lcd_e_toggle();
 5ae:	e4 df       	rcall	.-56     	; 0x578 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 5b0:	cf 60       	ori	r28, 0x0F	; 15
 5b2:	c8 b9       	out	0x08, r28	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 5ba:	88 23       	and	r24, r24
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 5be:	2d 9a       	sbi	0x05, 5	; 5
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 5c2:	2d 98       	cbi	0x05, 5	; 5
    lcd_rw_high();                           /* RW=1  read mode      */
 5c4:	2c 9a       	sbi	0x05, 4	; 5
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 5c6:	87 b1       	in	r24, 0x07	; 7
 5c8:	80 7f       	andi	r24, 0xF0	; 240
 5ca:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
 5cc:	2b 9a       	sbi	0x05, 3	; 5
 5ce:	00 00       	nop
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 5d0:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
 5d2:	2b 98       	cbi	0x05, 3	; 5
 5d4:	00 00       	nop
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
 5d6:	2b 9a       	sbi	0x05, 3	; 5
 5d8:	00 00       	nop
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 5da:	86 b1       	in	r24, 0x06	; 6
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 5dc:	92 95       	swap	r25
 5de:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 5e0:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
 5e2:	2b 98       	cbi	0x05, 3	; 5
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 5e4:	89 2b       	or	r24, r25
 5e6:	08 95       	ret

000005e8 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	e7 df       	rcall	.-50     	; 0x5ba <lcd_read>
 5ec:	88 23       	and	r24, r24
 5ee:	e4 f3       	brlt	.-8      	; 0x5e8 <lcd_waitbusy>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <lcd_waitbusy+0xa>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	e1 df       	rcall	.-62     	; 0x5ba <lcd_read>
    
}/* lcd_waitbusy */
 5f8:	08 95       	ret

000005fa <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 5fa:	cf 93       	push	r28
 5fc:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 5fe:	f4 df       	rcall	.-24     	; 0x5e8 <lcd_waitbusy>
    lcd_write(cmd,0);
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	8c 2f       	mov	r24, r28
 604:	bd df       	rcall	.-134    	; 0x580 <lcd_write>
}
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	f6 df       	rcall	.-20     	; 0x5fa <lcd_command>
 60e:	08 95       	ret

00000610 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	f3 df       	rcall	.-26     	; 0x5fa <lcd_command>
 614:	08 95       	ret

00000616 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 616:	cf 93       	push	r28
 618:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 61a:	e6 df       	rcall	.-52     	; 0x5e8 <lcd_waitbusy>
    if (c=='\n')
 61c:	ca 30       	cpi	r28, 0x0A	; 10
 61e:	41 f4       	brne	.+16     	; 0x630 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 620:	80 34       	cpi	r24, 0x40	; 64
 622:	10 f4       	brcc	.+4      	; 0x628 <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
 624:	80 e4       	ldi	r24, 0x40	; 64
 626:	01 c0       	rjmp	.+2      	; 0x62a <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
 628:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 62a:	80 58       	subi	r24, 0x80	; 128
 62c:	e6 df       	rcall	.-52     	; 0x5fa <lcd_command>
 62e:	03 c0       	rjmp	.+6      	; 0x636 <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	8c 2f       	mov	r24, r28
 634:	a5 df       	rcall	.-182    	; 0x580 <lcd_write>
    }

}/* lcd_putc */
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 63e:	ec 01       	movw	r28, r24
 640:	21 96       	adiw	r28, 0x01	; 1
 642:	fc 01       	movw	r30, r24
 644:	80 81       	ld	r24, Z
 646:	88 23       	and	r24, r24
 648:	21 f0       	breq	.+8      	; 0x652 <lcd_puts+0x18>
        lcd_putc(c);
 64a:	e5 df       	rcall	.-54     	; 0x616 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 64c:	89 91       	ld	r24, Y+
 64e:	81 11       	cpse	r24, r1
 650:	fc cf       	rjmp	.-8      	; 0x64a <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 658:	cf 93       	push	r28
 65a:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 65c:	87 b1       	in	r24, 0x07	; 7
 65e:	8f 60       	ori	r24, 0x0F	; 15
 660:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 662:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 664:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 666:	23 9a       	sbi	0x04, 3	; 4
 668:	8f e9       	ldi	r24, 0x9F	; 159
 66a:	9f e0       	ldi	r25, 0x0F	; 15
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <lcd_init+0x14>
 670:	00 c0       	rjmp	.+0      	; 0x672 <lcd_init+0x1a>
 672:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 674:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 676:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
 678:	7f df       	rcall	.-258    	; 0x578 <toggle_e>
 67a:	81 ee       	ldi	r24, 0xE1	; 225
 67c:	94 e0       	ldi	r25, 0x04	; 4
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <lcd_init+0x26>
 682:	00 c0       	rjmp	.+0      	; 0x684 <lcd_init+0x2c>
 684:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 686:	78 df       	rcall	.-272    	; 0x578 <toggle_e>
 688:	95 e1       	ldi	r25, 0x15	; 21
 68a:	9a 95       	dec	r25
 68c:	f1 f7       	brne	.-4      	; 0x68a <lcd_init+0x32>
 68e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 690:	73 df       	rcall	.-282    	; 0x578 <toggle_e>
 692:	85 e1       	ldi	r24, 0x15	; 21
 694:	8a 95       	dec	r24
 696:	f1 f7       	brne	.-4      	; 0x694 <lcd_init+0x3c>
 698:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 69a:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
 69c:	6d df       	rcall	.-294    	; 0x578 <toggle_e>
 69e:	95 e1       	ldi	r25, 0x15	; 21
 6a0:	9a 95       	dec	r25
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <lcd_init+0x48>
 6a4:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 6a6:	88 e2       	ldi	r24, 0x28	; 40
 6a8:	a8 df       	rcall	.-176    	; 0x5fa <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 6aa:	88 e0       	ldi	r24, 0x08	; 8
 6ac:	a6 df       	rcall	.-180    	; 0x5fa <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 6ae:	ad df       	rcall	.-166    	; 0x60a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 6b0:	86 e0       	ldi	r24, 0x06	; 6
 6b2:	a3 df       	rcall	.-186    	; 0x5fa <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 6b4:	8c 2f       	mov	r24, r28
 6b6:	a1 df       	rcall	.-190    	; 0x5fa <lcd_command>

}/* lcd_init */
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
    unsigned char tmptail;
  
      
    if ( UART_TxHead != UART_TxTail) {
 6ce:	90 91 49 01 	lds	r25, 0x0149
 6d2:	80 91 48 01 	lds	r24, 0x0148
 6d6:	98 17       	cp	r25, r24
 6d8:	69 f0       	breq	.+26     	; 0x6f4 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 6da:	e0 91 48 01 	lds	r30, 0x0148
 6de:	ef 5f       	subi	r30, 0xFF	; 255
 6e0:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 6e2:	e0 93 48 01 	sts	0x0148, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	e6 5b       	subi	r30, 0xB6	; 182
 6ea:	fe 4f       	sbci	r31, 0xFE	; 254
 6ec:	80 81       	ld	r24, Z
 6ee:	80 93 c6 00 	sts	0x00C6, r24
 6f2:	05 c0       	rjmp	.+10     	; 0x6fe <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 6f4:	e1 ec       	ldi	r30, 0xC1	; 193
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	8f 7d       	andi	r24, 0xDF	; 223
 6fc:	80 83       	st	Z, r24
    }
}
 6fe:	ff 91       	pop	r31
 700:	ef 91       	pop	r30
 702:	9f 91       	pop	r25
 704:	8f 91       	pop	r24
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <strncmp_P>:
 710:	fb 01       	movw	r30, r22
 712:	dc 01       	movw	r26, r24
 714:	41 50       	subi	r20, 0x01	; 1
 716:	50 40       	sbci	r21, 0x00	; 0
 718:	30 f0       	brcs	.+12     	; 0x726 <strncmp_P+0x16>
 71a:	8d 91       	ld	r24, X+
 71c:	05 90       	lpm	r0, Z+
 71e:	80 19       	sub	r24, r0
 720:	19 f4       	brne	.+6      	; 0x728 <strncmp_P+0x18>
 722:	00 20       	and	r0, r0
 724:	b9 f7       	brne	.-18     	; 0x714 <strncmp_P+0x4>
 726:	88 1b       	sub	r24, r24
 728:	99 0b       	sbc	r25, r25
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
