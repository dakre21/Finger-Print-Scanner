
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000b00  00000b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800182  00800182  00000c16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001de4  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  00002b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000906  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000328  00000000  00000000  00003ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000480  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d0e  00000000  00000000  00004270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00004f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
   4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
   6:	33 c0       	rjmp	.+102    	; 0x6e <__bad_interrupt>
   8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__vector_5>
   c:	30 c0       	rjmp	.+96     	; 0x6e <__bad_interrupt>
   e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
  10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
  12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>
  14:	2c c0       	rjmp	.+88     	; 0x6e <__bad_interrupt>
  16:	2b c0       	rjmp	.+86     	; 0x6e <__bad_interrupt>
  18:	2a c0       	rjmp	.+84     	; 0x6e <__bad_interrupt>
  1a:	29 c0       	rjmp	.+82     	; 0x6e <__bad_interrupt>
  1c:	28 c0       	rjmp	.+80     	; 0x6e <__bad_interrupt>
  1e:	27 c0       	rjmp	.+78     	; 0x6e <__bad_interrupt>
  20:	26 c0       	rjmp	.+76     	; 0x6e <__bad_interrupt>
  22:	25 c0       	rjmp	.+74     	; 0x6e <__bad_interrupt>
  24:	cf c1       	rjmp	.+926    	; 0x3c4 <__vector_18>
  26:	02 c5       	rjmp	.+2564   	; 0xa2c <__vector_19>
  28:	22 c0       	rjmp	.+68     	; 0x6e <__bad_interrupt>
  2a:	21 c0       	rjmp	.+66     	; 0x6e <__bad_interrupt>
  2c:	20 c0       	rjmp	.+64     	; 0x6e <__bad_interrupt>
  2e:	1f c0       	rjmp	.+62     	; 0x6e <__bad_interrupt>
  30:	1e c0       	rjmp	.+60     	; 0x6e <__bad_interrupt>
  32:	1d c0       	rjmp	.+58     	; 0x6e <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	38 39       	cpi	r19, 0x98	; 152
  36:	38 39       	cpi	r19, 0x98	; 152

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf ef       	ldi	r28, 0xFF	; 255
  3e:	d4 e0       	ldi	r29, 0x04	; 4
  40:	de bf       	out	0x3e, r29	; 62
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	11 e0       	ldi	r17, 0x01	; 1
  46:	a0 e0       	ldi	r26, 0x00	; 0
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	e0 e0       	ldi	r30, 0x00	; 0
  4c:	fb e0       	ldi	r31, 0x0B	; 11
  4e:	02 c0       	rjmp	.+4      	; 0x54 <__do_copy_data+0x10>
  50:	05 90       	lpm	r0, Z+
  52:	0d 92       	st	X+, r0
  54:	a2 38       	cpi	r26, 0x82	; 130
  56:	b1 07       	cpc	r27, r17
  58:	d9 f7       	brne	.-10     	; 0x50 <__do_copy_data+0xc>

0000005a <__do_clear_bss>:
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	a2 e8       	ldi	r26, 0x82	; 130
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	01 c0       	rjmp	.+2      	; 0x64 <.do_clear_bss_start>

00000062 <.do_clear_bss_loop>:
  62:	1d 92       	st	X+, r1

00000064 <.do_clear_bss_start>:
  64:	a3 3c       	cpi	r26, 0xC3	; 195
  66:	b2 07       	cpc	r27, r18
  68:	e1 f7       	brne	.-8      	; 0x62 <.do_clear_bss_loop>
  6a:	1e d3       	rcall	.+1596   	; 0x6a8 <main>
  6c:	47 c5       	rjmp	.+2702   	; 0xafc <_exit>

0000006e <__bad_interrupt>:
  6e:	c8 cf       	rjmp	.-112    	; 0x0 <__vectors>

00000070 <__vector_5>:


const char pin[pin_length] PROGMEM = "8989";

// Interrupt for Keypad
ISR(PCINT2_vect){
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	2f 93       	push	r18
  7c:	3f 93       	push	r19
  7e:	4f 93       	push	r20
  80:	5f 93       	push	r21
  82:	6f 93       	push	r22
  84:	7f 93       	push	r23
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
	tmp2 = PORTD;
  92:	8b b1       	in	r24, 0x0b	; 11
	tmp2 &= ~(0x06);	// Clear PD2/PD3
  94:	89 7f       	andi	r24, 0xF9	; 249
  96:	80 93 ba 01 	sts	0x01BA, r24
	PORTD = tmp2;
  9a:	8b b9       	out	0x0b, r24	; 11
	tmp2 = PORTC;
  9c:	88 b1       	in	r24, 0x08	; 8
	tmp2 &= ~(0x16);
  9e:	89 7e       	andi	r24, 0xE9	; 233
  a0:	80 93 ba 01 	sts	0x01BA, r24
	PORTC = tmp2;	// Clear PC4
  a4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	80 e7       	ldi	r24, 0x70	; 112
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <__vector_5+0x3c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__vector_5+0x46>
  b6:	00 00       	nop
	
	_delay_ms(100);
	
	if((curr_state == Get_Pin)||(curr_state == Check_Pin)||(curr_state == Scan_Finger)){
  b8:	80 91 90 01 	lds	r24, 0x0190
  bc:	90 91 91 01 	lds	r25, 0x0191
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	91 05       	cpc	r25, r1
  c4:	18 f0       	brcs	.+6      	; 0xcc <__vector_5+0x5c>
  c6:	03 97       	sbiw	r24, 0x03	; 3
  c8:	09 f0       	breq	.+2      	; 0xcc <__vector_5+0x5c>
  ca:	6b c1       	rjmp	.+726    	; 0x3a2 <__vector_5+0x332>
		PORTC |= (1 << 5);	// Turn LED off -- Sets bit
  cc:	45 9a       	sbi	0x08, 5	; 8
		if(bit_is_clear(PIND,4)){
  ce:	4c 99       	sbic	0x09, 4	; 9
  d0:	4b c0       	rjmp	.+150    	; 0x168 <__vector_5+0xf8>
			//PORTD &= ~(1 << 0);
			PORTC |= (1 << 4);
  d2:	44 9a       	sbi	0x08, 4	; 8
			PORTD |= (1 << 2);
  d4:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d6:	86 e9       	ldi	r24, 0x96	; 150
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <__vector_5+0x6a>
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
  de:	4c 99       	sbic	0x09, 4	; 9
  e0:	10 c0       	rjmp	.+32     	; 0x102 <__vector_5+0x92>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	61 d4       	rcall	.+2242   	; 0x9aa <lcd_puts>
					flag++;
  e8:	80 91 88 01 	lds	r24, 0x0188
  ec:	90 91 89 01 	lds	r25, 0x0189
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 89 01 	sts	0x0189, r25
  f6:	80 93 88 01 	sts	0x0188, r24
					key = '1';
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	80 93 bd 01 	sts	0x01BD, r24
 100:	cc c0       	rjmp	.+408    	; 0x29a <__vector_5+0x22a>
		
			}else{
		
			PORTD |= (1 << 3);
 102:	5b 9a       	sbi	0x0b, 3	; 11
	
			PORTC &= ~(1 << 4);
 104:	44 98       	cbi	0x08, 4	; 8
 106:	86 e9       	ldi	r24, 0x96	; 150
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <__vector_5+0x9a>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
 10e:	4c 99       	sbic	0x09, 4	; 9
 110:	10 c0       	rjmp	.+32     	; 0x132 <__vector_5+0xc2>

					//curr_userPin[flag] = key;
					lcd_puts("*");
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	49 d4       	rcall	.+2194   	; 0x9aa <lcd_puts>
					flag++;
 118:	80 91 88 01 	lds	r24, 0x0188
 11c:	90 91 89 01 	lds	r25, 0x0189
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 89 01 	sts	0x0189, r25
 126:	80 93 88 01 	sts	0x0188, r24
					key = '2';
 12a:	82 e3       	ldi	r24, 0x32	; 50
 12c:	80 93 bd 01 	sts	0x01BD, r24
 130:	b4 c0       	rjmp	.+360    	; 0x29a <__vector_5+0x22a>
		
			}else{
				
			PORTC |= (1 << 4);
 132:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 134:	5a 98       	cbi	0x0b, 2	; 11
 136:	86 e9       	ldi	r24, 0x96	; 150
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <__vector_5+0xca>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
 13e:	4c 99       	sbic	0x09, 4	; 9
 140:	0f c0       	rjmp	.+30     	; 0x160 <__vector_5+0xf0>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	31 d4       	rcall	.+2146   	; 0x9aa <lcd_puts>
					flag++;
 148:	80 91 88 01 	lds	r24, 0x0188
 14c:	90 91 89 01 	lds	r25, 0x0189
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 89 01 	sts	0x0189, r25
 156:	80 93 88 01 	sts	0x0188, r24
					key = '3';
 15a:	83 e3       	ldi	r24, 0x33	; 51
 15c:	80 93 bd 01 	sts	0x01BD, r24
			}
			PORTD &= ~(1 << 3);
 160:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 5);
 162:	45 98       	cbi	0x08, 5	; 8
			PORTD &= ~(1 << 2);
 164:	5a 98       	cbi	0x0b, 2	; 11
 166:	99 c0       	rjmp	.+306    	; 0x29a <__vector_5+0x22a>
		
			}

		}		
	
	}else if(bit_is_clear(PIND,5)){
 168:	4d 99       	sbic	0x09, 5	; 9
 16a:	4b c0       	rjmp	.+150    	; 0x202 <__vector_5+0x192>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 16c:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 16e:	5a 9a       	sbi	0x0b, 2	; 11
 170:	84 e6       	ldi	r24, 0x64	; 100
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <__vector_5+0x104>
	_delay_loop_2(100);

	if(bit_is_clear(PIND,5)){
 178:	4d 99       	sbic	0x09, 5	; 9
 17a:	10 c0       	rjmp	.+32     	; 0x19c <__vector_5+0x12c>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	14 d4       	rcall	.+2088   	; 0x9aa <lcd_puts>
		flag++;
 182:	80 91 88 01 	lds	r24, 0x0188
 186:	90 91 89 01 	lds	r25, 0x0189
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 89 01 	sts	0x0189, r25
 190:	80 93 88 01 	sts	0x0188, r24
		key = '4';
 194:	84 e3       	ldi	r24, 0x34	; 52
 196:	80 93 bd 01 	sts	0x01BD, r24
 19a:	7f c0       	rjmp	.+254    	; 0x29a <__vector_5+0x22a>
	
		}else{
	
		PORTD |= (1 << 3);
 19c:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 19e:	44 98       	cbi	0x08, 4	; 8
 1a0:	86 e9       	ldi	r24, 0x96	; 150
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <__vector_5+0x134>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,5)){
 1a8:	4d 99       	sbic	0x09, 5	; 9
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <__vector_5+0x15c>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	fc d3       	rcall	.+2040   	; 0x9aa <lcd_puts>
			flag++;
 1b2:	80 91 88 01 	lds	r24, 0x0188
 1b6:	90 91 89 01 	lds	r25, 0x0189
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 89 01 	sts	0x0189, r25
 1c0:	80 93 88 01 	sts	0x0188, r24
			key = '5';
 1c4:	85 e3       	ldi	r24, 0x35	; 53
 1c6:	80 93 bd 01 	sts	0x01BD, r24
 1ca:	67 c0       	rjmp	.+206    	; 0x29a <__vector_5+0x22a>
		
			}else{
		
			PORTC |= (1 << 4);
 1cc:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 1ce:	5a 98       	cbi	0x0b, 2	; 11
 1d0:	86 e9       	ldi	r24, 0x96	; 150
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <__vector_5+0x164>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,5)){
 1d8:	4d 99       	sbic	0x09, 5	; 9
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <__vector_5+0x18a>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	e4 d3       	rcall	.+1992   	; 0x9aa <lcd_puts>
				flag++;
 1e2:	80 91 88 01 	lds	r24, 0x0188
 1e6:	90 91 89 01 	lds	r25, 0x0189
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	90 93 89 01 	sts	0x0189, r25
 1f0:	80 93 88 01 	sts	0x0188, r24
				key = '6';
 1f4:	86 e3       	ldi	r24, 0x36	; 54
 1f6:	80 93 bd 01 	sts	0x01BD, r24
			}
			PORTD &= ~(1 << 3);
 1fa:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 1fc:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 1fe:	5a 98       	cbi	0x0b, 2	; 11
 200:	4c c0       	rjmp	.+152    	; 0x29a <__vector_5+0x22a>
		
		}

	}

	}else if(bit_is_clear(PIND,6)){
 202:	4e 99       	sbic	0x09, 6	; 9
 204:	4a c0       	rjmp	.+148    	; 0x29a <__vector_5+0x22a>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 206:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 208:	5a 9a       	sbi	0x0b, 2	; 11
 20a:	86 e9       	ldi	r24, 0x96	; 150
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <__vector_5+0x19e>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,6)){
 212:	4e 99       	sbic	0x09, 6	; 9
 214:	10 c0       	rjmp	.+32     	; 0x236 <__vector_5+0x1c6>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	c7 d3       	rcall	.+1934   	; 0x9aa <lcd_puts>
		flag++;
 21c:	80 91 88 01 	lds	r24, 0x0188
 220:	90 91 89 01 	lds	r25, 0x0189
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	90 93 89 01 	sts	0x0189, r25
 22a:	80 93 88 01 	sts	0x0188, r24
		key = '7';
 22e:	87 e3       	ldi	r24, 0x37	; 55
 230:	80 93 bd 01 	sts	0x01BD, r24
 234:	32 c0       	rjmp	.+100    	; 0x29a <__vector_5+0x22a>
	
		}else{
	
		PORTD |= (1 << 3);
 236:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 238:	44 98       	cbi	0x08, 4	; 8
 23a:	86 e9       	ldi	r24, 0x96	; 150
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <__vector_5+0x1ce>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,6)){
 242:	4e 99       	sbic	0x09, 6	; 9
 244:	10 c0       	rjmp	.+32     	; 0x266 <__vector_5+0x1f6>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	af d3       	rcall	.+1886   	; 0x9aa <lcd_puts>
			flag++;
 24c:	80 91 88 01 	lds	r24, 0x0188
 250:	90 91 89 01 	lds	r25, 0x0189
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 89 01 	sts	0x0189, r25
 25a:	80 93 88 01 	sts	0x0188, r24
			key = '8';
 25e:	88 e3       	ldi	r24, 0x38	; 56
 260:	80 93 bd 01 	sts	0x01BD, r24
 264:	1a c0       	rjmp	.+52     	; 0x29a <__vector_5+0x22a>
		
			}else{
		
			PORTC |= (1 << 4);
 266:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 268:	5a 98       	cbi	0x0b, 2	; 11
 26a:	86 e9       	ldi	r24, 0x96	; 150
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <__vector_5+0x1fe>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,6)){
 272:	4e 99       	sbic	0x09, 6	; 9
 274:	0f c0       	rjmp	.+30     	; 0x294 <__vector_5+0x224>
				
				//curr_userPin[flag] = key;
				lcd_puts("*");
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	97 d3       	rcall	.+1838   	; 0x9aa <lcd_puts>
				flag++;
 27c:	80 91 88 01 	lds	r24, 0x0188
 280:	90 91 89 01 	lds	r25, 0x0189
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	90 93 89 01 	sts	0x0189, r25
 28a:	80 93 88 01 	sts	0x0188, r24
				key = '9';
 28e:	89 e3       	ldi	r24, 0x39	; 57
 290:	80 93 bd 01 	sts	0x01BD, r24
			}
			PORTD &= ~(1 << 3);
 294:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 296:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 298:	5a 98       	cbi	0x0b, 2	; 11

	}

	}

	if(bit_is_clear(PIND,7)){
 29a:	4f 99       	sbic	0x09, 7	; 9
 29c:	50 c0       	rjmp	.+160    	; 0x33e <__vector_5+0x2ce>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 29e:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 2a0:	5a 9a       	sbi	0x0b, 2	; 11
 2a2:	86 e9       	ldi	r24, 0x96	; 150
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <__vector_5+0x236>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,7)){
 2aa:	4f 99       	sbic	0x09, 7	; 9
 2ac:	16 c0       	rjmp	.+44     	; 0x2da <__vector_5+0x26a>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	7b d3       	rcall	.+1782   	; 0x9aa <lcd_puts>
		flag++;
 2b4:	80 91 88 01 	lds	r24, 0x0188
 2b8:	90 91 89 01 	lds	r25, 0x0189
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 89 01 	sts	0x0189, r25
 2c2:	80 93 88 01 	sts	0x0188, r24
		key = '*';
 2c6:	8a e2       	ldi	r24, 0x2A	; 42
 2c8:	80 93 bd 01 	sts	0x01BD, r24
		finger_event = 2;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 8f 01 	sts	0x018F, r25
 2d4:	80 93 8e 01 	sts	0x018E, r24
 2d8:	32 c0       	rjmp	.+100    	; 0x33e <__vector_5+0x2ce>
		}else{
	
		PORTD |= (1 << 3);
 2da:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 2dc:	44 98       	cbi	0x08, 4	; 8
 2de:	8a ef       	ldi	r24, 0xFA	; 250
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <__vector_5+0x272>
	
		_delay_loop_2(250);
	
		if(bit_is_clear(PIND,7)){
 2e6:	4f 99       	sbic	0x09, 7	; 9
 2e8:	10 c0       	rjmp	.+32     	; 0x30a <__vector_5+0x29a>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	5d d3       	rcall	.+1722   	; 0x9aa <lcd_puts>
			flag++;
 2f0:	80 91 88 01 	lds	r24, 0x0188
 2f4:	90 91 89 01 	lds	r25, 0x0189
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	90 93 89 01 	sts	0x0189, r25
 2fe:	80 93 88 01 	sts	0x0188, r24
			key = '0';
 302:	80 e3       	ldi	r24, 0x30	; 48
 304:	80 93 bd 01 	sts	0x01BD, r24
 308:	1a c0       	rjmp	.+52     	; 0x33e <__vector_5+0x2ce>
			
			}else{
		
			PORTC |= (1 << 4);
 30a:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 30c:	5a 98       	cbi	0x0b, 2	; 11
 30e:	86 e9       	ldi	r24, 0x96	; 150
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <__vector_5+0x2a2>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,7)){
 316:	4f 99       	sbic	0x09, 7	; 9
 318:	0f c0       	rjmp	.+30     	; 0x338 <__vector_5+0x2c8>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	45 d3       	rcall	.+1674   	; 0x9aa <lcd_puts>
				flag++;
 320:	80 91 88 01 	lds	r24, 0x0188
 324:	90 91 89 01 	lds	r25, 0x0189
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	90 93 89 01 	sts	0x0189, r25
 32e:	80 93 88 01 	sts	0x0188, r24
				key = '#';
 332:	83 e2       	ldi	r24, 0x23	; 35
 334:	80 93 bd 01 	sts	0x01BD, r24
			}
			PORTD &= ~(1 << 3);
 338:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 33a:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 33c:	5a 98       	cbi	0x0b, 2	; 11
 33e:	86 e9       	ldi	r24, 0x96	; 150
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <__vector_5+0x2d2>

	}
	
	_delay_loop_2(150);
	
	if(key != ' '){
 346:	80 91 bd 01 	lds	r24, 0x01BD
 34a:	80 32       	cpi	r24, 0x20	; 32
 34c:	39 f0       	breq	.+14     	; 0x35c <__vector_5+0x2ec>
		curr_userPin[flag] = key;
 34e:	e0 91 88 01 	lds	r30, 0x0188
 352:	f0 91 89 01 	lds	r31, 0x0189
 356:	e1 54       	subi	r30, 0x41	; 65
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 83       	st	Z, r24
		//flag++;
		//lcd_puts("*");
		//PORTC &= ~(1 << 5);
	}
	
	if(flag >= 4){
 35c:	80 91 88 01 	lds	r24, 0x0188
 360:	90 91 89 01 	lds	r25, 0x0189
 364:	04 97       	sbiw	r24, 0x04	; 4
 366:	ec f0       	brlt	.+58     	; 0x3a2 <__vector_5+0x332>
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
 368:	0b d3       	rcall	.+1558   	; 0x980 <lcd_home>
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
			final_userPin[i-1] = key;
 36a:	80 91 c0 01 	lds	r24, 0x01C0
 36e:	80 93 b6 01 	sts	0x01B6, r24
 372:	80 91 c1 01 	lds	r24, 0x01C1
 376:	80 93 b7 01 	sts	0x01B7, r24
 37a:	80 91 c2 01 	lds	r24, 0x01C2
 37e:	80 93 b8 01 	sts	0x01B8, r24
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
 382:	80 91 c3 01 	lds	r24, 0x01C3
			final_userPin[i-1] = key;
 386:	80 93 b9 01 	sts	0x01B9, r24
 38a:	80 93 bd 01 	sts	0x01BD, r24
		}
	
		pin_event = 1;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	90 93 8d 01 	sts	0x018D, r25
 396:	80 93 8c 01 	sts	0x018C, r24
		flag = 0;
 39a:	10 92 89 01 	sts	0x0189, r1
 39e:	10 92 88 01 	sts	0x0188, r1
//		check_pin();
	}

}
}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <__vector_18>:

//Data received on the serial port interrupt -- RX

ISR(USART_RX_vect){
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
		data = UDR0;
 3e6:	20 91 c6 00 	lds	r18, 0x00C6
 3ea:	20 93 bc 01 	sts	0x01BC, r18
		
		if((curr_state == Check_Pin)&&(count == 4)){
 3ee:	80 91 90 01 	lds	r24, 0x0190
 3f2:	90 91 91 01 	lds	r25, 0x0191
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	09 f5       	brne	.+66     	; 0x43c <__vector_18+0x78>
 3fa:	80 91 86 01 	lds	r24, 0x0186
 3fe:	90 91 87 01 	lds	r25, 0x0187
 402:	04 97       	sbiw	r24, 0x04	; 4
 404:	c1 f5       	brne	.+112    	; 0x476 <__vector_18+0xb2>
			if(data != 0){
 406:	22 23       	and	r18, r18
 408:	41 f0       	breq	.+16     	; 0x41a <__vector_18+0x56>
				enroll_id = data;
 40a:	82 2f       	mov	r24, r18
 40c:	90 e0       	ldi	r25, 0x00	; 0
				enroll_id++;
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 85 01 	sts	0x0185, r25
 414:	80 93 84 01 	sts	0x0184, r24
 418:	04 c0       	rjmp	.+8      	; 0x422 <__vector_18+0x5e>
			}else if(data == 0){
				enroll_id = data;
 41a:	10 92 85 01 	sts	0x0185, r1
 41e:	10 92 84 01 	sts	0x0184, r1
			}
			lcd_clrscr();
 422:	ab d2       	rcall	.+1366   	; 0x97a <lcd_clrscr>
			lcd_puts("get enroll count");
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	c0 d2       	rcall	.+1408   	; 0x9aa <lcd_puts>
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	89 e6       	ldi	r24, 0x69	; 105
 42e:	98 e1       	ldi	r25, 0x18	; 24
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <__vector_18+0x6c>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__vector_18+0x76>
 43a:	00 00       	nop
			_delay_ms(1000);
		}
		if((curr_state == Scan_Finger)&&(data == 0x01)){
 43c:	80 91 90 01 	lds	r24, 0x0190
 440:	90 91 91 01 	lds	r25, 0x0191
 444:	03 97       	sbiw	r24, 0x03	; 3
 446:	b9 f4       	brne	.+46     	; 0x476 <__vector_18+0xb2>
 448:	80 91 bc 01 	lds	r24, 0x01BC
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	99 f4       	brne	.+38     	; 0x476 <__vector_18+0xb2>
			finger_event = 1;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	90 93 8f 01 	sts	0x018F, r25
 458:	80 93 8e 01 	sts	0x018E, r24
			lcd_clrscr();
 45c:	8e d2       	rcall	.+1308   	; 0x97a <lcd_clrscr>
			lcd_puts("finger pressed");
 45e:	83 e1       	ldi	r24, 0x13	; 19
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	a3 d2       	rcall	.+1350   	; 0x9aa <lcd_puts>
 464:	2f ef       	ldi	r18, 0xFF	; 255
 466:	89 e6       	ldi	r24, 0x69	; 105
 468:	98 e1       	ldi	r25, 0x18	; 24
 46a:	21 50       	subi	r18, 0x01	; 1
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <__vector_18+0xa6>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__vector_18+0xb0>
 474:	00 00       	nop
			_delay_ms(1000);
		}
		if(data == 0x31){
 476:	80 91 bc 01 	lds	r24, 0x01BC
 47a:	81 33       	cpi	r24, 0x31	; 49
 47c:	99 f4       	brne	.+38     	; 0x4a4 <__vector_18+0xe0>
			lcd_clrscr();
 47e:	7d d2       	rcall	.+1274   	; 0x97a <lcd_clrscr>
			lcd_puts("response error");
 480:	82 e2       	ldi	r24, 0x22	; 34
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	92 d2       	rcall	.+1316   	; 0x9aa <lcd_puts>
 486:	2f ef       	ldi	r18, 0xFF	; 255
 488:	89 e6       	ldi	r24, 0x69	; 105
 48a:	98 e1       	ldi	r25, 0x18	; 24
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <__vector_18+0xc8>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__vector_18+0xd2>
 496:	00 00       	nop
			_delay_ms(1000);
			finger_event = 2;
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 8f 01 	sts	0x018F, r25
 4a0:	80 93 8e 01 	sts	0x018E, r24
		}
		if(data == 0x30){
 4a4:	80 91 bc 01 	lds	r24, 0x01BC
 4a8:	80 33       	cpi	r24, 0x30	; 48
 4aa:	69 f4       	brne	.+26     	; 0x4c6 <__vector_18+0x102>
			lcd_clrscr();
 4ac:	66 d2       	rcall	.+1228   	; 0x97a <lcd_clrscr>
			lcd_puts("ack good");
 4ae:	81 e3       	ldi	r24, 0x31	; 49
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	7b d2       	rcall	.+1270   	; 0x9aa <lcd_puts>
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	89 e6       	ldi	r24, 0x69	; 105
 4b8:	98 e1       	ldi	r25, 0x18	; 24
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__vector_18+0xf6>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__vector_18+0x100>
 4c4:	00 00       	nop
			_delay_ms(1000);
		}
		lcd_clrscr();
 4c6:	59 d2       	rcall	.+1202   	; 0x97a <lcd_clrscr>
		
		if(curr_state == Check_Pin){
 4c8:	80 91 90 01 	lds	r24, 0x0190
 4cc:	90 91 91 01 	lds	r25, 0x0191
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	49 f4       	brne	.+18     	; 0x4e6 <__vector_18+0x122>
			count++;
 4d4:	80 91 86 01 	lds	r24, 0x0186
 4d8:	90 91 87 01 	lds	r25, 0x0187
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	90 93 87 01 	sts	0x0187, r25
 4e2:	80 93 86 01 	sts	0x0186, r24
 4e6:	8f e1       	ldi	r24, 0x1F	; 31
 4e8:	9e e4       	ldi	r25, 0x4E	; 78
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <__vector_18+0x126>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <__vector_18+0x12c>
 4f0:	00 00       	nop
			if(count_finger > 11){
				count_finger = 0;
			}
		}*/
		_delay_ms(10);
}
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <uart_transmit>:
	uart_transmit(0x01);	// High byte checksum
}

void uart_transmit(unsigned char data){
	//_delay_ms(10);
	cli();
 514:	f8 94       	cli
	uart_putc(data);
 516:	cf d2       	rcall	.+1438   	; 0xab6 <uart_putc>
	//while(!(UCSR0A & (1 << UDRE0)));
	//UDR0 = data;
	//while((UCSR0A & (1 << TXC0)) == 0){};
	sei();
 518:	78 94       	sei
 51a:	08 95       	ret

0000051c <initialize_fps>:
}

void initialize_fps(){
	// Open connection 

	uart_transmit(0x55);	// Start code 1
 51c:	85 e5       	ldi	r24, 0x55	; 85
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	f9 df       	rcall	.-14     	; 0x514 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 522:	8a ea       	ldi	r24, 0xAA	; 170
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	f6 df       	rcall	.-20     	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	f3 df       	rcall	.-26     	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	f0 df       	rcall	.-32     	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 (largest byte of param)
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	ed df       	rcall	.-38     	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2 (second largest byte of param)
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	ea df       	rcall	.-44     	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	e7 df       	rcall	.-50     	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4	
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	e4 df       	rcall	.-56     	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Byte 1 of command
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	e1 df       	rcall	.-62     	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	de df       	rcall	.-68     	; 0x514 <uart_transmit>
	uart_transmit(0x02);	// Low byte checksum
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	db df       	rcall	.-74     	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	d8 df       	rcall	.-80     	; 0x514 <uart_transmit>
 564:	08 95       	ret

00000566 <led_on>:
}

// Turn FPS LED on
void led_on(){
	
	uart_transmit(0x55);	// Start code 1
 566:	85 e5       	ldi	r24, 0x55	; 85
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	d4 df       	rcall	.-88     	; 0x514 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 56c:	8a ea       	ldi	r24, 0xAA	; 170
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	d1 df       	rcall	.-94     	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	ce df       	rcall	.-100    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	cb df       	rcall	.-106    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 -- LED ON
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	c8 df       	rcall	.-112    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	c5 df       	rcall	.-118    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	c2 df       	rcall	.-124    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	bf df       	rcall	.-130    	; 0x514 <uart_transmit>
	uart_transmit(0x12);	// Byte 1 of command
 596:	82 e1       	ldi	r24, 0x12	; 18
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	bc df       	rcall	.-136    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	b9 df       	rcall	.-142    	; 0x514 <uart_transmit>
	uart_transmit(0x13);	// Low byte checksum
 5a2:	83 e1       	ldi	r24, 0x13	; 19
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	b6 df       	rcall	.-148    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	b3 df       	rcall	.-154    	; 0x514 <uart_transmit>
 5ae:	08 95       	ret

000005b0 <getEnrollCount>:
	
	//uart_receive();
}

void getEnrollCount(){
	uart_transmit(0x55);	// Start code 1
 5b0:	85 e5       	ldi	r24, 0x55	; 85
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	af df       	rcall	.-162    	; 0x514 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 5b6:	8a ea       	ldi	r24, 0xAA	; 170
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	ac df       	rcall	.-168    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	a9 df       	rcall	.-174    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	a6 df       	rcall	.-180    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	a3 df       	rcall	.-186    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	a0 df       	rcall	.-192    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	9d df       	rcall	.-198    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	9a df       	rcall	.-204    	; 0x514 <uart_transmit>
	uart_transmit(0x20);	// Byte 1 of command
 5e0:	80 e2       	ldi	r24, 0x20	; 32
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	97 df       	rcall	.-210    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	94 df       	rcall	.-216    	; 0x514 <uart_transmit>
	uart_transmit(0x21);	// Low byte checksum
 5ec:	81 e2       	ldi	r24, 0x21	; 33
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	91 df       	rcall	.-222    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	8e df       	rcall	.-228    	; 0x514 <uart_transmit>
 5f8:	08 95       	ret

000005fa <fingerPressed>:
}

void fingerPressed(){
	uart_transmit(0x55);	// Start code 1
 5fa:	85 e5       	ldi	r24, 0x55	; 85
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	8a df       	rcall	.-236    	; 0x514 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 600:	8a ea       	ldi	r24, 0xAA	; 170
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	87 df       	rcall	.-242    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	84 df       	rcall	.-248    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	81 df       	rcall	.-254    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	7e df       	rcall	.-260    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	7b df       	rcall	.-266    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	78 df       	rcall	.-272    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	75 df       	rcall	.-278    	; 0x514 <uart_transmit>
	uart_transmit(0x26);	// Byte 1 of command
 62a:	86 e2       	ldi	r24, 0x26	; 38
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	72 df       	rcall	.-284    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	6f df       	rcall	.-290    	; 0x514 <uart_transmit>
	uart_transmit(0x27);	// Low byte checksum
 636:	87 e2       	ldi	r24, 0x27	; 39
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	6c df       	rcall	.-296    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	69 df       	rcall	.-302    	; 0x514 <uart_transmit>
 642:	08 95       	ret

00000644 <enrollStart>:
}

void enrollStart(){
	checksumLow = enroll_id + 22;
 644:	80 91 84 01 	lds	r24, 0x0184
 648:	90 91 85 01 	lds	r25, 0x0185
 64c:	46 96       	adiw	r24, 0x16	; 22
 64e:	90 93 83 01 	sts	0x0183, r25
 652:	80 93 82 01 	sts	0x0182, r24
	uart_transmit(0x55);	// Start code 1
 656:	85 e5       	ldi	r24, 0x55	; 85
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	5c df       	rcall	.-328    	; 0x514 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 65c:	8a ea       	ldi	r24, 0xAA	; 170
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	59 df       	rcall	.-334    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	56 df       	rcall	.-340    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	53 df       	rcall	.-346    	; 0x514 <uart_transmit>
	uart_transmit(enroll_id);	// Input parameter byte 1
 66e:	80 91 84 01 	lds	r24, 0x0184
 672:	90 91 85 01 	lds	r25, 0x0185
 676:	4e df       	rcall	.-356    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	4b df       	rcall	.-362    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	48 df       	rcall	.-368    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	45 df       	rcall	.-374    	; 0x514 <uart_transmit>
	uart_transmit(0x22);	// Byte 1 of command
 68a:	82 e2       	ldi	r24, 0x22	; 34
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	42 df       	rcall	.-380    	; 0x514 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	3f df       	rcall	.-386    	; 0x514 <uart_transmit>
	uart_transmit(checksumLow);	// Low byte checksum
 696:	80 91 82 01 	lds	r24, 0x0182
 69a:	90 91 83 01 	lds	r25, 0x0183
 69e:	3a df       	rcall	.-396    	; 0x514 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	37 df       	rcall	.-402    	; 0x514 <uart_transmit>
 6a6:	08 95       	ret

000006a8 <main>:
}

int main(void)            // Main Loop
{
	
	DDRB = 0b00101000;
 6a8:	88 e2       	ldi	r24, 0x28	; 40
 6aa:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b01111111;	// PC5 for keypad (before PD1)
 6ac:	8f e7       	ldi	r24, 0x7F	; 127
 6ae:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00001110;	// PD0 (RX) input & PD1 (TX) output for serial/ PD3 is now PD0 for keypad
 6b0:	8e e0       	ldi	r24, 0x0E	; 14
 6b2:	8a b9       	out	0x0a, r24	; 10
	//DDRD &= ~(1 << PD3);	// Set PD3 as input for mag card
	PORTC |= (1 << 5);	// Turn LED off -- Sets bit
 6b4:	45 9a       	sbi	0x08, 5	; 8
	//PORTB |= (1 << 1);
	PORTD = 0xF0;
 6b6:	80 ef       	ldi	r24, 0xF0	; 240
 6b8:	8b b9       	out	0x0b, r24	; 11

	// Enables pin change interrupt  
	tmp3 = PCICR;
 6ba:	e8 e6       	ldi	r30, 0x68	; 104
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	90 81       	ld	r25, Z
	tmp3 = 1 << (PCIE2) | 0 << (PCIE1) | 0 << (PCIE0);
 6c0:	94 e0       	ldi	r25, 0x04	; 4
 6c2:	90 93 bb 01 	sts	0x01BB, r25
	PCICR = tmp3;
 6c6:	90 83       	st	Z, r25
	tmp3 = PCMSK2;
 6c8:	ed e6       	ldi	r30, 0x6D	; 109
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	90 81       	ld	r25, Z
	tmp3 = 1 << (PCINT23) | 1 << (PCINT22) | 1 << (PCINT21) | 1 << (PCINT20) | 0 << (PCINT19) | 0 << (PCINT18) | 0 << (PCINT17) | 0 << (PCINT16);
 6ce:	80 93 bb 01 	sts	0x01BB, r24
	PCMSK2 = tmp3;
 6d2:	80 83       	st	Z, r24
	sei();                // Enables global interrupts
 6d4:	78 94       	sei
	lcd_init(LCD_DISP_ON);
 6d6:	8c e0       	ldi	r24, 0x0C	; 12
 6d8:	77 d1       	rcall	.+750    	; 0x9c8 <lcd_init>
	uart_init(BAUDRATE);
 6da:	83 e3       	ldi	r24, 0x33	; 51
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	d0 d1       	rcall	.+928    	; 0xa80 <uart_init>
 6e0:	2f ef       	ldi	r18, 0xFF	; 255
 6e2:	80 e7       	ldi	r24, 0x70	; 112
 6e4:	92 e0       	ldi	r25, 0x02	; 2
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	80 40       	sbci	r24, 0x00	; 0
 6ea:	90 40       	sbci	r25, 0x00	; 0
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x3e>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <main+0x48>
 6f0:	00 00       	nop
	//uart_init(51);
	//USART_Init();
	_delay_ms(100);
	initialize_fps();
 6f2:	14 df       	rcall	.-472    	; 0x51c <initialize_fps>
 6f4:	2f ef       	ldi	r18, 0xFF	; 255
 6f6:	80 e7       	ldi	r24, 0x70	; 112
 6f8:	92 e0       	ldi	r25, 0x02	; 2
 6fa:	21 50       	subi	r18, 0x01	; 1
 6fc:	80 40       	sbci	r24, 0x00	; 0
 6fe:	90 40       	sbci	r25, 0x00	; 0
 700:	e1 f7       	brne	.-8      	; 0x6fa <main+0x52>
 702:	00 c0       	rjmp	.+0      	; 0x704 <main+0x5c>
 704:	00 00       	nop
	_delay_ms(100);
	led_on();
 706:	2f df       	rcall	.-418    	; 0x566 <led_on>
 708:	2f ef       	ldi	r18, 0xFF	; 255
 70a:	80 e7       	ldi	r24, 0x70	; 112
 70c:	92 e0       	ldi	r25, 0x02	; 2
 70e:	21 50       	subi	r18, 0x01	; 1
 710:	80 40       	sbci	r24, 0x00	; 0
 712:	90 40       	sbci	r25, 0x00	; 0
 714:	e1 f7       	brne	.-8      	; 0x70e <main+0x66>
 716:	00 c0       	rjmp	.+0      	; 0x718 <main+0x70>
 718:	00 00       	nop
				lcd_clrscr();
				lcd_puts("Access Granted");
				
				PORTC &= ~(1 << 5);	// Turn LED on 
				_delay_ms(2500);
				curr_state = Scan_Finger;
 71a:	c3 e0       	ldi	r28, 0x03	; 3
 71c:	d0 e0       	ldi	r29, 0x00	; 0
			  if(finger_event == 0){
				  curr_state = Scan_Finger;	// No finger pressed
				  }else if (finger_event == 1){
					 curr_state = Enroll_User;
				 }else{
					 curr_state = EXIT;
 71e:	0f 2e       	mov	r0, r31
 720:	f5 e0       	ldi	r31, 0x05	; 5
 722:	af 2e       	mov	r10, r31
 724:	b1 2c       	mov	r11, r1
 726:	f0 2d       	mov	r31, r0
			  _delay_ms(2500);
			  count_finger = 0;
			  if(finger_event == 0){
				  curr_state = Scan_Finger;	// No finger pressed
				  }else if (finger_event == 1){
					 curr_state = Enroll_User;
 728:	68 94       	set
 72a:	ee 24       	eor	r14, r14
 72c:	e2 f8       	bld	r14, 2
 72e:	f1 2c       	mov	r15, r1
				while(pin_event != 1){
					_delay_us(50);
					 // Forever loop until keypad enters in 4 numbers for pin
			    }   
				pin_event = 0;
				curr_state = Check_Pin;
 730:	01 e0       	ldi	r16, 0x01	; 1
 732:	10 e0       	ldi	r17, 0x00	; 0
			 
			 case Check_Pin:
				getEnrollCount();
				_delay_ms(100);
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
					curr_state = Authorize;
 734:	68 94       	set
 736:	cc 24       	eor	r12, r12
 738:	c1 f8       	bld	r12, 1
 73a:	d1 2c       	mov	r13, r1
	led_on();
	_delay_ms(100);
	
	 while(1)
	 {
		 switch(curr_state){
 73c:	80 91 90 01 	lds	r24, 0x0190
 740:	90 91 91 01 	lds	r25, 0x0191
 744:	82 30       	cpi	r24, 0x02	; 2
 746:	91 05       	cpc	r25, r1
 748:	09 f4       	brne	.+2      	; 0x74c <main+0xa4>
 74a:	70 c0       	rjmp	.+224    	; 0x82c <main+0x184>
 74c:	34 f4       	brge	.+12     	; 0x75a <main+0xb2>
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	79 f0       	breq	.+30     	; 0x770 <main+0xc8>
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	91 05       	cpc	r25, r1
 756:	49 f1       	breq	.+82     	; 0x7aa <main+0x102>
 758:	f5 cf       	rjmp	.-22     	; 0x744 <main+0x9c>
 75a:	84 30       	cpi	r24, 0x04	; 4
 75c:	91 05       	cpc	r25, r1
 75e:	09 f4       	brne	.+2      	; 0x762 <main+0xba>
 760:	ab c0       	rjmp	.+342    	; 0x8b8 <main+0x210>
 762:	0c f4       	brge	.+2      	; 0x766 <main+0xbe>
 764:	77 c0       	rjmp	.+238    	; 0x854 <main+0x1ac>
 766:	85 30       	cpi	r24, 0x05	; 5
 768:	91 05       	cpc	r25, r1
 76a:	09 f4       	brne	.+2      	; 0x76e <main+0xc6>
 76c:	a7 c0       	rjmp	.+334    	; 0x8bc <main+0x214>
 76e:	ea cf       	rjmp	.-44     	; 0x744 <main+0x9c>
			 
			 case Get_Pin:
				lcd_clrscr();
 770:	04 d1       	rcall	.+520    	; 0x97a <lcd_clrscr>
				//lcd_puts("Print Valid ");
				//lcd_putc('\n');
				lcd_puts("Enter PIN: ");
 772:	8a e3       	ldi	r24, 0x3A	; 58
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	19 d1       	rcall	.+562    	; 0x9aa <lcd_puts>
				while(pin_event != 1){
 778:	80 91 8c 01 	lds	r24, 0x018C
 77c:	90 91 8d 01 	lds	r25, 0x018D
 780:	01 97       	sbiw	r24, 0x01	; 1
 782:	51 f0       	breq	.+20     	; 0x798 <main+0xf0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 784:	25 e8       	ldi	r18, 0x85	; 133
 786:	2a 95       	dec	r18
 788:	f1 f7       	brne	.-4      	; 0x786 <main+0xde>
 78a:	00 00       	nop
 78c:	80 91 8c 01 	lds	r24, 0x018C
 790:	90 91 8d 01 	lds	r25, 0x018D
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	b1 f7       	brne	.-20     	; 0x784 <main+0xdc>
					_delay_us(50);
					 // Forever loop until keypad enters in 4 numbers for pin
			    }   
				pin_event = 0;
 798:	10 92 8d 01 	sts	0x018D, r1
 79c:	10 92 8c 01 	sts	0x018C, r1
				curr_state = Check_Pin;
 7a0:	10 93 91 01 	sts	0x0191, r17
 7a4:	00 93 90 01 	sts	0x0190, r16
			 break;
 7a8:	c9 cf       	rjmp	.-110    	; 0x73c <main+0x94>
			 
			 case Check_Pin:
				getEnrollCount();
 7aa:	02 df       	rcall	.-508    	; 0x5b0 <getEnrollCount>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	90 e7       	ldi	r25, 0x70	; 112
 7b0:	22 e0       	ldi	r18, 0x02	; 2
 7b2:	81 50       	subi	r24, 0x01	; 1
 7b4:	90 40       	sbci	r25, 0x00	; 0
 7b6:	20 40       	sbci	r18, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <main+0x10a>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <main+0x114>
 7bc:	00 00       	nop
				_delay_ms(100);
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
 7be:	a7 01       	movw	r20, r14
 7c0:	64 e3       	ldi	r22, 0x34	; 52
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	86 eb       	ldi	r24, 0xB6	; 182
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	8b d1       	rcall	.+790    	; 0xae0 <strncmp_P>
 7ca:	89 2b       	or	r24, r25
 7cc:	29 f4       	brne	.+10     	; 0x7d8 <main+0x130>
					curr_state = Authorize;
 7ce:	d0 92 91 01 	sts	0x0191, r13
 7d2:	c0 92 90 01 	sts	0x0190, r12
 7d6:	b2 cf       	rjmp	.-156    	; 0x73c <main+0x94>
				}else{
					lcd_clrscr();
 7d8:	d0 d0       	rcall	.+416    	; 0x97a <lcd_clrscr>
					lcd_puts("Pin invalid");
 7da:	86 e4       	ldi	r24, 0x46	; 70
 7dc:	91 e0       	ldi	r25, 0x01	; 1
 7de:	e5 d0       	rcall	.+458    	; 0x9aa <lcd_puts>
 7e0:	8f ef       	ldi	r24, 0xFF	; 255
 7e2:	98 e0       	ldi	r25, 0x08	; 8
 7e4:	2d e3       	ldi	r18, 0x3D	; 61
 7e6:	81 50       	subi	r24, 0x01	; 1
 7e8:	90 40       	sbci	r25, 0x00	; 0
 7ea:	20 40       	sbci	r18, 0x00	; 0
 7ec:	e1 f7       	brne	.-8      	; 0x7e6 <main+0x13e>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <main+0x148>
 7f0:	00 00       	nop
					_delay_ms(2500);
					lcd_clrscr();
 7f2:	c3 d0       	rcall	.+390    	; 0x97a <lcd_clrscr>
					lcd_puts("Enter PIN:");
 7f4:	82 e5       	ldi	r24, 0x52	; 82
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	d8 d0       	rcall	.+432    	; 0x9aa <lcd_puts>
					while(pin_event != 1){
 7fa:	80 91 8c 01 	lds	r24, 0x018C
 7fe:	90 91 8d 01 	lds	r25, 0x018D
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	51 f0       	breq	.+20     	; 0x81a <main+0x172>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 806:	85 e8       	ldi	r24, 0x85	; 133
 808:	8a 95       	dec	r24
 80a:	f1 f7       	brne	.-4      	; 0x808 <main+0x160>
 80c:	00 00       	nop
 80e:	80 91 8c 01 	lds	r24, 0x018C
 812:	90 91 8d 01 	lds	r25, 0x018D
 816:	01 97       	sbiw	r24, 0x01	; 1
 818:	b1 f7       	brne	.-20     	; 0x806 <main+0x15e>
						_delay_us(50);
						// Forever loop until keypad enters in 4 numbers for pin
					}
					pin_event = 0;
 81a:	10 92 8d 01 	sts	0x018D, r1
 81e:	10 92 8c 01 	sts	0x018C, r1
					curr_state = Check_Pin;
 822:	10 93 91 01 	sts	0x0191, r17
 826:	00 93 90 01 	sts	0x0190, r16
 82a:	88 cf       	rjmp	.-240    	; 0x73c <main+0x94>
				}
				
			 break;
			 
			 case Authorize:
				lcd_clrscr();
 82c:	a6 d0       	rcall	.+332    	; 0x97a <lcd_clrscr>
				lcd_puts("Access Granted");
 82e:	8d e5       	ldi	r24, 0x5D	; 93
 830:	91 e0       	ldi	r25, 0x01	; 1
 832:	bb d0       	rcall	.+374    	; 0x9aa <lcd_puts>
				
				PORTC &= ~(1 << 5);	// Turn LED on 
 834:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 836:	9f ef       	ldi	r25, 0xFF	; 255
 838:	28 e0       	ldi	r18, 0x08	; 8
 83a:	8d e3       	ldi	r24, 0x3D	; 61
 83c:	91 50       	subi	r25, 0x01	; 1
 83e:	20 40       	sbci	r18, 0x00	; 0
 840:	80 40       	sbci	r24, 0x00	; 0
 842:	e1 f7       	brne	.-8      	; 0x83c <main+0x194>
 844:	00 c0       	rjmp	.+0      	; 0x846 <main+0x19e>
 846:	00 00       	nop
				_delay_ms(2500);
				curr_state = Scan_Finger;
 848:	d0 93 91 01 	sts	0x0191, r29
 84c:	c0 93 90 01 	sts	0x0190, r28
			
				PORTC |= (1 << 5);	// Turn LED off
 850:	45 9a       	sbi	0x08, 5	; 8
			 break;
 852:	74 cf       	rjmp	.-280    	; 0x73c <main+0x94>
			  
			case Scan_Finger:
			  fingerPressed();
 854:	d2 de       	rcall	.-604    	; 0x5fa <fingerPressed>
 856:	9f ef       	ldi	r25, 0xFF	; 255
 858:	20 e7       	ldi	r18, 0x70	; 112
 85a:	82 e0       	ldi	r24, 0x02	; 2
 85c:	91 50       	subi	r25, 0x01	; 1
 85e:	20 40       	sbci	r18, 0x00	; 0
 860:	80 40       	sbci	r24, 0x00	; 0
 862:	e1 f7       	brne	.-8      	; 0x85c <main+0x1b4>
 864:	00 c0       	rjmp	.+0      	; 0x866 <main+0x1be>
 866:	00 00       	nop
			  _delay_ms(100);
			  lcd_clrscr();	// Initialize LCD with text
 868:	88 d0       	rcall	.+272    	; 0x97a <lcd_clrscr>
			  lcd_puts("Scan Finger");
 86a:	8c e6       	ldi	r24, 0x6C	; 108
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	9d d0       	rcall	.+314    	; 0x9aa <lcd_puts>
 870:	9f ef       	ldi	r25, 0xFF	; 255
 872:	28 e0       	ldi	r18, 0x08	; 8
 874:	8d e3       	ldi	r24, 0x3D	; 61
 876:	91 50       	subi	r25, 0x01	; 1
 878:	20 40       	sbci	r18, 0x00	; 0
 87a:	80 40       	sbci	r24, 0x00	; 0
 87c:	e1 f7       	brne	.-8      	; 0x876 <main+0x1ce>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <main+0x1d8>
 880:	00 00       	nop
			  _delay_ms(2500);
			  count_finger = 0;
 882:	10 92 8b 01 	sts	0x018B, r1
 886:	10 92 8a 01 	sts	0x018A, r1
			  if(finger_event == 0){
 88a:	80 91 8e 01 	lds	r24, 0x018E
 88e:	90 91 8f 01 	lds	r25, 0x018F
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	29 f4       	brne	.+10     	; 0x8a0 <main+0x1f8>
				  curr_state = Scan_Finger;	// No finger pressed
 896:	d0 93 91 01 	sts	0x0191, r29
 89a:	c0 93 90 01 	sts	0x0190, r28
 89e:	4e cf       	rjmp	.-356    	; 0x73c <main+0x94>
				  }else if (finger_event == 1){
 8a0:	01 97       	sbiw	r24, 0x01	; 1
 8a2:	29 f4       	brne	.+10     	; 0x8ae <main+0x206>
					 curr_state = Enroll_User;
 8a4:	f0 92 91 01 	sts	0x0191, r15
 8a8:	e0 92 90 01 	sts	0x0190, r14
 8ac:	47 cf       	rjmp	.-370    	; 0x73c <main+0x94>
				 }else{
					 curr_state = EXIT;
 8ae:	b0 92 91 01 	sts	0x0191, r11
 8b2:	a0 92 90 01 	sts	0x0190, r10
 8b6:	42 cf       	rjmp	.-380    	; 0x73c <main+0x94>
				 }
			break;
			  
			case Enroll_User:
			  enrollStart();
 8b8:	c5 de       	rcall	.-630    	; 0x644 <enrollStart>
			break;
 8ba:	40 cf       	rjmp	.-384    	; 0x73c <main+0x94>
			
			case EXIT:
				lcd_clrscr();
 8bc:	5e d0       	rcall	.+188    	; 0x97a <lcd_clrscr>
				lcd_puts("User exit");
 8be:	88 e7       	ldi	r24, 0x78	; 120
 8c0:	91 e0       	ldi	r25, 0x01	; 1
 8c2:	73 d0       	rcall	.+230    	; 0x9aa <lcd_puts>
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	23 ed       	ldi	r18, 0xD3	; 211
 8c8:	80 e3       	ldi	r24, 0x30	; 48
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	20 40       	sbci	r18, 0x00	; 0
 8ce:	80 40       	sbci	r24, 0x00	; 0
 8d0:	e1 f7       	brne	.-8      	; 0x8ca <main+0x222>
 8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <main+0x22c>
 8d4:	00 00       	nop
				_delay_ms(2000);
				finger_event = 0;
 8d6:	10 92 8f 01 	sts	0x018F, r1
 8da:	10 92 8e 01 	sts	0x018E, r1
				curr_state = Get_Pin;
 8de:	10 92 91 01 	sts	0x0191, r1
 8e2:	10 92 90 01 	sts	0x0190, r1
			break;
 8e6:	2a cf       	rjmp	.-428    	; 0x73c <main+0x94>

000008e8 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 8e8:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ea:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 8ec:	2b 98       	cbi	0x05, 3	; 5
 8ee:	08 95       	ret

000008f0 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 8f6:	66 23       	and	r22, r22
 8f8:	11 f0       	breq	.+4      	; 0x8fe <lcd_write+0xe>
       lcd_rs_high();
 8fa:	2d 9a       	sbi	0x05, 5	; 5
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <lcd_write+0x10>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 8fe:	2d 98       	cbi	0x05, 5	; 5
    }
    lcd_rw_low();    /* RW=0  write mode      */
 900:	2c 98       	cbi	0x05, 4	; 5

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 902:	87 b1       	in	r24, 0x07	; 7
 904:	8f 60       	ori	r24, 0x0F	; 15
 906:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 908:	c8 b1       	in	r28, 0x08	; 8
 90a:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 90c:	8d 2f       	mov	r24, r29
 90e:	82 95       	swap	r24
 910:	8f 70       	andi	r24, 0x0F	; 15
 912:	8c 2b       	or	r24, r28
 914:	88 b9       	out	0x08, r24	; 8
        lcd_e_toggle();
 916:	e8 df       	rcall	.-48     	; 0x8e8 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 918:	df 70       	andi	r29, 0x0F	; 15
 91a:	dc 2b       	or	r29, r28
 91c:	d8 b9       	out	0x08, r29	; 8
        lcd_e_toggle();
 91e:	e4 df       	rcall	.-56     	; 0x8e8 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 920:	cf 60       	ori	r28, 0x0F	; 15
 922:	c8 b9       	out	0x08, r28	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	08 95       	ret

0000092a <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 92a:	88 23       	and	r24, r24
 92c:	11 f0       	breq	.+4      	; 0x932 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 92e:	2d 9a       	sbi	0x05, 5	; 5
 930:	01 c0       	rjmp	.+2      	; 0x934 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 932:	2d 98       	cbi	0x05, 5	; 5
    lcd_rw_high();                           /* RW=1  read mode      */
 934:	2c 9a       	sbi	0x05, 4	; 5
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 936:	87 b1       	in	r24, 0x07	; 7
 938:	80 7f       	andi	r24, 0xF0	; 240
 93a:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
 93c:	2b 9a       	sbi	0x05, 3	; 5
 93e:	00 00       	nop
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 940:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
 942:	2b 98       	cbi	0x05, 3	; 5
 944:	00 00       	nop
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
 946:	2b 9a       	sbi	0x05, 3	; 5
 948:	00 00       	nop
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 94a:	86 b1       	in	r24, 0x06	; 6
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 94c:	92 95       	swap	r25
 94e:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 950:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
 952:	2b 98       	cbi	0x05, 3	; 5
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 954:	89 2b       	or	r24, r25
 956:	08 95       	ret

00000958 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	e7 df       	rcall	.-50     	; 0x92a <lcd_read>
 95c:	88 23       	and	r24, r24
 95e:	e4 f3       	brlt	.-8      	; 0x958 <lcd_waitbusy>
 960:	00 c0       	rjmp	.+0      	; 0x962 <lcd_waitbusy+0xa>
 962:	00 c0       	rjmp	.+0      	; 0x964 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	e1 df       	rcall	.-62     	; 0x92a <lcd_read>
    
}/* lcd_waitbusy */
 968:	08 95       	ret

0000096a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 96a:	cf 93       	push	r28
 96c:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 96e:	f4 df       	rcall	.-24     	; 0x958 <lcd_waitbusy>
    lcd_write(cmd,0);
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	8c 2f       	mov	r24, r28
 974:	bd df       	rcall	.-134    	; 0x8f0 <lcd_write>
}
 976:	cf 91       	pop	r28
 978:	08 95       	ret

0000097a <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	f6 df       	rcall	.-20     	; 0x96a <lcd_command>
 97e:	08 95       	ret

00000980 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	f3 df       	rcall	.-26     	; 0x96a <lcd_command>
 984:	08 95       	ret

00000986 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 986:	cf 93       	push	r28
 988:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 98a:	e6 df       	rcall	.-52     	; 0x958 <lcd_waitbusy>
    if (c=='\n')
 98c:	ca 30       	cpi	r28, 0x0A	; 10
 98e:	41 f4       	brne	.+16     	; 0x9a0 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 990:	80 34       	cpi	r24, 0x40	; 64
 992:	10 f4       	brcc	.+4      	; 0x998 <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
 994:	80 e4       	ldi	r24, 0x40	; 64
 996:	01 c0       	rjmp	.+2      	; 0x99a <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
 998:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 99a:	80 58       	subi	r24, 0x80	; 128
 99c:	e6 df       	rcall	.-52     	; 0x96a <lcd_command>
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 9a0:	61 e0       	ldi	r22, 0x01	; 1
 9a2:	8c 2f       	mov	r24, r28
 9a4:	a5 df       	rcall	.-182    	; 0x8f0 <lcd_write>
    }

}/* lcd_putc */
 9a6:	cf 91       	pop	r28
 9a8:	08 95       	ret

000009aa <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 9aa:	cf 93       	push	r28
 9ac:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 9ae:	ec 01       	movw	r28, r24
 9b0:	21 96       	adiw	r28, 0x01	; 1
 9b2:	fc 01       	movw	r30, r24
 9b4:	80 81       	ld	r24, Z
 9b6:	88 23       	and	r24, r24
 9b8:	21 f0       	breq	.+8      	; 0x9c2 <lcd_puts+0x18>
        lcd_putc(c);
 9ba:	e5 df       	rcall	.-54     	; 0x986 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 9bc:	89 91       	ld	r24, Y+
 9be:	81 11       	cpse	r24, r1
 9c0:	fc cf       	rjmp	.-8      	; 0x9ba <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	08 95       	ret

000009c8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 9c8:	cf 93       	push	r28
 9ca:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 9cc:	87 b1       	in	r24, 0x07	; 7
 9ce:	8f 60       	ori	r24, 0x0F	; 15
 9d0:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 9d2:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 9d4:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 9d6:	23 9a       	sbi	0x04, 3	; 4
 9d8:	8f e9       	ldi	r24, 0x9F	; 159
 9da:	9f e0       	ldi	r25, 0x0F	; 15
 9dc:	01 97       	sbiw	r24, 0x01	; 1
 9de:	f1 f7       	brne	.-4      	; 0x9dc <lcd_init+0x14>
 9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <lcd_init+0x1a>
 9e2:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 9e4:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 9e6:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
 9e8:	7f df       	rcall	.-258    	; 0x8e8 <toggle_e>
 9ea:	81 ee       	ldi	r24, 0xE1	; 225
 9ec:	94 e0       	ldi	r25, 0x04	; 4
 9ee:	01 97       	sbiw	r24, 0x01	; 1
 9f0:	f1 f7       	brne	.-4      	; 0x9ee <lcd_init+0x26>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <lcd_init+0x2c>
 9f4:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 9f6:	78 df       	rcall	.-272    	; 0x8e8 <toggle_e>
 9f8:	95 e1       	ldi	r25, 0x15	; 21
 9fa:	9a 95       	dec	r25
 9fc:	f1 f7       	brne	.-4      	; 0x9fa <lcd_init+0x32>
 9fe:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 a00:	73 df       	rcall	.-282    	; 0x8e8 <toggle_e>
 a02:	85 e1       	ldi	r24, 0x15	; 21
 a04:	8a 95       	dec	r24
 a06:	f1 f7       	brne	.-4      	; 0xa04 <lcd_init+0x3c>
 a08:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 a0a:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
 a0c:	6d df       	rcall	.-294    	; 0x8e8 <toggle_e>
 a0e:	95 e1       	ldi	r25, 0x15	; 21
 a10:	9a 95       	dec	r25
 a12:	f1 f7       	brne	.-4      	; 0xa10 <lcd_init+0x48>
 a14:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 a16:	88 e2       	ldi	r24, 0x28	; 40
 a18:	a8 df       	rcall	.-176    	; 0x96a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 a1a:	88 e0       	ldi	r24, 0x08	; 8
 a1c:	a6 df       	rcall	.-180    	; 0x96a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 a1e:	ad df       	rcall	.-166    	; 0x97a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 a20:	86 e0       	ldi	r24, 0x06	; 6
 a22:	a3 df       	rcall	.-186    	; 0x96a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 a24:	8c 2f       	mov	r24, r28
 a26:	a1 df       	rcall	.-190    	; 0x96a <lcd_command>

}/* lcd_init */
 a28:	cf 91       	pop	r28
 a2a:	08 95       	ret

00000a2c <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 a2c:	1f 92       	push	r1
 a2e:	0f 92       	push	r0
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	0f 92       	push	r0
 a34:	11 24       	eor	r1, r1
 a36:	8f 93       	push	r24
 a38:	9f 93       	push	r25
 a3a:	ef 93       	push	r30
 a3c:	ff 93       	push	r31
    unsigned char tmptail;
  
      
    if ( UART_TxHead != UART_TxTail) {
 a3e:	90 91 95 01 	lds	r25, 0x0195
 a42:	80 91 94 01 	lds	r24, 0x0194
 a46:	98 17       	cp	r25, r24
 a48:	69 f0       	breq	.+26     	; 0xa64 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 a4a:	e0 91 94 01 	lds	r30, 0x0194
 a4e:	ef 5f       	subi	r30, 0xFF	; 255
 a50:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 a52:	e0 93 94 01 	sts	0x0194, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	ea 56       	subi	r30, 0x6A	; 106
 a5a:	fe 4f       	sbci	r31, 0xFE	; 254
 a5c:	80 81       	ld	r24, Z
 a5e:	80 93 c6 00 	sts	0x00C6, r24
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 a64:	e1 ec       	ldi	r30, 0xC1	; 193
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
 a6a:	8f 7d       	andi	r24, 0xDF	; 223
 a6c:	80 83       	st	Z, r24
    }
}
 a6e:	ff 91       	pop	r31
 a70:	ef 91       	pop	r30
 a72:	9f 91       	pop	r25
 a74:	8f 91       	pop	r24
 a76:	0f 90       	pop	r0
 a78:	0f be       	out	0x3f, r0	; 63
 a7a:	0f 90       	pop	r0
 a7c:	1f 90       	pop	r1
 a7e:	18 95       	reti

00000a80 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 a80:	10 92 95 01 	sts	0x0195, r1
    UART_TxTail = 0;
 a84:	10 92 94 01 	sts	0x0194, r1
    UART_RxHead = 0;
 a88:	10 92 93 01 	sts	0x0193, r1
    UART_RxTail = 0;
 a8c:	10 92 92 01 	sts	0x0192, r1
    UCSRC = (3<<UCSZ0);
    #endif 
      
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 a90:	99 23       	and	r25, r25
 a92:	24 f4       	brge	.+8      	; 0xa9c <uart_init+0x1c>
    {
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 a94:	22 e0       	ldi	r18, 0x02	; 2
 a96:	20 93 c0 00 	sts	0x00C0, r18
        baudrate &= ~0x8000;
 a9a:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRR0H = (unsigned char)(baudrate>>8);
 a9c:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 aa0:	80 93 c4 00 	sts	0x00C4, r24
  
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);  
 aa4:	88 e9       	ldi	r24, 0x98	; 152
 aa6:	80 93 c1 00 	sts	0x00C1, r24
      
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    UCSR0C |= (3<<UCSZ00);	// 1 stop bit
 aaa:	e2 ec       	ldi	r30, 0xC2	; 194
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	80 81       	ld	r24, Z
 ab0:	86 60       	ori	r24, 0x06	; 6
 ab2:	80 83       	st	Z, r24
 ab4:	08 95       	ret

00000ab6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;
  
      
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 ab6:	20 91 95 01 	lds	r18, 0x0195
 aba:	2f 5f       	subi	r18, 0xFF	; 255
 abc:	2f 71       	andi	r18, 0x1F	; 31
      
    while ( tmphead == UART_TxTail ){
 abe:	90 91 94 01 	lds	r25, 0x0194
 ac2:	29 17       	cp	r18, r25
 ac4:	e1 f3       	breq	.-8      	; 0xabe <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
      
    UART_TxBuf[tmphead] = data;
 ac6:	e2 2f       	mov	r30, r18
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	ea 56       	subi	r30, 0x6A	; 106
 acc:	fe 4f       	sbci	r31, 0xFE	; 254
 ace:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 ad0:	20 93 95 01 	sts	0x0195, r18
  
    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 ad4:	e1 ec       	ldi	r30, 0xC1	; 193
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	80 81       	ld	r24, Z
 ada:	80 62       	ori	r24, 0x20	; 32
 adc:	80 83       	st	Z, r24
 ade:	08 95       	ret

00000ae0 <strncmp_P>:
 ae0:	fb 01       	movw	r30, r22
 ae2:	dc 01       	movw	r26, r24
 ae4:	41 50       	subi	r20, 0x01	; 1
 ae6:	50 40       	sbci	r21, 0x00	; 0
 ae8:	30 f0       	brcs	.+12     	; 0xaf6 <strncmp_P+0x16>
 aea:	8d 91       	ld	r24, X+
 aec:	05 90       	lpm	r0, Z+
 aee:	80 19       	sub	r24, r0
 af0:	19 f4       	brne	.+6      	; 0xaf8 <strncmp_P+0x18>
 af2:	00 20       	and	r0, r0
 af4:	b9 f7       	brne	.-18     	; 0xae4 <strncmp_P+0x4>
 af6:	88 1b       	sub	r24, r24
 af8:	99 0b       	sbc	r25, r25
 afa:	08 95       	ret

00000afc <_exit>:
 afc:	f8 94       	cli

00000afe <__stop_program>:
 afe:	ff cf       	rjmp	.-2      	; 0xafe <__stop_program>
