
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  000012f6  0000138a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800194  00800194  0000141e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003f4f  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  000054f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b06  00000000  00000000  00005b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000344  00000000  00000000  00006668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b6  00000000  00000000  000069ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001013  00000000  00000000  00006e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00007e75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
       2:	3c c0       	rjmp	.+120    	; 0x7c <__bad_interrupt>
       4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
       6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
       8:	39 c0       	rjmp	.+114    	; 0x7c <__bad_interrupt>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__vector_5>
       c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
       e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
      10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
      12:	34 c0       	rjmp	.+104    	; 0x7c <__bad_interrupt>
      14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
      16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
      18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
      1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
      1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
      1e:	2e c0       	rjmp	.+92     	; 0x7c <__bad_interrupt>
      20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
      22:	2c c0       	rjmp	.+88     	; 0x7c <__bad_interrupt>
      24:	d6 c1       	rjmp	.+940    	; 0x3d2 <__vector_18>
      26:	fd c8       	rjmp	.-3590   	; 0xfffff222 <__eeprom_end+0xff7ef222>
      28:	29 c0       	rjmp	.+82     	; 0x7c <__bad_interrupt>
      2a:	28 c0       	rjmp	.+80     	; 0x7c <__bad_interrupt>
      2c:	27 c0       	rjmp	.+78     	; 0x7c <__bad_interrupt>
      2e:	26 c0       	rjmp	.+76     	; 0x7c <__bad_interrupt>
      30:	25 c0       	rjmp	.+74     	; 0x7c <__bad_interrupt>
      32:	24 c0       	rjmp	.+72     	; 0x7c <__bad_interrupt>
      34:	ba c6       	rjmp	.+3444   	; 0xdaa <main+0xb6>
      36:	d6 c6       	rjmp	.+3500   	; 0xde4 <main+0xf0>
      38:	16 c7       	rjmp	.+3628   	; 0xe66 <main+0x172>
      3a:	29 c7       	rjmp	.+3666   	; 0xe8e <main+0x19a>
      3c:	45 c7       	rjmp	.+3722   	; 0xec8 <main+0x1d4>
      3e:	18 c8       	rjmp	.-4048   	; 0xfffff070 <__eeprom_end+0xff7ef070>
      40:	2d c8       	rjmp	.-4006   	; 0xfffff09c <__eeprom_end+0xff7ef09c>

00000042 <__trampolines_end>:
      42:	38 39       	cpi	r19, 0x98	; 152
      44:	38 39       	cpi	r19, 0x98	; 152

00000046 <__ctors_end>:
      46:	11 24       	eor	r1, r1
      48:	1f be       	out	0x3f, r1	; 63
      4a:	cf ef       	ldi	r28, 0xFF	; 255
      4c:	d4 e0       	ldi	r29, 0x04	; 4
      4e:	de bf       	out	0x3e, r29	; 62
      50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
      52:	11 e0       	ldi	r17, 0x01	; 1
      54:	a0 e0       	ldi	r26, 0x00	; 0
      56:	b1 e0       	ldi	r27, 0x01	; 1
      58:	e6 ef       	ldi	r30, 0xF6	; 246
      5a:	f2 e1       	ldi	r31, 0x12	; 18
      5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
      5e:	05 90       	lpm	r0, Z+
      60:	0d 92       	st	X+, r0
      62:	a4 39       	cpi	r26, 0x94	; 148
      64:	b1 07       	cpc	r27, r17
      66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
      68:	21 e0       	ldi	r18, 0x01	; 1
      6a:	a4 e9       	ldi	r26, 0x94	; 148
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
      70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
      72:	a3 3d       	cpi	r26, 0xD3	; 211
      74:	b2 07       	cpc	r27, r18
      76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
      78:	3d d6       	rcall	.+3194   	; 0xcf4 <main>
      7a:	3b c9       	rjmp	.-3466   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>

0000007c <__bad_interrupt>:
      7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <__vector_5>:


const char pin[pin_length] PROGMEM = "8989";

// Interrupt for Keypad
ISR(PCINT2_vect){
      7e:	1f 92       	push	r1
      80:	0f 92       	push	r0
      82:	0f b6       	in	r0, 0x3f	; 63
      84:	0f 92       	push	r0
      86:	11 24       	eor	r1, r1
      88:	2f 93       	push	r18
      8a:	3f 93       	push	r19
      8c:	4f 93       	push	r20
      8e:	5f 93       	push	r21
      90:	6f 93       	push	r22
      92:	7f 93       	push	r23
      94:	8f 93       	push	r24
      96:	9f 93       	push	r25
      98:	af 93       	push	r26
      9a:	bf 93       	push	r27
      9c:	ef 93       	push	r30
      9e:	ff 93       	push	r31
	tmp2 = PORTD;
      a0:	8b b1       	in	r24, 0x0b	; 11
	tmp2 &= ~(0x06);	// Clear PD2/PD3
      a2:	89 7f       	andi	r24, 0xF9	; 249
      a4:	80 93 c9 01 	sts	0x01C9, r24
	PORTD = tmp2;
      a8:	8b b9       	out	0x0b, r24	; 11
	tmp2 = PORTC;
      aa:	88 b1       	in	r24, 0x08	; 8
	tmp2 &= ~(0x16);
      ac:	89 7e       	andi	r24, 0xE9	; 233
      ae:	80 93 c9 01 	sts	0x01C9, r24
	PORTC = tmp2;	// Clear PC4
      b2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b4:	2f ef       	ldi	r18, 0xFF	; 255
      b6:	80 e7       	ldi	r24, 0x70	; 112
      b8:	92 e0       	ldi	r25, 0x02	; 2
      ba:	21 50       	subi	r18, 0x01	; 1
      bc:	80 40       	sbci	r24, 0x00	; 0
      be:	90 40       	sbci	r25, 0x00	; 0
      c0:	e1 f7       	brne	.-8      	; 0xba <__vector_5+0x3c>
      c2:	00 c0       	rjmp	.+0      	; 0xc4 <__vector_5+0x46>
      c4:	00 00       	nop
	
	_delay_ms(100);
	
	if((curr_state == Get_Pin)||(curr_state == Check_Pin)||(curr_state == Scan_Finger)){
      c6:	80 91 9e 01 	lds	r24, 0x019E
      ca:	90 91 9f 01 	lds	r25, 0x019F
      ce:	82 30       	cpi	r24, 0x02	; 2
      d0:	91 05       	cpc	r25, r1
      d2:	18 f0       	brcs	.+6      	; 0xda <__vector_5+0x5c>
      d4:	03 97       	sbiw	r24, 0x03	; 3
      d6:	09 f0       	breq	.+2      	; 0xda <__vector_5+0x5c>
      d8:	6b c1       	rjmp	.+726    	; 0x3b0 <__vector_5+0x332>
		PORTC |= (1 << 5);	// Turn LED off -- Sets bit
      da:	45 9a       	sbi	0x08, 5	; 8
		if(bit_is_clear(PIND,4)){
      dc:	4c 99       	sbic	0x09, 4	; 9
      de:	4b c0       	rjmp	.+150    	; 0x176 <__vector_5+0xf8>
			//PORTD &= ~(1 << 0);
			PORTC |= (1 << 4);
      e0:	44 9a       	sbi	0x08, 4	; 8
			PORTD |= (1 << 2);
      e2:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      e4:	86 e9       	ldi	r24, 0x96	; 150
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	01 97       	sbiw	r24, 0x01	; 1
      ea:	f1 f7       	brne	.-4      	; 0xe8 <__vector_5+0x6a>
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
      ec:	4c 99       	sbic	0x09, 4	; 9
      ee:	10 c0       	rjmp	.+32     	; 0x110 <__vector_5+0x92>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	55 d8       	rcall	.-3926   	; 0xfffff1a0 <__eeprom_end+0xff7ef1a0>
					flag++;
      f6:	80 91 98 01 	lds	r24, 0x0198
      fa:	90 91 99 01 	lds	r25, 0x0199
      fe:	01 96       	adiw	r24, 0x01	; 1
     100:	90 93 99 01 	sts	0x0199, r25
     104:	80 93 98 01 	sts	0x0198, r24
					key = '1';
     108:	81 e3       	ldi	r24, 0x31	; 49
     10a:	80 93 cc 01 	sts	0x01CC, r24
     10e:	cc c0       	rjmp	.+408    	; 0x2a8 <__vector_5+0x22a>
		
			}else{
		
			PORTD |= (1 << 3);
     110:	5b 9a       	sbi	0x0b, 3	; 11
	
			PORTC &= ~(1 << 4);
     112:	44 98       	cbi	0x08, 4	; 8
     114:	86 e9       	ldi	r24, 0x96	; 150
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	01 97       	sbiw	r24, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <__vector_5+0x9a>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
     11c:	4c 99       	sbic	0x09, 4	; 9
     11e:	10 c0       	rjmp	.+32     	; 0x140 <__vector_5+0xc2>

					//curr_userPin[flag] = key;
					lcd_puts("*");
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	3d d8       	rcall	.-3974   	; 0xfffff1a0 <__eeprom_end+0xff7ef1a0>
					flag++;
     126:	80 91 98 01 	lds	r24, 0x0198
     12a:	90 91 99 01 	lds	r25, 0x0199
     12e:	01 96       	adiw	r24, 0x01	; 1
     130:	90 93 99 01 	sts	0x0199, r25
     134:	80 93 98 01 	sts	0x0198, r24
					key = '2';
     138:	82 e3       	ldi	r24, 0x32	; 50
     13a:	80 93 cc 01 	sts	0x01CC, r24
     13e:	b4 c0       	rjmp	.+360    	; 0x2a8 <__vector_5+0x22a>
		
			}else{
				
			PORTC |= (1 << 4);
     140:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
     142:	5a 98       	cbi	0x0b, 2	; 11
     144:	86 e9       	ldi	r24, 0x96	; 150
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <__vector_5+0xca>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
     14c:	4c 99       	sbic	0x09, 4	; 9
     14e:	0f c0       	rjmp	.+30     	; 0x16e <__vector_5+0xf0>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	25 d8       	rcall	.-4022   	; 0xfffff1a0 <__eeprom_end+0xff7ef1a0>
					flag++;
     156:	80 91 98 01 	lds	r24, 0x0198
     15a:	90 91 99 01 	lds	r25, 0x0199
     15e:	01 96       	adiw	r24, 0x01	; 1
     160:	90 93 99 01 	sts	0x0199, r25
     164:	80 93 98 01 	sts	0x0198, r24
					key = '3';
     168:	83 e3       	ldi	r24, 0x33	; 51
     16a:	80 93 cc 01 	sts	0x01CC, r24
			}
			PORTD &= ~(1 << 3);
     16e:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 5);
     170:	45 98       	cbi	0x08, 5	; 8
			PORTD &= ~(1 << 2);
     172:	5a 98       	cbi	0x0b, 2	; 11
     174:	99 c0       	rjmp	.+306    	; 0x2a8 <__vector_5+0x22a>
		
			}

		}		
	
	}else if(bit_is_clear(PIND,5)){
     176:	4d 99       	sbic	0x09, 5	; 9
     178:	4b c0       	rjmp	.+150    	; 0x210 <__vector_5+0x192>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
     17a:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
     17c:	5a 9a       	sbi	0x0b, 2	; 11
     17e:	84 e6       	ldi	r24, 0x64	; 100
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <__vector_5+0x104>
	_delay_loop_2(100);

	if(bit_is_clear(PIND,5)){
     186:	4d 99       	sbic	0x09, 5	; 9
     188:	10 c0       	rjmp	.+32     	; 0x1aa <__vector_5+0x12c>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	08 d8       	rcall	.-4080   	; 0xfffff1a0 <__eeprom_end+0xff7ef1a0>
		flag++;
     190:	80 91 98 01 	lds	r24, 0x0198
     194:	90 91 99 01 	lds	r25, 0x0199
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	90 93 99 01 	sts	0x0199, r25
     19e:	80 93 98 01 	sts	0x0198, r24
		key = '4';
     1a2:	84 e3       	ldi	r24, 0x34	; 52
     1a4:	80 93 cc 01 	sts	0x01CC, r24
     1a8:	7f c0       	rjmp	.+254    	; 0x2a8 <__vector_5+0x22a>
	
		}else{
	
		PORTD |= (1 << 3);
     1aa:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
     1ac:	44 98       	cbi	0x08, 4	; 8
     1ae:	86 e9       	ldi	r24, 0x96	; 150
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <__vector_5+0x134>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,5)){
     1b6:	4d 99       	sbic	0x09, 5	; 9
     1b8:	10 c0       	rjmp	.+32     	; 0x1da <__vector_5+0x15c>

			//curr_userPin[flag] = key;
			lcd_puts("*");
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	f0 d7       	rcall	.+4064   	; 0x11a0 <lcd_puts>
			flag++;
     1c0:	80 91 98 01 	lds	r24, 0x0198
     1c4:	90 91 99 01 	lds	r25, 0x0199
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	90 93 99 01 	sts	0x0199, r25
     1ce:	80 93 98 01 	sts	0x0198, r24
			key = '5';
     1d2:	85 e3       	ldi	r24, 0x35	; 53
     1d4:	80 93 cc 01 	sts	0x01CC, r24
     1d8:	67 c0       	rjmp	.+206    	; 0x2a8 <__vector_5+0x22a>
		
			}else{
		
			PORTC |= (1 << 4);
     1da:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
     1dc:	5a 98       	cbi	0x0b, 2	; 11
     1de:	86 e9       	ldi	r24, 0x96	; 150
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <__vector_5+0x164>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,5)){
     1e6:	4d 99       	sbic	0x09, 5	; 9
     1e8:	0f c0       	rjmp	.+30     	; 0x208 <__vector_5+0x18a>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	d8 d7       	rcall	.+4016   	; 0x11a0 <lcd_puts>
				flag++;
     1f0:	80 91 98 01 	lds	r24, 0x0198
     1f4:	90 91 99 01 	lds	r25, 0x0199
     1f8:	01 96       	adiw	r24, 0x01	; 1
     1fa:	90 93 99 01 	sts	0x0199, r25
     1fe:	80 93 98 01 	sts	0x0198, r24
				key = '6';
     202:	86 e3       	ldi	r24, 0x36	; 54
     204:	80 93 cc 01 	sts	0x01CC, r24
			}
			PORTD &= ~(1 << 3);
     208:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
     20a:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
     20c:	5a 98       	cbi	0x0b, 2	; 11
     20e:	4c c0       	rjmp	.+152    	; 0x2a8 <__vector_5+0x22a>
		
		}

	}

	}else if(bit_is_clear(PIND,6)){
     210:	4e 99       	sbic	0x09, 6	; 9
     212:	4a c0       	rjmp	.+148    	; 0x2a8 <__vector_5+0x22a>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
     214:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
     216:	5a 9a       	sbi	0x0b, 2	; 11
     218:	86 e9       	ldi	r24, 0x96	; 150
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <__vector_5+0x19e>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,6)){
     220:	4e 99       	sbic	0x09, 6	; 9
     222:	10 c0       	rjmp	.+32     	; 0x244 <__vector_5+0x1c6>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	bb d7       	rcall	.+3958   	; 0x11a0 <lcd_puts>
		flag++;
     22a:	80 91 98 01 	lds	r24, 0x0198
     22e:	90 91 99 01 	lds	r25, 0x0199
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	90 93 99 01 	sts	0x0199, r25
     238:	80 93 98 01 	sts	0x0198, r24
		key = '7';
     23c:	87 e3       	ldi	r24, 0x37	; 55
     23e:	80 93 cc 01 	sts	0x01CC, r24
     242:	32 c0       	rjmp	.+100    	; 0x2a8 <__vector_5+0x22a>
	
		}else{
	
		PORTD |= (1 << 3);
     244:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
     246:	44 98       	cbi	0x08, 4	; 8
     248:	86 e9       	ldi	r24, 0x96	; 150
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <__vector_5+0x1ce>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,6)){
     250:	4e 99       	sbic	0x09, 6	; 9
     252:	10 c0       	rjmp	.+32     	; 0x274 <__vector_5+0x1f6>

			//curr_userPin[flag] = key;
			lcd_puts("*");
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	a3 d7       	rcall	.+3910   	; 0x11a0 <lcd_puts>
			flag++;
     25a:	80 91 98 01 	lds	r24, 0x0198
     25e:	90 91 99 01 	lds	r25, 0x0199
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	90 93 99 01 	sts	0x0199, r25
     268:	80 93 98 01 	sts	0x0198, r24
			key = '8';
     26c:	88 e3       	ldi	r24, 0x38	; 56
     26e:	80 93 cc 01 	sts	0x01CC, r24
     272:	1a c0       	rjmp	.+52     	; 0x2a8 <__vector_5+0x22a>
		
			}else{
		
			PORTC |= (1 << 4);
     274:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
     276:	5a 98       	cbi	0x0b, 2	; 11
     278:	86 e9       	ldi	r24, 0x96	; 150
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <__vector_5+0x1fe>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,6)){
     280:	4e 99       	sbic	0x09, 6	; 9
     282:	0f c0       	rjmp	.+30     	; 0x2a2 <__vector_5+0x224>
				
				//curr_userPin[flag] = key;
				lcd_puts("*");
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	8b d7       	rcall	.+3862   	; 0x11a0 <lcd_puts>
				flag++;
     28a:	80 91 98 01 	lds	r24, 0x0198
     28e:	90 91 99 01 	lds	r25, 0x0199
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	90 93 99 01 	sts	0x0199, r25
     298:	80 93 98 01 	sts	0x0198, r24
				key = '9';
     29c:	89 e3       	ldi	r24, 0x39	; 57
     29e:	80 93 cc 01 	sts	0x01CC, r24
			}
			PORTD &= ~(1 << 3);
     2a2:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
     2a4:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
     2a6:	5a 98       	cbi	0x0b, 2	; 11

	}

	}

	if(bit_is_clear(PIND,7)){
     2a8:	4f 99       	sbic	0x09, 7	; 9
     2aa:	50 c0       	rjmp	.+160    	; 0x34c <__vector_5+0x2ce>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
     2ac:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
     2ae:	5a 9a       	sbi	0x0b, 2	; 11
     2b0:	86 e9       	ldi	r24, 0x96	; 150
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <__vector_5+0x236>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,7)){
     2b8:	4f 99       	sbic	0x09, 7	; 9
     2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <__vector_5+0x26a>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	6f d7       	rcall	.+3806   	; 0x11a0 <lcd_puts>
		flag++;
     2c2:	80 91 98 01 	lds	r24, 0x0198
     2c6:	90 91 99 01 	lds	r25, 0x0199
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	90 93 99 01 	sts	0x0199, r25
     2d0:	80 93 98 01 	sts	0x0198, r24
		key = '*';
     2d4:	8a e2       	ldi	r24, 0x2A	; 42
     2d6:	80 93 cc 01 	sts	0x01CC, r24
		finger_event = 2;
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	90 93 9d 01 	sts	0x019D, r25
     2e2:	80 93 9c 01 	sts	0x019C, r24
     2e6:	32 c0       	rjmp	.+100    	; 0x34c <__vector_5+0x2ce>
		}else{
	
		PORTD |= (1 << 3);
     2e8:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
     2ea:	44 98       	cbi	0x08, 4	; 8
     2ec:	8a ef       	ldi	r24, 0xFA	; 250
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <__vector_5+0x272>
	
		_delay_loop_2(250);
	
		if(bit_is_clear(PIND,7)){
     2f4:	4f 99       	sbic	0x09, 7	; 9
     2f6:	10 c0       	rjmp	.+32     	; 0x318 <__vector_5+0x29a>

			//curr_userPin[flag] = key;
			lcd_puts("*");
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	51 d7       	rcall	.+3746   	; 0x11a0 <lcd_puts>
			flag++;
     2fe:	80 91 98 01 	lds	r24, 0x0198
     302:	90 91 99 01 	lds	r25, 0x0199
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	90 93 99 01 	sts	0x0199, r25
     30c:	80 93 98 01 	sts	0x0198, r24
			key = '0';
     310:	80 e3       	ldi	r24, 0x30	; 48
     312:	80 93 cc 01 	sts	0x01CC, r24
     316:	1a c0       	rjmp	.+52     	; 0x34c <__vector_5+0x2ce>
			
			}else{
		
			PORTC |= (1 << 4);
     318:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
     31a:	5a 98       	cbi	0x0b, 2	; 11
     31c:	86 e9       	ldi	r24, 0x96	; 150
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <__vector_5+0x2a2>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,7)){
     324:	4f 99       	sbic	0x09, 7	; 9
     326:	0f c0       	rjmp	.+30     	; 0x346 <__vector_5+0x2c8>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	39 d7       	rcall	.+3698   	; 0x11a0 <lcd_puts>
				flag++;
     32e:	80 91 98 01 	lds	r24, 0x0198
     332:	90 91 99 01 	lds	r25, 0x0199
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	90 93 99 01 	sts	0x0199, r25
     33c:	80 93 98 01 	sts	0x0198, r24
				key = '#';
     340:	83 e2       	ldi	r24, 0x23	; 35
     342:	80 93 cc 01 	sts	0x01CC, r24
			}
			PORTD &= ~(1 << 3);
     346:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
     348:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
     34a:	5a 98       	cbi	0x0b, 2	; 11
     34c:	86 e9       	ldi	r24, 0x96	; 150
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <__vector_5+0x2d2>

	}
	
	_delay_loop_2(150);
	
	if(key != ' '){
     354:	80 91 cc 01 	lds	r24, 0x01CC
     358:	80 32       	cpi	r24, 0x20	; 32
     35a:	39 f0       	breq	.+14     	; 0x36a <__vector_5+0x2ec>
		curr_userPin[flag] = key;
     35c:	e0 91 98 01 	lds	r30, 0x0198
     360:	f0 91 99 01 	lds	r31, 0x0199
     364:	e1 53       	subi	r30, 0x31	; 49
     366:	fe 4f       	sbci	r31, 0xFE	; 254
     368:	80 83       	st	Z, r24
		//flag++;
		//lcd_puts("*");
		//PORTC &= ~(1 << 5);
	}
	
	if(flag >= 4){
     36a:	80 91 98 01 	lds	r24, 0x0198
     36e:	90 91 99 01 	lds	r25, 0x0199
     372:	04 97       	sbiw	r24, 0x04	; 4
     374:	ec f0       	brlt	.+58     	; 0x3b0 <__vector_5+0x332>
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
     376:	ff d6       	rcall	.+3582   	; 0x1176 <lcd_home>
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
			final_userPin[i-1] = key;
     378:	80 91 d0 01 	lds	r24, 0x01D0
     37c:	80 93 c5 01 	sts	0x01C5, r24
     380:	80 91 d1 01 	lds	r24, 0x01D1
     384:	80 93 c6 01 	sts	0x01C6, r24
     388:	80 91 d2 01 	lds	r24, 0x01D2
     38c:	80 93 c7 01 	sts	0x01C7, r24
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
     390:	80 91 d3 01 	lds	r24, 0x01D3
			final_userPin[i-1] = key;
     394:	80 93 c8 01 	sts	0x01C8, r24
     398:	80 93 cc 01 	sts	0x01CC, r24
		}
	
		pin_event = 1;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	90 93 9b 01 	sts	0x019B, r25
     3a4:	80 93 9a 01 	sts	0x019A, r24
		flag = 0;
     3a8:	10 92 99 01 	sts	0x0199, r1
     3ac:	10 92 98 01 	sts	0x0198, r1
//		check_pin();
	}

}
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	bf 91       	pop	r27
     3b6:	af 91       	pop	r26
     3b8:	9f 91       	pop	r25
     3ba:	8f 91       	pop	r24
     3bc:	7f 91       	pop	r23
     3be:	6f 91       	pop	r22
     3c0:	5f 91       	pop	r21
     3c2:	4f 91       	pop	r20
     3c4:	3f 91       	pop	r19
     3c6:	2f 91       	pop	r18
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <__vector_18>:

//Data received on the serial port interrupt -- RX

ISR(USART_RX_vect){
     3d2:	1f 92       	push	r1
     3d4:	0f 92       	push	r0
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	0f 92       	push	r0
     3da:	11 24       	eor	r1, r1
     3dc:	2f 93       	push	r18
     3de:	3f 93       	push	r19
     3e0:	4f 93       	push	r20
     3e2:	8f 93       	push	r24
     3e4:	9f 93       	push	r25
		data = UDR0;
     3e6:	40 91 c6 00 	lds	r20, 0x00C6
     3ea:	40 93 cb 01 	sts	0x01CB, r20
		
		if((curr_state == Check_Pin)&&(count == 4)){
     3ee:	80 91 9e 01 	lds	r24, 0x019E
     3f2:	90 91 9f 01 	lds	r25, 0x019F
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	91 05       	cpc	r25, r1
     3fa:	49 f4       	brne	.+18     	; 0x40e <__vector_18+0x3c>
     3fc:	20 91 96 01 	lds	r18, 0x0196
     400:	30 91 97 01 	lds	r19, 0x0197
     404:	24 30       	cpi	r18, 0x04	; 4
     406:	31 05       	cpc	r19, r1
     408:	11 f4       	brne	.+4      	; 0x40e <__vector_18+0x3c>
			enroll = data;
     40a:	40 93 c4 01 	sts	0x01C4, r20
		}
		if(data == 0x31){
     40e:	20 91 cb 01 	lds	r18, 0x01CB
     412:	21 33       	cpi	r18, 0x31	; 49
     414:	31 f4       	brne	.+12     	; 0x422 <__vector_18+0x50>
			//lcd_clrscr();
			//lcd_puts("response error");
			//_delay_ms(1000);
			finger_event = 3;
     416:	23 e0       	ldi	r18, 0x03	; 3
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	30 93 9d 01 	sts	0x019D, r19
     41e:	20 93 9c 01 	sts	0x019C, r18
			lcd_puts("ack good");
			_delay_ms(1000);
		}*/
		//lcd_clrscr();
		
		if(curr_state == Check_Pin){
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	49 f4       	brne	.+18     	; 0x438 <__vector_18+0x66>
			count++;
     426:	80 91 96 01 	lds	r24, 0x0196
     42a:	90 91 97 01 	lds	r25, 0x0197
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	90 93 97 01 	sts	0x0197, r25
     434:	80 93 96 01 	sts	0x0196, r24
     438:	8f e1       	ldi	r24, 0x1F	; 31
     43a:	9e e4       	ldi	r25, 0x4E	; 78
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <__vector_18+0x6a>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__vector_18+0x70>
     442:	00 00       	nop
			if(count_finger > 11){
				count_finger = 0;
			}
		}*/
		_delay_ms(10);
}
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <uart_transmit>:
	uart_transmit(0x01);	// High byte checksum
}

void uart_transmit(unsigned char data){
	//_delay_ms(10);
	cli();
     458:	f8 94       	cli
	uart_putc(data);
     45a:	28 d7       	rcall	.+3664   	; 0x12ac <uart_putc>
	//while(!(UCSR0A & (1 << UDRE0)));
	//UDR0 = data;
	//while((UCSR0A & (1 << TXC0)) == 0){};
	sei();
     45c:	78 94       	sei
     45e:	08 95       	ret

00000460 <initialize_fps>:
}

void initialize_fps(){
	// Open connection 

	uart_transmit(0x55);	// Start code 1
     460:	85 e5       	ldi	r24, 0x55	; 85
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	f9 df       	rcall	.-14     	; 0x458 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
     466:	8a ea       	ldi	r24, 0xAA	; 170
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	f6 df       	rcall	.-20     	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Device ID
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	f3 df       	rcall	.-26     	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	f0 df       	rcall	.-32     	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 (largest byte of param)
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	ed df       	rcall	.-38     	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2 (second largest byte of param)
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	ea df       	rcall	.-44     	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	e7 df       	rcall	.-50     	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4	
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	e4 df       	rcall	.-56     	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Byte 1 of command
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	e1 df       	rcall	.-62     	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	de df       	rcall	.-68     	; 0x458 <uart_transmit>
	uart_transmit(0x02);	// Low byte checksum
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	db df       	rcall	.-74     	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	d8 df       	rcall	.-80     	; 0x458 <uart_transmit>
     4a8:	08 95       	ret

000004aa <led_on>:
}

// Turn FPS LED on
void led_on(){
	
	uart_transmit(0x55);	// Start code 1
     4aa:	85 e5       	ldi	r24, 0x55	; 85
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	d4 df       	rcall	.-88     	; 0x458 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
     4b0:	8a ea       	ldi	r24, 0xAA	; 170
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	d1 df       	rcall	.-94     	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Device ID
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	ce df       	rcall	.-100    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	cb df       	rcall	.-106    	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 -- LED ON
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	c8 df       	rcall	.-112    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	c5 df       	rcall	.-118    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	c2 df       	rcall	.-124    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	bf df       	rcall	.-130    	; 0x458 <uart_transmit>
	uart_transmit(0x12);	// Byte 1 of command
     4da:	82 e1       	ldi	r24, 0x12	; 18
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	bc df       	rcall	.-136    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	b9 df       	rcall	.-142    	; 0x458 <uart_transmit>
	uart_transmit(0x13);	// Low byte checksum
     4e6:	83 e1       	ldi	r24, 0x13	; 19
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	b6 df       	rcall	.-148    	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	b3 df       	rcall	.-154    	; 0x458 <uart_transmit>
     4f2:	08 95       	ret

000004f4 <getEnrollCount>:
	
	//uart_receive();
}

void getEnrollCount(){
	uart_transmit(0x55);	// Start code 1
     4f4:	85 e5       	ldi	r24, 0x55	; 85
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	af df       	rcall	.-162    	; 0x458 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
     4fa:	8a ea       	ldi	r24, 0xAA	; 170
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	ac df       	rcall	.-168    	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Device ID
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a9 df       	rcall	.-174    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	a6 df       	rcall	.-180    	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a3 df       	rcall	.-186    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	a0 df       	rcall	.-192    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	9d df       	rcall	.-198    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	9a df       	rcall	.-204    	; 0x458 <uart_transmit>
	uart_transmit(0x20);	// Byte 1 of command
     524:	80 e2       	ldi	r24, 0x20	; 32
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	97 df       	rcall	.-210    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	94 df       	rcall	.-216    	; 0x458 <uart_transmit>
	uart_transmit(0x21);	// Low byte checksum
     530:	81 e2       	ldi	r24, 0x21	; 33
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	91 df       	rcall	.-222    	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	8e df       	rcall	.-228    	; 0x458 <uart_transmit>
     53c:	08 95       	ret

0000053e <fingerPressed>:
}

void fingerPressed(){
	uart_transmit(0x55);	// Start code 1
     53e:	85 e5       	ldi	r24, 0x55	; 85
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	8a df       	rcall	.-236    	; 0x458 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
     544:	8a ea       	ldi	r24, 0xAA	; 170
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	87 df       	rcall	.-242    	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Device ID
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	84 df       	rcall	.-248    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	81 df       	rcall	.-254    	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	7e df       	rcall	.-260    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	7b df       	rcall	.-266    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	78 df       	rcall	.-272    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	75 df       	rcall	.-278    	; 0x458 <uart_transmit>
	uart_transmit(0x26);	// Byte 1 of command
     56e:	86 e2       	ldi	r24, 0x26	; 38
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	72 df       	rcall	.-284    	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	6f df       	rcall	.-290    	; 0x458 <uart_transmit>
	uart_transmit(0x27);	// Low byte checksum
     57a:	87 e2       	ldi	r24, 0x27	; 39
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	6c df       	rcall	.-296    	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	69 df       	rcall	.-302    	; 0x458 <uart_transmit>
     586:	08 95       	ret

00000588 <enrollStart>:
void enrollStart(){
	//checksumLow = enroll_id + 22;
	//enroll = enroll_id;
	//checksum = checksumLow;
	
	if(enroll_id == 0){
     588:	80 91 94 01 	lds	r24, 0x0194
     58c:	90 91 95 01 	lds	r25, 0x0195
     590:	00 97       	sbiw	r24, 0x00	; 0
     592:	29 f5       	brne	.+74     	; 0x5de <enrollStart+0x56>
		uart_transmit(0x55);	// Start code 1
     594:	85 e5       	ldi	r24, 0x55	; 85
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	5f df       	rcall	.-322    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     59a:	8a ea       	ldi	r24, 0xAA	; 170
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	5c df       	rcall	.-328    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	59 df       	rcall	.-334    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	56 df       	rcall	.-340    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x00);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	53 df       	rcall	.-346    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	50 df       	rcall	.-352    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	4d df       	rcall	.-358    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	4a df       	rcall	.-364    	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     5c4:	82 e2       	ldi	r24, 0x22	; 34
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	47 df       	rcall	.-370    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	44 df       	rcall	.-376    	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x22);
     5d0:	82 e2       	ldi	r24, 0x22	; 34
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	41 df       	rcall	.-382    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	3e df       	rcall	.-388    	; 0x458 <uart_transmit>
     5dc:	08 95       	ret
	
	}else if(enroll_id == 1){
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	91 05       	cpc	r25, r1
     5e2:	29 f5       	brne	.+74     	; 0x62e <enrollStart+0xa6>
		uart_transmit(0x55);	// Start code 1
     5e4:	85 e5       	ldi	r24, 0x55	; 85
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	37 df       	rcall	.-402    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     5ea:	8a ea       	ldi	r24, 0xAA	; 170
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	34 df       	rcall	.-408    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	31 df       	rcall	.-414    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	2e df       	rcall	.-420    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x01);
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2b df       	rcall	.-426    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	28 df       	rcall	.-432    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	25 df       	rcall	.-438    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	22 df       	rcall	.-444    	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     614:	82 e2       	ldi	r24, 0x22	; 34
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	1f df       	rcall	.-450    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	1c df       	rcall	.-456    	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x23);
     620:	83 e2       	ldi	r24, 0x23	; 35
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	19 df       	rcall	.-462    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	16 df       	rcall	.-468    	; 0x458 <uart_transmit>
     62c:	08 95       	ret
	}else if(enroll_id == 2){
     62e:	82 30       	cpi	r24, 0x02	; 2
     630:	91 05       	cpc	r25, r1
     632:	29 f5       	brne	.+74     	; 0x67e <enrollStart+0xf6>
		uart_transmit(0x55);	// Start code 1
     634:	85 e5       	ldi	r24, 0x55	; 85
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0f df       	rcall	.-482    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     63a:	8a ea       	ldi	r24, 0xAA	; 170
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0c df       	rcall	.-488    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	09 df       	rcall	.-494    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	06 df       	rcall	.-500    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x02);
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	03 df       	rcall	.-506    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	00 df       	rcall	.-512    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	fd de       	rcall	.-518    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	fa de       	rcall	.-524    	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     664:	82 e2       	ldi	r24, 0x22	; 34
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	f7 de       	rcall	.-530    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	f4 de       	rcall	.-536    	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x24);
     670:	84 e2       	ldi	r24, 0x24	; 36
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	f1 de       	rcall	.-542    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	ee de       	rcall	.-548    	; 0x458 <uart_transmit>
     67c:	08 95       	ret
	}else if(enroll_id == 3){
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	91 05       	cpc	r25, r1
     682:	29 f5       	brne	.+74     	; 0x6ce <enrollStart+0x146>
		uart_transmit(0x55);	// Start code 1
     684:	85 e5       	ldi	r24, 0x55	; 85
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	e7 de       	rcall	.-562    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     68a:	8a ea       	ldi	r24, 0xAA	; 170
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	e4 de       	rcall	.-568    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	e1 de       	rcall	.-574    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	de de       	rcall	.-580    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x03);
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	db de       	rcall	.-586    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	d8 de       	rcall	.-592    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	d5 de       	rcall	.-598    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	d2 de       	rcall	.-604    	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     6b4:	82 e2       	ldi	r24, 0x22	; 34
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	cf de       	rcall	.-610    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	cc de       	rcall	.-616    	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x25);
     6c0:	85 e2       	ldi	r24, 0x25	; 37
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	c9 de       	rcall	.-622    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	c6 de       	rcall	.-628    	; 0x458 <uart_transmit>
     6cc:	08 95       	ret
	}else if(enroll_id == 4){
     6ce:	84 30       	cpi	r24, 0x04	; 4
     6d0:	91 05       	cpc	r25, r1
     6d2:	29 f5       	brne	.+74     	; 0x71e <enrollStart+0x196>
		uart_transmit(0x55);	// Start code 1
     6d4:	85 e5       	ldi	r24, 0x55	; 85
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	bf de       	rcall	.-642    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     6da:	8a ea       	ldi	r24, 0xAA	; 170
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	bc de       	rcall	.-648    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	b9 de       	rcall	.-654    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	b6 de       	rcall	.-660    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x04);
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	b3 de       	rcall	.-666    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	b0 de       	rcall	.-672    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	ad de       	rcall	.-678    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	aa de       	rcall	.-684    	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     704:	82 e2       	ldi	r24, 0x22	; 34
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	a7 de       	rcall	.-690    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	a4 de       	rcall	.-696    	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x26);
     710:	86 e2       	ldi	r24, 0x26	; 38
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	a1 de       	rcall	.-702    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	9e de       	rcall	.-708    	; 0x458 <uart_transmit>
     71c:	08 95       	ret
	}else if(enroll_id == 5){
     71e:	85 30       	cpi	r24, 0x05	; 5
     720:	91 05       	cpc	r25, r1
     722:	29 f5       	brne	.+74     	; 0x76e <enrollStart+0x1e6>
		uart_transmit(0x55);	// Start code 1
     724:	85 e5       	ldi	r24, 0x55	; 85
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	97 de       	rcall	.-722    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     72a:	8a ea       	ldi	r24, 0xAA	; 170
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	94 de       	rcall	.-728    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	91 de       	rcall	.-734    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	8e de       	rcall	.-740    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x05);
     73c:	85 e0       	ldi	r24, 0x05	; 5
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	8b de       	rcall	.-746    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	88 de       	rcall	.-752    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	85 de       	rcall	.-758    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	82 de       	rcall	.-764    	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     754:	82 e2       	ldi	r24, 0x22	; 34
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	7f de       	rcall	.-770    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	7c de       	rcall	.-776    	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x27);
     760:	87 e2       	ldi	r24, 0x27	; 39
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	79 de       	rcall	.-782    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	76 de       	rcall	.-788    	; 0x458 <uart_transmit>
     76c:	08 95       	ret
	}else if(enroll_id == 6){
     76e:	86 30       	cpi	r24, 0x06	; 6
     770:	91 05       	cpc	r25, r1
     772:	29 f5       	brne	.+74     	; 0x7be <enrollStart+0x236>
		uart_transmit(0x55);	// Start code 1
     774:	85 e5       	ldi	r24, 0x55	; 85
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	6f de       	rcall	.-802    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     77a:	8a ea       	ldi	r24, 0xAA	; 170
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	6c de       	rcall	.-808    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	69 de       	rcall	.-814    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	66 de       	rcall	.-820    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x06);
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	63 de       	rcall	.-826    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	60 de       	rcall	.-832    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	5d de       	rcall	.-838    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	5a de       	rcall	.-844    	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     7a4:	82 e2       	ldi	r24, 0x22	; 34
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	57 de       	rcall	.-850    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	54 de       	rcall	.-856    	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x28);
     7b0:	88 e2       	ldi	r24, 0x28	; 40
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	51 de       	rcall	.-862    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	4e de       	rcall	.-868    	; 0x458 <uart_transmit>
     7bc:	08 95       	ret
	}else if(enroll_id == 7){
     7be:	87 30       	cpi	r24, 0x07	; 7
     7c0:	91 05       	cpc	r25, r1
     7c2:	29 f5       	brne	.+74     	; 0x80e <enrollStart+0x286>
		uart_transmit(0x55);	// Start code 1
     7c4:	85 e5       	ldi	r24, 0x55	; 85
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	47 de       	rcall	.-882    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     7ca:	8a ea       	ldi	r24, 0xAA	; 170
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	44 de       	rcall	.-888    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	41 de       	rcall	.-894    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	3e de       	rcall	.-900    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x07);
     7dc:	87 e0       	ldi	r24, 0x07	; 7
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	3b de       	rcall	.-906    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	38 de       	rcall	.-912    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	35 de       	rcall	.-918    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	32 de       	rcall	.-924    	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     7f4:	82 e2       	ldi	r24, 0x22	; 34
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	2f de       	rcall	.-930    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	2c de       	rcall	.-936    	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x29);
     800:	89 e2       	ldi	r24, 0x29	; 41
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	29 de       	rcall	.-942    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	26 de       	rcall	.-948    	; 0x458 <uart_transmit>
     80c:	08 95       	ret
	}else if(enroll_id == 8){
     80e:	88 30       	cpi	r24, 0x08	; 8
     810:	91 05       	cpc	r25, r1
     812:	29 f5       	brne	.+74     	; 0x85e <enrollStart+0x2d6>
		uart_transmit(0x55);	// Start code 1
     814:	85 e5       	ldi	r24, 0x55	; 85
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	1f de       	rcall	.-962    	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     81a:	8a ea       	ldi	r24, 0xAA	; 170
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	1c de       	rcall	.-968    	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	19 de       	rcall	.-974    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	16 de       	rcall	.-980    	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x08);
     82c:	88 e0       	ldi	r24, 0x08	; 8
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	13 de       	rcall	.-986    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	10 de       	rcall	.-992    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0d de       	rcall	.-998    	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0a de       	rcall	.-1004   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     844:	82 e2       	ldi	r24, 0x22	; 34
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	07 de       	rcall	.-1010   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	04 de       	rcall	.-1016   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x30);
     850:	80 e3       	ldi	r24, 0x30	; 48
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	01 de       	rcall	.-1022   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	fe dd       	rcall	.-1028   	; 0x458 <uart_transmit>
     85c:	08 95       	ret
	}else if(enroll_id == 9){
     85e:	89 30       	cpi	r24, 0x09	; 9
     860:	91 05       	cpc	r25, r1
     862:	29 f5       	brne	.+74     	; 0x8ae <enrollStart+0x326>
		uart_transmit(0x55);	// Start code 1
     864:	85 e5       	ldi	r24, 0x55	; 85
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	f7 dd       	rcall	.-1042   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     86a:	8a ea       	ldi	r24, 0xAA	; 170
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	f4 dd       	rcall	.-1048   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	f1 dd       	rcall	.-1054   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	ee dd       	rcall	.-1060   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x09);
     87c:	89 e0       	ldi	r24, 0x09	; 9
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	eb dd       	rcall	.-1066   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	e8 dd       	rcall	.-1072   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	e5 dd       	rcall	.-1078   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	e2 dd       	rcall	.-1084   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     894:	82 e2       	ldi	r24, 0x22	; 34
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	df dd       	rcall	.-1090   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	dc dd       	rcall	.-1096   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x31);
     8a0:	81 e3       	ldi	r24, 0x31	; 49
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	d9 dd       	rcall	.-1102   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	d6 dd       	rcall	.-1108   	; 0x458 <uart_transmit>
     8ac:	08 95       	ret
	}else if(enroll_id == 10){
     8ae:	8a 30       	cpi	r24, 0x0A	; 10
     8b0:	91 05       	cpc	r25, r1
     8b2:	29 f5       	brne	.+74     	; 0x8fe <enrollStart+0x376>
		uart_transmit(0x55);	// Start code 1
     8b4:	85 e5       	ldi	r24, 0x55	; 85
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	cf dd       	rcall	.-1122   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     8ba:	8a ea       	ldi	r24, 0xAA	; 170
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	cc dd       	rcall	.-1128   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	c9 dd       	rcall	.-1134   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	c6 dd       	rcall	.-1140   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x10);
     8cc:	80 e1       	ldi	r24, 0x10	; 16
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	c3 dd       	rcall	.-1146   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	c0 dd       	rcall	.-1152   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	bd dd       	rcall	.-1158   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	ba dd       	rcall	.-1164   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     8e4:	82 e2       	ldi	r24, 0x22	; 34
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	b7 dd       	rcall	.-1170   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	b4 dd       	rcall	.-1176   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x32);
     8f0:	82 e3       	ldi	r24, 0x32	; 50
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	b1 dd       	rcall	.-1182   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	ae dd       	rcall	.-1188   	; 0x458 <uart_transmit>
     8fc:	08 95       	ret
	}else if(enroll_id == 11){
     8fe:	8b 30       	cpi	r24, 0x0B	; 11
     900:	91 05       	cpc	r25, r1
     902:	29 f5       	brne	.+74     	; 0x94e <enrollStart+0x3c6>
		uart_transmit(0x55);	// Start code 1
     904:	85 e5       	ldi	r24, 0x55	; 85
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	a7 dd       	rcall	.-1202   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     90a:	8a ea       	ldi	r24, 0xAA	; 170
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a4 dd       	rcall	.-1208   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a1 dd       	rcall	.-1214   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	9e dd       	rcall	.-1220   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x11);
     91c:	81 e1       	ldi	r24, 0x11	; 17
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	9b dd       	rcall	.-1226   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	98 dd       	rcall	.-1232   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	95 dd       	rcall	.-1238   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	92 dd       	rcall	.-1244   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     934:	82 e2       	ldi	r24, 0x22	; 34
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	8f dd       	rcall	.-1250   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	8c dd       	rcall	.-1256   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x33);
     940:	83 e3       	ldi	r24, 0x33	; 51
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	89 dd       	rcall	.-1262   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	86 dd       	rcall	.-1268   	; 0x458 <uart_transmit>
     94c:	08 95       	ret
	}else if(enroll_id == 12){
     94e:	8c 30       	cpi	r24, 0x0C	; 12
     950:	91 05       	cpc	r25, r1
     952:	29 f5       	brne	.+74     	; 0x99e <enrollStart+0x416>
		uart_transmit(0x55);	// Start code 1
     954:	85 e5       	ldi	r24, 0x55	; 85
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	7f dd       	rcall	.-1282   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     95a:	8a ea       	ldi	r24, 0xAA	; 170
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	7c dd       	rcall	.-1288   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	79 dd       	rcall	.-1294   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	76 dd       	rcall	.-1300   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x12);
     96c:	82 e1       	ldi	r24, 0x12	; 18
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	73 dd       	rcall	.-1306   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	70 dd       	rcall	.-1312   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	6d dd       	rcall	.-1318   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	6a dd       	rcall	.-1324   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     984:	82 e2       	ldi	r24, 0x22	; 34
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	67 dd       	rcall	.-1330   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	64 dd       	rcall	.-1336   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x34);
     990:	84 e3       	ldi	r24, 0x34	; 52
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	61 dd       	rcall	.-1342   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	5e dd       	rcall	.-1348   	; 0x458 <uart_transmit>
     99c:	08 95       	ret
	}else if(enroll_id == 13){
     99e:	8d 30       	cpi	r24, 0x0D	; 13
     9a0:	91 05       	cpc	r25, r1
     9a2:	29 f5       	brne	.+74     	; 0x9ee <enrollStart+0x466>
		uart_transmit(0x55);	// Start code 1
     9a4:	85 e5       	ldi	r24, 0x55	; 85
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	57 dd       	rcall	.-1362   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     9aa:	8a ea       	ldi	r24, 0xAA	; 170
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	54 dd       	rcall	.-1368   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	51 dd       	rcall	.-1374   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	4e dd       	rcall	.-1380   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x13);
     9bc:	83 e1       	ldi	r24, 0x13	; 19
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	4b dd       	rcall	.-1386   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	48 dd       	rcall	.-1392   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	45 dd       	rcall	.-1398   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	42 dd       	rcall	.-1404   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     9d4:	82 e2       	ldi	r24, 0x22	; 34
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	3f dd       	rcall	.-1410   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	3c dd       	rcall	.-1416   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x35);
     9e0:	85 e3       	ldi	r24, 0x35	; 53
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	39 dd       	rcall	.-1422   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	36 dd       	rcall	.-1428   	; 0x458 <uart_transmit>
     9ec:	08 95       	ret
	}else if(enroll_id == 14){
     9ee:	8e 30       	cpi	r24, 0x0E	; 14
     9f0:	91 05       	cpc	r25, r1
     9f2:	29 f5       	brne	.+74     	; 0xa3e <enrollStart+0x4b6>
		uart_transmit(0x55);	// Start code 1
     9f4:	85 e5       	ldi	r24, 0x55	; 85
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	2f dd       	rcall	.-1442   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     9fa:	8a ea       	ldi	r24, 0xAA	; 170
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	2c dd       	rcall	.-1448   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	29 dd       	rcall	.-1454   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	26 dd       	rcall	.-1460   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x14);
     a0c:	84 e1       	ldi	r24, 0x14	; 20
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	23 dd       	rcall	.-1466   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	20 dd       	rcall	.-1472   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	1d dd       	rcall	.-1478   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	1a dd       	rcall	.-1484   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     a24:	82 e2       	ldi	r24, 0x22	; 34
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	17 dd       	rcall	.-1490   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	14 dd       	rcall	.-1496   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x36);
     a30:	86 e3       	ldi	r24, 0x36	; 54
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	11 dd       	rcall	.-1502   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e dd       	rcall	.-1508   	; 0x458 <uart_transmit>
     a3c:	08 95       	ret
	}else if(enroll_id == 15){
     a3e:	8f 30       	cpi	r24, 0x0F	; 15
     a40:	91 05       	cpc	r25, r1
     a42:	29 f5       	brne	.+74     	; 0xa8e <enrollStart+0x506>
		uart_transmit(0x55);	// Start code 1
     a44:	85 e5       	ldi	r24, 0x55	; 85
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	07 dd       	rcall	.-1522   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     a4a:	8a ea       	ldi	r24, 0xAA	; 170
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	04 dd       	rcall	.-1528   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	01 dd       	rcall	.-1534   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fe dc       	rcall	.-1540   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x15);
     a5c:	85 e1       	ldi	r24, 0x15	; 21
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	fb dc       	rcall	.-1546   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	f8 dc       	rcall	.-1552   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	f5 dc       	rcall	.-1558   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	f2 dc       	rcall	.-1564   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     a74:	82 e2       	ldi	r24, 0x22	; 34
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	ef dc       	rcall	.-1570   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	ec dc       	rcall	.-1576   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x37);
     a80:	87 e3       	ldi	r24, 0x37	; 55
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	e9 dc       	rcall	.-1582   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	e6 dc       	rcall	.-1588   	; 0x458 <uart_transmit>
     a8c:	08 95       	ret
	}else if(enroll_id == 16){
     a8e:	80 31       	cpi	r24, 0x10	; 16
     a90:	91 05       	cpc	r25, r1
     a92:	29 f5       	brne	.+74     	; 0xade <enrollStart+0x556>
		uart_transmit(0x55);	// Start code 1
     a94:	85 e5       	ldi	r24, 0x55	; 85
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	df dc       	rcall	.-1602   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     a9a:	8a ea       	ldi	r24, 0xAA	; 170
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	dc dc       	rcall	.-1608   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	d9 dc       	rcall	.-1614   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	d6 dc       	rcall	.-1620   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x16);
     aac:	86 e1       	ldi	r24, 0x16	; 22
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	d3 dc       	rcall	.-1626   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	d0 dc       	rcall	.-1632   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	cd dc       	rcall	.-1638   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	ca dc       	rcall	.-1644   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     ac4:	82 e2       	ldi	r24, 0x22	; 34
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	c7 dc       	rcall	.-1650   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	c4 dc       	rcall	.-1656   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x38);
     ad0:	88 e3       	ldi	r24, 0x38	; 56
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	c1 dc       	rcall	.-1662   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	be dc       	rcall	.-1668   	; 0x458 <uart_transmit>
     adc:	08 95       	ret
	}else if(enroll_id == 17){
     ade:	81 31       	cpi	r24, 0x11	; 17
     ae0:	91 05       	cpc	r25, r1
     ae2:	29 f5       	brne	.+74     	; 0xb2e <enrollStart+0x5a6>
		uart_transmit(0x55);	// Start code 1
     ae4:	85 e5       	ldi	r24, 0x55	; 85
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	b7 dc       	rcall	.-1682   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     aea:	8a ea       	ldi	r24, 0xAA	; 170
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	b4 dc       	rcall	.-1688   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	b1 dc       	rcall	.-1694   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	ae dc       	rcall	.-1700   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x15);
     afc:	85 e1       	ldi	r24, 0x15	; 21
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	ab dc       	rcall	.-1706   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a8 dc       	rcall	.-1712   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	a5 dc       	rcall	.-1718   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a2 dc       	rcall	.-1724   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     b14:	82 e2       	ldi	r24, 0x22	; 34
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	9f dc       	rcall	.-1730   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	9c dc       	rcall	.-1736   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x39);
     b20:	89 e3       	ldi	r24, 0x39	; 57
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	99 dc       	rcall	.-1742   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	96 dc       	rcall	.-1748   	; 0x458 <uart_transmit>
     b2c:	08 95       	ret
	}else if(enroll_id == 18){
     b2e:	82 31       	cpi	r24, 0x12	; 18
     b30:	91 05       	cpc	r25, r1
     b32:	29 f5       	brne	.+74     	; 0xb7e <enrollStart+0x5f6>
		uart_transmit(0x55);	// Start code 1
     b34:	85 e5       	ldi	r24, 0x55	; 85
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	8f dc       	rcall	.-1762   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     b3a:	8a ea       	ldi	r24, 0xAA	; 170
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	8c dc       	rcall	.-1768   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	89 dc       	rcall	.-1774   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	86 dc       	rcall	.-1780   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x18);
     b4c:	88 e1       	ldi	r24, 0x18	; 24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	83 dc       	rcall	.-1786   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	80 dc       	rcall	.-1792   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	7d dc       	rcall	.-1798   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	7a dc       	rcall	.-1804   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     b64:	82 e2       	ldi	r24, 0x22	; 34
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	77 dc       	rcall	.-1810   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	74 dc       	rcall	.-1816   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x40);
     b70:	80 e4       	ldi	r24, 0x40	; 64
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	71 dc       	rcall	.-1822   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	6e dc       	rcall	.-1828   	; 0x458 <uart_transmit>
     b7c:	08 95       	ret
	}else if(enroll_id == 19){
     b7e:	43 97       	sbiw	r24, 0x13	; 19
     b80:	21 f5       	brne	.+72     	; 0xbca <enrollStart+0x642>
		uart_transmit(0x55);	// Start code 1
     b82:	85 e5       	ldi	r24, 0x55	; 85
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	68 dc       	rcall	.-1840   	; 0x458 <uart_transmit>
		uart_transmit(0xAA);	// Start code 2
     b88:	8a ea       	ldi	r24, 0xAA	; 170
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	65 dc       	rcall	.-1846   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// Device ID
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	62 dc       	rcall	.-1852   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Second part of ID
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	5f dc       	rcall	.-1858   	; 0x458 <uart_transmit>
		//uart_transmit(enroll);	// Input parameter byte 1
		uart_transmit(0x19);
     b9a:	89 e1       	ldi	r24, 0x19	; 25
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	5c dc       	rcall	.-1864   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 2
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	59 dc       	rcall	.-1870   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 3
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	56 dc       	rcall	.-1876   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Input parameter byte 4
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	53 dc       	rcall	.-1882   	; 0x458 <uart_transmit>
		uart_transmit(0x22);	// Byte 1 of command
     bb2:	82 e2       	ldi	r24, 0x22	; 34
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	50 dc       	rcall	.-1888   	; 0x458 <uart_transmit>
		uart_transmit(0x00);	// Byte 2 of command
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	4d dc       	rcall	.-1894   	; 0x458 <uart_transmit>
		//uart_transmit(checksum);	// Low byte checksum
		uart_transmit(0x41);
     bbe:	81 e4       	ldi	r24, 0x41	; 65
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	4a dc       	rcall	.-1900   	; 0x458 <uart_transmit>
		uart_transmit(0x01);	// High byte checksum
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	47 dc       	rcall	.-1906   	; 0x458 <uart_transmit>
     bca:	08 95       	ret

00000bcc <captureFinger>:
	}
}

void captureFinger(){
	uart_transmit(0x55);	// Start code 1
     bcc:	85 e5       	ldi	r24, 0x55	; 85
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	43 dc       	rcall	.-1914   	; 0x458 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
     bd2:	8a ea       	ldi	r24, 0xAA	; 170
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	40 dc       	rcall	.-1920   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Device ID
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	3d dc       	rcall	.-1926   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	3a dc       	rcall	.-1932   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 -- LED ON
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	37 dc       	rcall	.-1938   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	34 dc       	rcall	.-1944   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	31 dc       	rcall	.-1950   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	2e dc       	rcall	.-1956   	; 0x458 <uart_transmit>
	uart_transmit(0x60);	// Byte 1 of command
     bfc:	80 e6       	ldi	r24, 0x60	; 96
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	2b dc       	rcall	.-1962   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	28 dc       	rcall	.-1968   	; 0x458 <uart_transmit>
	uart_transmit(0x61);	// Low byte checksum
     c08:	81 e6       	ldi	r24, 0x61	; 97
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	25 dc       	rcall	.-1974   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	22 dc       	rcall	.-1980   	; 0x458 <uart_transmit>
     c14:	08 95       	ret

00000c16 <enroll1>:
}

void enroll1(){
	uart_transmit(0x55);	// Start code 1
     c16:	85 e5       	ldi	r24, 0x55	; 85
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	1e dc       	rcall	.-1988   	; 0x458 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
     c1c:	8a ea       	ldi	r24, 0xAA	; 170
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	1b dc       	rcall	.-1994   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Device ID
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	18 dc       	rcall	.-2000   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	15 dc       	rcall	.-2006   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 1 -- LED ON
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	12 dc       	rcall	.-2012   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0f dc       	rcall	.-2018   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0c dc       	rcall	.-2024   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	09 dc       	rcall	.-2030   	; 0x458 <uart_transmit>
	uart_transmit(0x23);	// Byte 1 of command
     c46:	83 e2       	ldi	r24, 0x23	; 35
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	06 dc       	rcall	.-2036   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	03 dc       	rcall	.-2042   	; 0x458 <uart_transmit>
	uart_transmit(0x23);	// Low byte checksum
     c52:	83 e2       	ldi	r24, 0x23	; 35
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	00 dc       	rcall	.-2048   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fd db       	rcall	.-2054   	; 0x458 <uart_transmit>
     c5e:	08 95       	ret

00000c60 <enroll2>:
}

void enroll2(){
	uart_transmit(0x55);	// Start code 1
     c60:	85 e5       	ldi	r24, 0x55	; 85
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	f9 db       	rcall	.-2062   	; 0x458 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
     c66:	8a ea       	ldi	r24, 0xAA	; 170
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	f6 db       	rcall	.-2068   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Device ID
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	f3 db       	rcall	.-2074   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	f0 db       	rcall	.-2080   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 1 -- LED ON
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	ed db       	rcall	.-2086   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	ea db       	rcall	.-2092   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	e7 db       	rcall	.-2098   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	e4 db       	rcall	.-2104   	; 0x458 <uart_transmit>
	uart_transmit(0x24);	// Byte 1 of command
     c90:	84 e2       	ldi	r24, 0x24	; 36
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	e1 db       	rcall	.-2110   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	de db       	rcall	.-2116   	; 0x458 <uart_transmit>
	uart_transmit(0x24);	// Low byte checksum
     c9c:	84 e2       	ldi	r24, 0x24	; 36
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	db db       	rcall	.-2122   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	d8 db       	rcall	.-2128   	; 0x458 <uart_transmit>
     ca8:	08 95       	ret

00000caa <enroll3>:
}

void enroll3(){
	uart_transmit(0x55);	// Start code 1
     caa:	85 e5       	ldi	r24, 0x55	; 85
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	d4 db       	rcall	.-2136   	; 0x458 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
     cb0:	8a ea       	ldi	r24, 0xAA	; 170
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	d1 db       	rcall	.-2142   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// Device ID
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	ce db       	rcall	.-2148   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	cb db       	rcall	.-2154   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 1 -- LED ON
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	c8 db       	rcall	.-2160   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	c5 db       	rcall	.-2166   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	c2 db       	rcall	.-2172   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	bf db       	rcall	.-2178   	; 0x458 <uart_transmit>
	uart_transmit(0x25);	// Byte 1 of command
     cda:	85 e2       	ldi	r24, 0x25	; 37
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	bc db       	rcall	.-2184   	; 0x458 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	b9 db       	rcall	.-2190   	; 0x458 <uart_transmit>
	uart_transmit(0x25);	// Low byte checksum
     ce6:	85 e2       	ldi	r24, 0x25	; 37
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	b6 db       	rcall	.-2196   	; 0x458 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	b3 db       	rcall	.-2202   	; 0x458 <uart_transmit>
     cf2:	08 95       	ret

00000cf4 <main>:
}

int main(void)            // Main Loop
{
	
	DDRB = 0b00101000;
     cf4:	88 e2       	ldi	r24, 0x28	; 40
     cf6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b01111111;	// PC5 for keypad (before PD1)
     cf8:	8f e7       	ldi	r24, 0x7F	; 127
     cfa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00001110;	// PD0 (RX) input & PD1 (TX) output for serial/ PD3 is now PD0 for keypad
     cfc:	8e e0       	ldi	r24, 0x0E	; 14
     cfe:	8a b9       	out	0x0a, r24	; 10
	//DDRD &= ~(1 << PD3);	// Set PD3 as input for mag card
	PORTC |= (1 << 5);	// Turn LED off -- Sets bit
     d00:	45 9a       	sbi	0x08, 5	; 8
	//PORTB |= (1 << 1);
	PORTD = 0xF0;
     d02:	80 ef       	ldi	r24, 0xF0	; 240
     d04:	8b b9       	out	0x0b, r24	; 11

	// Enables pin change interrupt  
	tmp3 = PCICR;
     d06:	e8 e6       	ldi	r30, 0x68	; 104
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	90 81       	ld	r25, Z
	tmp3 = 1 << (PCIE2) | 0 << (PCIE1) | 0 << (PCIE0);
     d0c:	94 e0       	ldi	r25, 0x04	; 4
     d0e:	90 93 ca 01 	sts	0x01CA, r25
	PCICR = tmp3;
     d12:	90 83       	st	Z, r25
	tmp3 = PCMSK2;
     d14:	ed e6       	ldi	r30, 0x6D	; 109
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	90 81       	ld	r25, Z
	tmp3 = 1 << (PCINT23) | 1 << (PCINT22) | 1 << (PCINT21) | 1 << (PCINT20) | 0 << (PCINT19) | 0 << (PCINT18) | 0 << (PCINT17) | 0 << (PCINT16);
     d1a:	80 93 ca 01 	sts	0x01CA, r24
	PCMSK2 = tmp3;
     d1e:	80 83       	st	Z, r24
	sei();                // Enables global interrupts
     d20:	78 94       	sei
	lcd_init(LCD_DISP_ON);
     d22:	8c e0       	ldi	r24, 0x0C	; 12
     d24:	4c d2       	rcall	.+1176   	; 0x11be <lcd_init>
	uart_init(BAUDRATE);
     d26:	83 e3       	ldi	r24, 0x33	; 51
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a5 d2       	rcall	.+1354   	; 0x1276 <uart_init>
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
     d2e:	80 e7       	ldi	r24, 0x70	; 112
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	21 50       	subi	r18, 0x01	; 1
     d34:	80 40       	sbci	r24, 0x00	; 0
     d36:	90 40       	sbci	r25, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <main+0x3e>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <main+0x48>
     d3c:	00 00       	nop
	//uart_init(51);
	//USART_Init();
	_delay_ms(100);
	initialize_fps();
     d3e:	90 db       	rcall	.-2272   	; 0x460 <initialize_fps>
     d40:	2f ef       	ldi	r18, 0xFF	; 255
     d42:	80 e7       	ldi	r24, 0x70	; 112
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	80 40       	sbci	r24, 0x00	; 0
     d4a:	90 40       	sbci	r25, 0x00	; 0
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <main+0x52>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <main+0x5c>
     d50:	00 00       	nop
	_delay_ms(100);
	led_on();
     d52:	ab db       	rcall	.-2218   	; 0x4aa <led_on>
     d54:	2f ef       	ldi	r18, 0xFF	; 255
     d56:	80 e7       	ldi	r24, 0x70	; 112
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	80 40       	sbci	r24, 0x00	; 0
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <main+0x66>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <main+0x70>
     d64:	00 00       	nop
				}
			break;
			  
			case Enroll_User:
				if(finger_event != 3){
					curr_state = EXIT;
     d66:	0f 2e       	mov	r0, r31
     d68:	f5 e0       	ldi	r31, 0x05	; 5
     d6a:	cf 2e       	mov	r12, r31
     d6c:	d1 2c       	mov	r13, r1
     d6e:	f0 2d       	mov	r31, r0
					lcd_clrscr();
					lcd_puts("Take off finger");
					_delay_ms(1000);
					
					if(finger_event != 3){
						curr_state = DONE;
     d70:	0f 2e       	mov	r0, r31
     d72:	f6 e0       	ldi	r31, 0x06	; 6
     d74:	8f 2e       	mov	r8, r31
     d76:	91 2c       	mov	r9, r1
     d78:	f0 2d       	mov	r31, r0
				lcd_puts("Enroll user");
				_delay_ms(2500);
				if(finger_event == 2){
					curr_state = EXIT;
				}else{
					curr_state = Enroll_User;
     d7a:	c4 e0       	ldi	r28, 0x04	; 4
     d7c:	d0 e0       	ldi	r29, 0x00	; 0
				lcd_clrscr();
				lcd_puts("Access Granted");
				
				PORTC &= ~(1 << 5);	// Turn LED on 
				_delay_ms(2500);
				curr_state = Scan_Finger;
     d7e:	0f 2e       	mov	r0, r31
     d80:	f3 e0       	ldi	r31, 0x03	; 3
     d82:	ef 2e       	mov	r14, r31
     d84:	f1 2c       	mov	r15, r1
     d86:	f0 2d       	mov	r31, r0
					while(pin_event != 1){
						_delay_us(50);
						// Forever loop until keypad enters in 4 numbers for pin
					}
					pin_event = 0;
					curr_state = Check_Pin;
     d88:	01 e0       	ldi	r16, 0x01	; 1
     d8a:	10 e0       	ldi	r17, 0x00	; 0
			 
			 case Check_Pin:
				getEnrollCount();
				_delay_ms(100);
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
					curr_state = Authorize;
     d8c:	68 94       	set
     d8e:	aa 24       	eor	r10, r10
     d90:	a1 f8       	bld	r10, 1
     d92:	b1 2c       	mov	r11, r1
	led_on();
	_delay_ms(100);
	
	 while(1)
	 {
		 switch(curr_state){
     d94:	80 91 9e 01 	lds	r24, 0x019E
     d98:	90 91 9f 01 	lds	r25, 0x019F
     d9c:	fc 01       	movw	r30, r24
     d9e:	87 30       	cpi	r24, 0x07	; 7
     da0:	91 05       	cpc	r25, r1
     da2:	e0 f7       	brcc	.-8      	; 0xd9c <main+0xa8>
     da4:	e6 5e       	subi	r30, 0xE6	; 230
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	09 94       	ijmp
			 
			 case Get_Pin:
				lcd_clrscr();
     daa:	e2 d1       	rcall	.+964    	; 0x1170 <lcd_clrscr>
				//lcd_puts("Print Valid ");
				//lcd_putc('\n');
				lcd_puts("Enter PIN: ");
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	f7 d1       	rcall	.+1006   	; 0x11a0 <lcd_puts>
				while(pin_event != 1){
     db2:	80 91 9a 01 	lds	r24, 0x019A
     db6:	90 91 9b 01 	lds	r25, 0x019B
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	51 f0       	breq	.+20     	; 0xdd2 <main+0xde>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dbe:	25 e8       	ldi	r18, 0x85	; 133
     dc0:	2a 95       	dec	r18
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <main+0xcc>
     dc4:	00 00       	nop
     dc6:	80 91 9a 01 	lds	r24, 0x019A
     dca:	90 91 9b 01 	lds	r25, 0x019B
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	b1 f7       	brne	.-20     	; 0xdbe <main+0xca>
					_delay_us(50);
					 // Forever loop until keypad enters in 4 numbers for pin
			    }   
				pin_event = 0;
     dd2:	10 92 9b 01 	sts	0x019B, r1
     dd6:	10 92 9a 01 	sts	0x019A, r1
				curr_state = Check_Pin;
     dda:	10 93 9f 01 	sts	0x019F, r17
     dde:	00 93 9e 01 	sts	0x019E, r16
			 break;
     de2:	d8 cf       	rjmp	.-80     	; 0xd94 <main+0xa0>
			 
			 case Check_Pin:
				getEnrollCount();
     de4:	87 db       	rcall	.-2290   	; 0x4f4 <getEnrollCount>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	90 e7       	ldi	r25, 0x70	; 112
     dea:	22 e0       	ldi	r18, 0x02	; 2
     dec:	81 50       	subi	r24, 0x01	; 1
     dee:	90 40       	sbci	r25, 0x00	; 0
     df0:	20 40       	sbci	r18, 0x00	; 0
     df2:	e1 f7       	brne	.-8      	; 0xdec <main+0xf8>
     df4:	00 c0       	rjmp	.+0      	; 0xdf6 <main+0x102>
     df6:	00 00       	nop
				_delay_ms(100);
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
     df8:	ae 01       	movw	r20, r28
     dfa:	62 e4       	ldi	r22, 0x42	; 66
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	85 ec       	ldi	r24, 0xC5	; 197
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	69 d2       	rcall	.+1234   	; 0x12d6 <strncmp_P>
     e04:	89 2b       	or	r24, r25
     e06:	29 f4       	brne	.+10     	; 0xe12 <main+0x11e>
					curr_state = Authorize;
     e08:	b0 92 9f 01 	sts	0x019F, r11
     e0c:	a0 92 9e 01 	sts	0x019E, r10
     e10:	c1 cf       	rjmp	.-126    	; 0xd94 <main+0xa0>
				}else{
					lcd_clrscr();
     e12:	ae d1       	rcall	.+860    	; 0x1170 <lcd_clrscr>
					lcd_puts("Pin invalid");
     e14:	8e e0       	ldi	r24, 0x0E	; 14
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	c3 d1       	rcall	.+902    	; 0x11a0 <lcd_puts>
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	98 e0       	ldi	r25, 0x08	; 8
     e1e:	2d e3       	ldi	r18, 0x3D	; 61
     e20:	81 50       	subi	r24, 0x01	; 1
     e22:	90 40       	sbci	r25, 0x00	; 0
     e24:	20 40       	sbci	r18, 0x00	; 0
     e26:	e1 f7       	brne	.-8      	; 0xe20 <main+0x12c>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <main+0x136>
     e2a:	00 00       	nop
					_delay_ms(2500);
					lcd_clrscr();
     e2c:	a1 d1       	rcall	.+834    	; 0x1170 <lcd_clrscr>
					lcd_puts("Enter PIN:");
     e2e:	8a e1       	ldi	r24, 0x1A	; 26
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	b6 d1       	rcall	.+876    	; 0x11a0 <lcd_puts>
					while(pin_event != 1){
     e34:	80 91 9a 01 	lds	r24, 0x019A
     e38:	90 91 9b 01 	lds	r25, 0x019B
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	51 f0       	breq	.+20     	; 0xe54 <main+0x160>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e40:	85 e8       	ldi	r24, 0x85	; 133
     e42:	8a 95       	dec	r24
     e44:	f1 f7       	brne	.-4      	; 0xe42 <main+0x14e>
     e46:	00 00       	nop
     e48:	80 91 9a 01 	lds	r24, 0x019A
     e4c:	90 91 9b 01 	lds	r25, 0x019B
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	b1 f7       	brne	.-20     	; 0xe40 <main+0x14c>
						_delay_us(50);
						// Forever loop until keypad enters in 4 numbers for pin
					}
					pin_event = 0;
     e54:	10 92 9b 01 	sts	0x019B, r1
     e58:	10 92 9a 01 	sts	0x019A, r1
					curr_state = Check_Pin;
     e5c:	10 93 9f 01 	sts	0x019F, r17
     e60:	00 93 9e 01 	sts	0x019E, r16
     e64:	97 cf       	rjmp	.-210    	; 0xd94 <main+0xa0>
				}
				
			 break;
			 
			 case Authorize:
				lcd_clrscr();
     e66:	84 d1       	rcall	.+776    	; 0x1170 <lcd_clrscr>
				lcd_puts("Access Granted");
     e68:	85 e2       	ldi	r24, 0x25	; 37
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	99 d1       	rcall	.+818    	; 0x11a0 <lcd_puts>
				
				PORTC &= ~(1 << 5);	// Turn LED on 
     e6e:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e70:	9f ef       	ldi	r25, 0xFF	; 255
     e72:	28 e0       	ldi	r18, 0x08	; 8
     e74:	8d e3       	ldi	r24, 0x3D	; 61
     e76:	91 50       	subi	r25, 0x01	; 1
     e78:	20 40       	sbci	r18, 0x00	; 0
     e7a:	80 40       	sbci	r24, 0x00	; 0
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <main+0x182>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <main+0x18c>
     e80:	00 00       	nop
				_delay_ms(2500);
				curr_state = Scan_Finger;
     e82:	f0 92 9f 01 	sts	0x019F, r15
     e86:	e0 92 9e 01 	sts	0x019E, r14
			
				PORTC |= (1 << 5);	// Turn LED off
     e8a:	45 9a       	sbi	0x08, 5	; 8
			 break;
     e8c:	83 cf       	rjmp	.-250    	; 0xd94 <main+0xa0>
			
			case Scan_Finger:
				lcd_clrscr();	// Initialize LCD with text
     e8e:	70 d1       	rcall	.+736    	; 0x1170 <lcd_clrscr>
				lcd_puts("Enroll user");
     e90:	84 e3       	ldi	r24, 0x34	; 52
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	85 d1       	rcall	.+778    	; 0x11a0 <lcd_puts>
     e96:	9f ef       	ldi	r25, 0xFF	; 255
     e98:	28 e0       	ldi	r18, 0x08	; 8
     e9a:	8d e3       	ldi	r24, 0x3D	; 61
     e9c:	91 50       	subi	r25, 0x01	; 1
     e9e:	20 40       	sbci	r18, 0x00	; 0
     ea0:	80 40       	sbci	r24, 0x00	; 0
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <main+0x1a8>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <main+0x1b2>
     ea6:	00 00       	nop
				_delay_ms(2500);
				if(finger_event == 2){
     ea8:	80 91 9c 01 	lds	r24, 0x019C
     eac:	90 91 9d 01 	lds	r25, 0x019D
     eb0:	02 97       	sbiw	r24, 0x02	; 2
     eb2:	29 f4       	brne	.+10     	; 0xebe <main+0x1ca>
					curr_state = EXIT;
     eb4:	d0 92 9f 01 	sts	0x019F, r13
     eb8:	c0 92 9e 01 	sts	0x019E, r12
     ebc:	6b cf       	rjmp	.-298    	; 0xd94 <main+0xa0>
				}else{
					curr_state = Enroll_User;
     ebe:	d0 93 9f 01 	sts	0x019F, r29
     ec2:	c0 93 9e 01 	sts	0x019E, r28
     ec6:	66 cf       	rjmp	.-308    	; 0xd94 <main+0xa0>
				}
			break;
			  
			case Enroll_User:
				if(finger_event != 3){
     ec8:	80 91 9c 01 	lds	r24, 0x019C
     ecc:	90 91 9d 01 	lds	r25, 0x019D
     ed0:	03 97       	sbiw	r24, 0x03	; 3
     ed2:	09 f4       	brne	.+2      	; 0xed6 <main+0x1e2>
     ed4:	5f cf       	rjmp	.-322    	; 0xd94 <main+0xa0>
					curr_state = EXIT;
     ed6:	d0 92 9f 01 	sts	0x019F, r13
     eda:	c0 92 9e 01 	sts	0x019E, r12
					enrollStart();
     ede:	54 db       	rcall	.-2392   	; 0x588 <enrollStart>
     ee0:	9f ef       	ldi	r25, 0xFF	; 255
     ee2:	24 e3       	ldi	r18, 0x34	; 52
     ee4:	8c e0       	ldi	r24, 0x0C	; 12
     ee6:	91 50       	subi	r25, 0x01	; 1
     ee8:	20 40       	sbci	r18, 0x00	; 0
     eea:	80 40       	sbci	r24, 0x00	; 0
     eec:	e1 f7       	brne	.-8      	; 0xee6 <main+0x1f2>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <main+0x1fc>
     ef0:	00 00       	nop
					_delay_ms(500);
					lcd_clrscr();	// Initialize LCD with text
     ef2:	3e d1       	rcall	.+636    	; 0x1170 <lcd_clrscr>
					lcd_puts("Enroll 1");
     ef4:	80 e4       	ldi	r24, 0x40	; 64
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	53 d1       	rcall	.+678    	; 0x11a0 <lcd_puts>
     efa:	9f ef       	ldi	r25, 0xFF	; 255
     efc:	24 e3       	ldi	r18, 0x34	; 52
     efe:	8c e0       	ldi	r24, 0x0C	; 12
     f00:	91 50       	subi	r25, 0x01	; 1
     f02:	20 40       	sbci	r18, 0x00	; 0
     f04:	80 40       	sbci	r24, 0x00	; 0
     f06:	e1 f7       	brne	.-8      	; 0xf00 <main+0x20c>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <main+0x216>
     f0a:	00 00       	nop
					_delay_ms(500);
					captureFinger();
     f0c:	5f de       	rcall	.-834    	; 0xbcc <captureFinger>
     f0e:	9f ef       	ldi	r25, 0xFF	; 255
     f10:	28 e0       	ldi	r18, 0x08	; 8
     f12:	8d e3       	ldi	r24, 0x3D	; 61
     f14:	91 50       	subi	r25, 0x01	; 1
     f16:	20 40       	sbci	r18, 0x00	; 0
     f18:	80 40       	sbci	r24, 0x00	; 0
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <main+0x220>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <main+0x22a>
     f1e:	00 00       	nop
					_delay_ms(2500);
					lcd_clrscr();
     f20:	27 d1       	rcall	.+590    	; 0x1170 <lcd_clrscr>
					enroll1();
     f22:	79 de       	rcall	.-782    	; 0xc16 <enroll1>
     f24:	9f ef       	ldi	r25, 0xFF	; 255
     f26:	24 e3       	ldi	r18, 0x34	; 52
     f28:	8c e0       	ldi	r24, 0x0C	; 12
     f2a:	91 50       	subi	r25, 0x01	; 1
     f2c:	20 40       	sbci	r18, 0x00	; 0
     f2e:	80 40       	sbci	r24, 0x00	; 0
     f30:	e1 f7       	brne	.-8      	; 0xf2a <main+0x236>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <main+0x240>
     f34:	00 00       	nop
					_delay_ms(500);
					lcd_clrscr();
     f36:	1c d1       	rcall	.+568    	; 0x1170 <lcd_clrscr>
					lcd_puts("Take off finger");
     f38:	89 e4       	ldi	r24, 0x49	; 73
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	31 d1       	rcall	.+610    	; 0x11a0 <lcd_puts>
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
     f40:	29 e6       	ldi	r18, 0x69	; 105
     f42:	88 e1       	ldi	r24, 0x18	; 24
     f44:	91 50       	subi	r25, 0x01	; 1
     f46:	20 40       	sbci	r18, 0x00	; 0
     f48:	80 40       	sbci	r24, 0x00	; 0
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <main+0x250>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <main+0x25a>
     f4e:	00 00       	nop
					_delay_ms(1000);
					fingerPressed();
     f50:	f6 da       	rcall	.-2580   	; 0x53e <fingerPressed>
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	24 e3       	ldi	r18, 0x34	; 52
     f56:	8c e0       	ldi	r24, 0x0C	; 12
     f58:	91 50       	subi	r25, 0x01	; 1
     f5a:	20 40       	sbci	r18, 0x00	; 0
     f5c:	80 40       	sbci	r24, 0x00	; 0
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <main+0x264>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <main+0x26e>
     f62:	00 00       	nop
					_delay_ms(500);
					
					lcd_clrscr();	// Initialize LCD with text
     f64:	05 d1       	rcall	.+522    	; 0x1170 <lcd_clrscr>
					lcd_puts("Enroll 2");
     f66:	89 e5       	ldi	r24, 0x59	; 89
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	1a d1       	rcall	.+564    	; 0x11a0 <lcd_puts>
     f6c:	9f ef       	ldi	r25, 0xFF	; 255
     f6e:	24 e3       	ldi	r18, 0x34	; 52
     f70:	8c e0       	ldi	r24, 0x0C	; 12
     f72:	91 50       	subi	r25, 0x01	; 1
     f74:	20 40       	sbci	r18, 0x00	; 0
     f76:	80 40       	sbci	r24, 0x00	; 0
     f78:	e1 f7       	brne	.-8      	; 0xf72 <main+0x27e>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <main+0x288>
     f7c:	00 00       	nop
					_delay_ms(500);
					captureFinger();
     f7e:	26 de       	rcall	.-948    	; 0xbcc <captureFinger>
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	28 e0       	ldi	r18, 0x08	; 8
     f84:	8d e3       	ldi	r24, 0x3D	; 61
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	20 40       	sbci	r18, 0x00	; 0
     f8a:	80 40       	sbci	r24, 0x00	; 0
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <main+0x292>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <main+0x29c>
     f90:	00 00       	nop
					_delay_ms(2500);
					lcd_clrscr();
     f92:	ee d0       	rcall	.+476    	; 0x1170 <lcd_clrscr>
					enroll2();
     f94:	65 de       	rcall	.-822    	; 0xc60 <enroll2>
     f96:	9f ef       	ldi	r25, 0xFF	; 255
     f98:	24 e3       	ldi	r18, 0x34	; 52
     f9a:	8c e0       	ldi	r24, 0x0C	; 12
     f9c:	91 50       	subi	r25, 0x01	; 1
     f9e:	20 40       	sbci	r18, 0x00	; 0
     fa0:	80 40       	sbci	r24, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <main+0x2a8>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <main+0x2b2>
     fa6:	00 00       	nop
					_delay_ms(500);
					lcd_clrscr();
     fa8:	e3 d0       	rcall	.+454    	; 0x1170 <lcd_clrscr>
					lcd_puts("Take off finger");
     faa:	89 e4       	ldi	r24, 0x49	; 73
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	f8 d0       	rcall	.+496    	; 0x11a0 <lcd_puts>
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	29 e6       	ldi	r18, 0x69	; 105
     fb4:	88 e1       	ldi	r24, 0x18	; 24
     fb6:	91 50       	subi	r25, 0x01	; 1
     fb8:	20 40       	sbci	r18, 0x00	; 0
     fba:	80 40       	sbci	r24, 0x00	; 0
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <main+0x2c2>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <main+0x2cc>
     fc0:	00 00       	nop
					_delay_ms(1000);
					fingerPressed();
     fc2:	bd da       	rcall	.-2694   	; 0x53e <fingerPressed>
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
     fc6:	24 e3       	ldi	r18, 0x34	; 52
     fc8:	8c e0       	ldi	r24, 0x0C	; 12
     fca:	91 50       	subi	r25, 0x01	; 1
     fcc:	20 40       	sbci	r18, 0x00	; 0
     fce:	80 40       	sbci	r24, 0x00	; 0
     fd0:	e1 f7       	brne	.-8      	; 0xfca <main+0x2d6>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <main+0x2e0>
     fd4:	00 00       	nop
					_delay_ms(500);
					
					lcd_clrscr();	// Initialize LCD with text
     fd6:	cc d0       	rcall	.+408    	; 0x1170 <lcd_clrscr>
					lcd_puts("Enroll 3");
     fd8:	82 e6       	ldi	r24, 0x62	; 98
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	e1 d0       	rcall	.+450    	; 0x11a0 <lcd_puts>
     fde:	9f ef       	ldi	r25, 0xFF	; 255
     fe0:	24 e3       	ldi	r18, 0x34	; 52
     fe2:	8c e0       	ldi	r24, 0x0C	; 12
     fe4:	91 50       	subi	r25, 0x01	; 1
     fe6:	20 40       	sbci	r18, 0x00	; 0
     fe8:	80 40       	sbci	r24, 0x00	; 0
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <main+0x2f0>
     fec:	00 c0       	rjmp	.+0      	; 0xfee <main+0x2fa>
     fee:	00 00       	nop
					_delay_ms(500);
					captureFinger();
     ff0:	ed dd       	rcall	.-1062   	; 0xbcc <captureFinger>
     ff2:	9f ef       	ldi	r25, 0xFF	; 255
     ff4:	28 e0       	ldi	r18, 0x08	; 8
     ff6:	8d e3       	ldi	r24, 0x3D	; 61
     ff8:	91 50       	subi	r25, 0x01	; 1
     ffa:	20 40       	sbci	r18, 0x00	; 0
     ffc:	80 40       	sbci	r24, 0x00	; 0
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <main+0x304>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <main+0x30e>
    1002:	00 00       	nop
					_delay_ms(2500);
					lcd_clrscr();
    1004:	b5 d0       	rcall	.+362    	; 0x1170 <lcd_clrscr>
					enroll3();
    1006:	51 de       	rcall	.-862    	; 0xcaa <enroll3>
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	24 e3       	ldi	r18, 0x34	; 52
    100c:	8c e0       	ldi	r24, 0x0C	; 12
    100e:	91 50       	subi	r25, 0x01	; 1
    1010:	20 40       	sbci	r18, 0x00	; 0
    1012:	80 40       	sbci	r24, 0x00	; 0
    1014:	e1 f7       	brne	.-8      	; 0x100e <main+0x31a>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <main+0x324>
    1018:	00 00       	nop
					_delay_ms(500);
					lcd_clrscr();
    101a:	aa d0       	rcall	.+340    	; 0x1170 <lcd_clrscr>
					lcd_puts("Take off finger");
    101c:	89 e4       	ldi	r24, 0x49	; 73
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	bf d0       	rcall	.+382    	; 0x11a0 <lcd_puts>
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	29 e6       	ldi	r18, 0x69	; 105
    1026:	88 e1       	ldi	r24, 0x18	; 24
    1028:	91 50       	subi	r25, 0x01	; 1
    102a:	20 40       	sbci	r18, 0x00	; 0
    102c:	80 40       	sbci	r24, 0x00	; 0
    102e:	e1 f7       	brne	.-8      	; 0x1028 <main+0x334>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <main+0x33e>
    1032:	00 00       	nop
					_delay_ms(1000);
					
					if(finger_event != 3){
    1034:	80 91 9c 01 	lds	r24, 0x019C
    1038:	90 91 9d 01 	lds	r25, 0x019D
    103c:	03 97       	sbiw	r24, 0x03	; 3
    103e:	29 f0       	breq	.+10     	; 0x104a <main+0x356>
						curr_state = DONE;
    1040:	90 92 9f 01 	sts	0x019F, r9
    1044:	80 92 9e 01 	sts	0x019E, r8
    1048:	a5 ce       	rjmp	.-694    	; 0xd94 <main+0xa0>
					}else{
						lcd_clrscr();
    104a:	92 d0       	rcall	.+292    	; 0x1170 <lcd_clrscr>
						lcd_puts("Bad Fingerprint");
    104c:	8b e6       	ldi	r24, 0x6B	; 107
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	a7 d0       	rcall	.+334    	; 0x11a0 <lcd_puts>
    1052:	9f ef       	ldi	r25, 0xFF	; 255
    1054:	28 e0       	ldi	r18, 0x08	; 8
    1056:	8d e3       	ldi	r24, 0x3D	; 61
    1058:	91 50       	subi	r25, 0x01	; 1
    105a:	20 40       	sbci	r18, 0x00	; 0
    105c:	80 40       	sbci	r24, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <main+0x364>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <main+0x36e>
    1062:	00 00       	nop
						_delay_ms(2500);
						lcd_clrscr();
    1064:	85 d0       	rcall	.+266    	; 0x1170 <lcd_clrscr>
						curr_state = EXIT;
    1066:	d0 92 9f 01 	sts	0x019F, r13
    106a:	c0 92 9e 01 	sts	0x019E, r12
    106e:	92 ce       	rjmp	.-732    	; 0xd94 <main+0xa0>
					}
				}
			break;
			
			case EXIT:
				lcd_clrscr();
    1070:	7f d0       	rcall	.+254    	; 0x1170 <lcd_clrscr>
				lcd_puts("User exit");
    1072:	8b e7       	ldi	r24, 0x7B	; 123
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	94 d0       	rcall	.+296    	; 0x11a0 <lcd_puts>
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    107a:	23 ed       	ldi	r18, 0xD3	; 211
    107c:	80 e3       	ldi	r24, 0x30	; 48
    107e:	91 50       	subi	r25, 0x01	; 1
    1080:	20 40       	sbci	r18, 0x00	; 0
    1082:	80 40       	sbci	r24, 0x00	; 0
    1084:	e1 f7       	brne	.-8      	; 0x107e <main+0x38a>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <main+0x394>
    1088:	00 00       	nop
				_delay_ms(2000);
				finger_event = 0;
    108a:	10 92 9d 01 	sts	0x019D, r1
    108e:	10 92 9c 01 	sts	0x019C, r1
				curr_state = Get_Pin;
    1092:	10 92 9f 01 	sts	0x019F, r1
    1096:	10 92 9e 01 	sts	0x019E, r1
			break;
    109a:	7c ce       	rjmp	.-776    	; 0xd94 <main+0xa0>
			
			case DONE:
				PORTC &= ~(1 << 5);	// Turn LED on
    109c:	45 98       	cbi	0x08, 5	; 8
				lcd_clrscr();
    109e:	68 d0       	rcall	.+208    	; 0x1170 <lcd_clrscr>
				lcd_puts("User enrolled");
    10a0:	85 e8       	ldi	r24, 0x85	; 133
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	7d d0       	rcall	.+250    	; 0x11a0 <lcd_puts>
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	21 e1       	ldi	r18, 0x11	; 17
    10aa:	8a e7       	ldi	r24, 0x7A	; 122
    10ac:	91 50       	subi	r25, 0x01	; 1
    10ae:	20 40       	sbci	r18, 0x00	; 0
    10b0:	80 40       	sbci	r24, 0x00	; 0
    10b2:	e1 f7       	brne	.-8      	; 0x10ac <main+0x3b8>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <main+0x3c2>
    10b6:	00 00       	nop
				_delay_ms(5000);
				finger_event = 0;
    10b8:	10 92 9d 01 	sts	0x019D, r1
    10bc:	10 92 9c 01 	sts	0x019C, r1
				curr_state = Get_Pin;
    10c0:	10 92 9f 01 	sts	0x019F, r1
    10c4:	10 92 9e 01 	sts	0x019E, r1
				PORTC |= (1 << 5);	// Turn LED off
    10c8:	45 9a       	sbi	0x08, 5	; 8
				enroll_id++;
    10ca:	80 91 94 01 	lds	r24, 0x0194
    10ce:	90 91 95 01 	lds	r25, 0x0195
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	90 93 95 01 	sts	0x0195, r25
    10d8:	80 93 94 01 	sts	0x0194, r24
			break;
    10dc:	5b ce       	rjmp	.-842    	; 0xd94 <main+0xa0>

000010de <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
    10de:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10e0:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
    10e2:	2b 98       	cbi	0x05, 3	; 5
    10e4:	08 95       	ret

000010e6 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
    10ec:	66 23       	and	r22, r22
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <lcd_write+0xe>
       lcd_rs_high();
    10f0:	2d 9a       	sbi	0x05, 5	; 5
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <lcd_write+0x10>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    10f4:	2d 98       	cbi	0x05, 5	; 5
    }
    lcd_rw_low();    /* RW=0  write mode      */
    10f6:	2c 98       	cbi	0x05, 4	; 5

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
    10f8:	87 b1       	in	r24, 0x07	; 7
    10fa:	8f 60       	ori	r24, 0x0F	; 15
    10fc:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
    10fe:	c8 b1       	in	r28, 0x08	; 8
    1100:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
    1102:	8d 2f       	mov	r24, r29
    1104:	82 95       	swap	r24
    1106:	8f 70       	andi	r24, 0x0F	; 15
    1108:	8c 2b       	or	r24, r28
    110a:	88 b9       	out	0x08, r24	; 8
        lcd_e_toggle();
    110c:	e8 df       	rcall	.-48     	; 0x10de <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
    110e:	df 70       	andi	r29, 0x0F	; 15
    1110:	dc 2b       	or	r29, r28
    1112:	d8 b9       	out	0x08, r29	; 8
        lcd_e_toggle();
    1114:	e4 df       	rcall	.-56     	; 0x10de <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    1116:	cf 60       	ori	r28, 0x0F	; 15
    1118:	c8 b9       	out	0x08, r28	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
    1120:	88 23       	and	r24, r24
    1122:	11 f0       	breq	.+4      	; 0x1128 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
    1124:	2d 9a       	sbi	0x05, 5	; 5
    1126:	01 c0       	rjmp	.+2      	; 0x112a <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    1128:	2d 98       	cbi	0x05, 5	; 5
    lcd_rw_high();                           /* RW=1  read mode      */
    112a:	2c 9a       	sbi	0x05, 4	; 5
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
    112c:	87 b1       	in	r24, 0x07	; 7
    112e:	80 7f       	andi	r24, 0xF0	; 240
    1130:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
    1132:	2b 9a       	sbi	0x05, 3	; 5
    1134:	00 00       	nop
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
    1136:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
    1138:	2b 98       	cbi	0x05, 3	; 5
    113a:	00 00       	nop
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
    113c:	2b 9a       	sbi	0x05, 3	; 5
    113e:	00 00       	nop
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
    1140:	86 b1       	in	r24, 0x06	; 6
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
    1142:	92 95       	swap	r25
    1144:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
    1146:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
    1148:	2b 98       	cbi	0x05, 3	; 5
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
    114a:	89 2b       	or	r24, r25
    114c:	08 95       	ret

0000114e <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	e7 df       	rcall	.-50     	; 0x1120 <lcd_read>
    1152:	88 23       	and	r24, r24
    1154:	e4 f3       	brlt	.-8      	; 0x114e <lcd_waitbusy>
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <lcd_waitbusy+0xa>
    1158:	00 c0       	rjmp	.+0      	; 0x115a <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	e1 df       	rcall	.-62     	; 0x1120 <lcd_read>
    
}/* lcd_waitbusy */
    115e:	08 95       	ret

00001160 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    1160:	cf 93       	push	r28
    1162:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
    1164:	f4 df       	rcall	.-24     	; 0x114e <lcd_waitbusy>
    lcd_write(cmd,0);
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	8c 2f       	mov	r24, r28
    116a:	bd df       	rcall	.-134    	; 0x10e6 <lcd_write>
}
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	f6 df       	rcall	.-20     	; 0x1160 <lcd_command>
    1174:	08 95       	ret

00001176 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	f3 df       	rcall	.-26     	; 0x1160 <lcd_command>
    117a:	08 95       	ret

0000117c <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    117c:	cf 93       	push	r28
    117e:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    1180:	e6 df       	rcall	.-52     	; 0x114e <lcd_waitbusy>
    if (c=='\n')
    1182:	ca 30       	cpi	r28, 0x0A	; 10
    1184:	41 f4       	brne	.+16     	; 0x1196 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
    1186:	80 34       	cpi	r24, 0x40	; 64
    1188:	10 f4       	brcc	.+4      	; 0x118e <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
    118a:	80 e4       	ldi	r24, 0x40	; 64
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
    118e:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    1190:	80 58       	subi	r24, 0x80	; 128
    1192:	e6 df       	rcall	.-52     	; 0x1160 <lcd_command>
    1194:	03 c0       	rjmp	.+6      	; 0x119c <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	8c 2f       	mov	r24, r28
    119a:	a5 df       	rcall	.-182    	; 0x10e6 <lcd_write>
    }

}/* lcd_putc */
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
    11a4:	ec 01       	movw	r28, r24
    11a6:	21 96       	adiw	r28, 0x01	; 1
    11a8:	fc 01       	movw	r30, r24
    11aa:	80 81       	ld	r24, Z
    11ac:	88 23       	and	r24, r24
    11ae:	21 f0       	breq	.+8      	; 0x11b8 <lcd_puts+0x18>
        lcd_putc(c);
    11b0:	e5 df       	rcall	.-54     	; 0x117c <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
    11b2:	89 91       	ld	r24, Y+
    11b4:	81 11       	cpse	r24, r1
    11b6:	fc cf       	rjmp	.-8      	; 0x11b0 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    11be:	cf 93       	push	r28
    11c0:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
    11c2:	87 b1       	in	r24, 0x07	; 7
    11c4:	8f 60       	ori	r24, 0x0F	; 15
    11c6:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    11c8:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    11ca:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    11cc:	23 9a       	sbi	0x04, 3	; 4
    11ce:	8f e9       	ldi	r24, 0x9F	; 159
    11d0:	9f e0       	ldi	r25, 0x0F	; 15
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <lcd_init+0x14>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <lcd_init+0x1a>
    11d8:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
    11da:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
    11dc:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
    11de:	7f df       	rcall	.-258    	; 0x10de <toggle_e>
    11e0:	81 ee       	ldi	r24, 0xE1	; 225
    11e2:	94 e0       	ldi	r25, 0x04	; 4
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <lcd_init+0x26>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <lcd_init+0x2c>
    11ea:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
    11ec:	78 df       	rcall	.-272    	; 0x10de <toggle_e>
    11ee:	95 e1       	ldi	r25, 0x15	; 21
    11f0:	9a 95       	dec	r25
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <lcd_init+0x32>
    11f4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    11f6:	73 df       	rcall	.-282    	; 0x10de <toggle_e>
    11f8:	85 e1       	ldi	r24, 0x15	; 21
    11fa:	8a 95       	dec	r24
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <lcd_init+0x3c>
    11fe:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    1200:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
    1202:	6d df       	rcall	.-294    	; 0x10de <toggle_e>
    1204:	95 e1       	ldi	r25, 0x15	; 21
    1206:	9a 95       	dec	r25
    1208:	f1 f7       	brne	.-4      	; 0x1206 <lcd_init+0x48>
    120a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    120c:	88 e2       	ldi	r24, 0x28	; 40
    120e:	a8 df       	rcall	.-176    	; 0x1160 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	a6 df       	rcall	.-180    	; 0x1160 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
    1214:	ad df       	rcall	.-166    	; 0x1170 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1216:	86 e0       	ldi	r24, 0x06	; 6
    1218:	a3 df       	rcall	.-186    	; 0x1160 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    121a:	8c 2f       	mov	r24, r28
    121c:	a1 df       	rcall	.-190    	; 0x1160 <lcd_command>

}/* lcd_init */
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	8f 93       	push	r24
    122e:	9f 93       	push	r25
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
    unsigned char tmptail;
  
      
    if ( UART_TxHead != UART_TxTail) {
    1234:	90 91 a3 01 	lds	r25, 0x01A3
    1238:	80 91 a2 01 	lds	r24, 0x01A2
    123c:	98 17       	cp	r25, r24
    123e:	69 f0       	breq	.+26     	; 0x125a <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1240:	e0 91 a2 01 	lds	r30, 0x01A2
    1244:	ef 5f       	subi	r30, 0xFF	; 255
    1246:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1248:	e0 93 a2 01 	sts	0x01A2, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	ec 55       	subi	r30, 0x5C	; 92
    1250:	fe 4f       	sbci	r31, 0xFE	; 254
    1252:	80 81       	ld	r24, Z
    1254:	80 93 c6 00 	sts	0x00C6, r24
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    125a:	e1 ec       	ldi	r30, 0xC1	; 193
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8f 7d       	andi	r24, 0xDF	; 223
    1262:	80 83       	st	Z, r24
    }
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1276:	10 92 a3 01 	sts	0x01A3, r1
    UART_TxTail = 0;
    127a:	10 92 a2 01 	sts	0x01A2, r1
    UART_RxHead = 0;
    127e:	10 92 a1 01 	sts	0x01A1, r1
    UART_RxTail = 0;
    1282:	10 92 a0 01 	sts	0x01A0, r1
    UCSRC = (3<<UCSZ0);
    #endif 
      
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    1286:	99 23       	and	r25, r25
    1288:	24 f4       	brge	.+8      	; 0x1292 <uart_init+0x1c>
    {
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    128a:	22 e0       	ldi	r18, 0x02	; 2
    128c:	20 93 c0 00 	sts	0x00C0, r18
        baudrate &= ~0x8000;
    1290:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRR0H = (unsigned char)(baudrate>>8);
    1292:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    1296:	80 93 c4 00 	sts	0x00C4, r24
  
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);  
    129a:	88 e9       	ldi	r24, 0x98	; 152
    129c:	80 93 c1 00 	sts	0x00C1, r24
      
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    UCSR0C |= (3<<UCSZ00);	// 1 stop bit
    12a0:	e2 ec       	ldi	r30, 0xC2	; 194
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	86 60       	ori	r24, 0x06	; 6
    12a8:	80 83       	st	Z, r24
    12aa:	08 95       	ret

000012ac <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;
  
      
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    12ac:	20 91 a3 01 	lds	r18, 0x01A3
    12b0:	2f 5f       	subi	r18, 0xFF	; 255
    12b2:	2f 71       	andi	r18, 0x1F	; 31
      
    while ( tmphead == UART_TxTail ){
    12b4:	90 91 a2 01 	lds	r25, 0x01A2
    12b8:	29 17       	cp	r18, r25
    12ba:	e1 f3       	breq	.-8      	; 0x12b4 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
      
    UART_TxBuf[tmphead] = data;
    12bc:	e2 2f       	mov	r30, r18
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	ec 55       	subi	r30, 0x5C	; 92
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    12c6:	20 93 a3 01 	sts	0x01A3, r18
  
    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    12ca:	e1 ec       	ldi	r30, 0xC1	; 193
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 62       	ori	r24, 0x20	; 32
    12d2:	80 83       	st	Z, r24
    12d4:	08 95       	ret

000012d6 <strncmp_P>:
    12d6:	fb 01       	movw	r30, r22
    12d8:	dc 01       	movw	r26, r24
    12da:	41 50       	subi	r20, 0x01	; 1
    12dc:	50 40       	sbci	r21, 0x00	; 0
    12de:	30 f0       	brcs	.+12     	; 0x12ec <strncmp_P+0x16>
    12e0:	8d 91       	ld	r24, X+
    12e2:	05 90       	lpm	r0, Z+
    12e4:	80 19       	sub	r24, r0
    12e6:	19 f4       	brne	.+6      	; 0x12ee <strncmp_P+0x18>
    12e8:	00 20       	and	r0, r0
    12ea:	b9 f7       	brne	.-18     	; 0x12da <strncmp_P+0x4>
    12ec:	88 1b       	sub	r24, r24
    12ee:	99 0b       	sbc	r25, r25
    12f0:	08 95       	ret

000012f2 <_exit>:
    12f2:	f8 94       	cli

000012f4 <__stop_program>:
    12f4:	ff cf       	rjmp	.-2      	; 0x12f4 <__stop_program>
