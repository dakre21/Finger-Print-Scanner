
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000082e  000008c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800140  00800140  00000902  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001656  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000080a  00000000  00000000  00002705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b4  00000000  00000000  00002f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa9  00000000  00000000  000035fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  000040a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
   4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
   6:	33 c0       	rjmp	.+102    	; 0x6e <__bad_interrupt>
   8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__vector_5>
   c:	30 c0       	rjmp	.+96     	; 0x6e <__bad_interrupt>
   e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
  10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
  12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>
  14:	2c c0       	rjmp	.+88     	; 0x6e <__bad_interrupt>
  16:	2b c0       	rjmp	.+86     	; 0x6e <__bad_interrupt>
  18:	2a c0       	rjmp	.+84     	; 0x6e <__bad_interrupt>
  1a:	29 c0       	rjmp	.+82     	; 0x6e <__bad_interrupt>
  1c:	28 c0       	rjmp	.+80     	; 0x6e <__bad_interrupt>
  1e:	27 c0       	rjmp	.+78     	; 0x6e <__bad_interrupt>
  20:	26 c0       	rjmp	.+76     	; 0x6e <__bad_interrupt>
  22:	25 c0       	rjmp	.+74     	; 0x6e <__bad_interrupt>
  24:	c6 c1       	rjmp	.+908    	; 0x3b2 <__vector_18>
  26:	99 c3       	rjmp	.+1842   	; 0x75a <__vector_19>
  28:	22 c0       	rjmp	.+68     	; 0x6e <__bad_interrupt>
  2a:	21 c0       	rjmp	.+66     	; 0x6e <__bad_interrupt>
  2c:	20 c0       	rjmp	.+64     	; 0x6e <__bad_interrupt>
  2e:	1f c0       	rjmp	.+62     	; 0x6e <__bad_interrupt>
  30:	1e c0       	rjmp	.+60     	; 0x6e <__bad_interrupt>
  32:	1d c0       	rjmp	.+58     	; 0x6e <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	38 39       	cpi	r19, 0x98	; 152
  36:	38 39       	cpi	r19, 0x98	; 152

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf ef       	ldi	r28, 0xFF	; 255
  3e:	d4 e0       	ldi	r29, 0x04	; 4
  40:	de bf       	out	0x3e, r29	; 62
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	11 e0       	ldi	r17, 0x01	; 1
  46:	a0 e0       	ldi	r26, 0x00	; 0
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	ee e2       	ldi	r30, 0x2E	; 46
  4c:	f8 e0       	ldi	r31, 0x08	; 8
  4e:	02 c0       	rjmp	.+4      	; 0x54 <__do_copy_data+0x10>
  50:	05 90       	lpm	r0, Z+
  52:	0d 92       	st	X+, r0
  54:	a0 34       	cpi	r26, 0x40	; 64
  56:	b1 07       	cpc	r27, r17
  58:	d9 f7       	brne	.-10     	; 0x50 <__do_copy_data+0xc>

0000005a <__do_clear_bss>:
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	a0 e4       	ldi	r26, 0x40	; 64
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	01 c0       	rjmp	.+2      	; 0x64 <.do_clear_bss_start>

00000062 <.do_clear_bss_loop>:
  62:	1d 92       	st	X+, r1

00000064 <.do_clear_bss_start>:
  64:	a3 38       	cpi	r26, 0x83	; 131
  66:	b2 07       	cpc	r27, r18
  68:	e1 f7       	brne	.-8      	; 0x62 <.do_clear_bss_loop>
  6a:	14 d2       	rcall	.+1064   	; 0x494 <main>
  6c:	de c3       	rjmp	.+1980   	; 0x82a <_exit>

0000006e <__bad_interrupt>:
  6e:	c8 cf       	rjmp	.-112    	; 0x0 <__vectors>

00000070 <__vector_5>:
char check_bit;

const char pin[pin_length] PROGMEM = "8989";

// Interrupt for Keypad
ISR(PCINT2_vect){
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	2f 93       	push	r18
  7c:	3f 93       	push	r19
  7e:	4f 93       	push	r20
  80:	5f 93       	push	r21
  82:	6f 93       	push	r22
  84:	7f 93       	push	r23
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
	tmp2 = PORTD;
  92:	8b b1       	in	r24, 0x0b	; 11
	tmp2 &= ~(0x06);	// Clear PD2/PD3
  94:	89 7f       	andi	r24, 0xF9	; 249
  96:	80 93 70 01 	sts	0x0170, r24
	PORTD = tmp2;
  9a:	8b b9       	out	0x0b, r24	; 11
	tmp2 = PORTC;
  9c:	88 b1       	in	r24, 0x08	; 8
	tmp2 &= ~(0x16);
  9e:	89 7e       	andi	r24, 0xE9	; 233
  a0:	80 93 70 01 	sts	0x0170, r24
	PORTC = tmp2;	// Clear PC4
  a4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	80 e7       	ldi	r24, 0x70	; 112
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <__vector_5+0x3c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__vector_5+0x46>
  b6:	00 00       	nop
	
	_delay_ms(100);
	
	if((curr_state == Get_Pin)||(curr_state == Check_Pin)){
  b8:	80 91 46 01 	lds	r24, 0x0146
  bc:	90 91 47 01 	lds	r25, 0x0147
  c0:	02 97       	sbiw	r24, 0x02	; 2
  c2:	08 f0       	brcs	.+2      	; 0xc6 <__vector_5+0x56>
  c4:	65 c1       	rjmp	.+714    	; 0x390 <__vector_5+0x320>
		PORTC |= (1 << 5);	// Turn LED off -- Sets bit
  c6:	45 9a       	sbi	0x08, 5	; 8
		if(bit_is_clear(PIND,4)){
  c8:	4c 99       	sbic	0x09, 4	; 9
  ca:	4b c0       	rjmp	.+150    	; 0x162 <__vector_5+0xf2>
			//PORTD &= ~(1 << 0);
			PORTC |= (1 << 4);
  cc:	44 9a       	sbi	0x08, 4	; 8
			PORTD |= (1 << 2);
  ce:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	86 e9       	ldi	r24, 0x96	; 150
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <__vector_5+0x64>
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
  d8:	4c 99       	sbic	0x09, 4	; 9
  da:	10 c0       	rjmp	.+32     	; 0xfc <__vector_5+0x8c>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	fb d2       	rcall	.+1526   	; 0x6d8 <lcd_puts>
					flag++;
  e2:	80 91 40 01 	lds	r24, 0x0140
  e6:	90 91 41 01 	lds	r25, 0x0141
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 41 01 	sts	0x0141, r25
  f0:	80 93 40 01 	sts	0x0140, r24
					key = '1';
  f4:	81 e3       	ldi	r24, 0x31	; 49
  f6:	80 93 7d 01 	sts	0x017D, r24
  fa:	cc c0       	rjmp	.+408    	; 0x294 <__vector_5+0x224>
		
			}else{
		
			PORTD |= (1 << 3);
  fc:	5b 9a       	sbi	0x0b, 3	; 11
	
			PORTC &= ~(1 << 4);
  fe:	44 98       	cbi	0x08, 4	; 8
 100:	86 e9       	ldi	r24, 0x96	; 150
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__vector_5+0x94>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
 108:	4c 99       	sbic	0x09, 4	; 9
 10a:	10 c0       	rjmp	.+32     	; 0x12c <__vector_5+0xbc>

					//curr_userPin[flag] = key;
					lcd_puts("*");
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	e3 d2       	rcall	.+1478   	; 0x6d8 <lcd_puts>
					flag++;
 112:	80 91 40 01 	lds	r24, 0x0140
 116:	90 91 41 01 	lds	r25, 0x0141
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 41 01 	sts	0x0141, r25
 120:	80 93 40 01 	sts	0x0140, r24
					key = '2';
 124:	82 e3       	ldi	r24, 0x32	; 50
 126:	80 93 7d 01 	sts	0x017D, r24
 12a:	b4 c0       	rjmp	.+360    	; 0x294 <__vector_5+0x224>
		
			}else{
				
			PORTC |= (1 << 4);
 12c:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 12e:	5a 98       	cbi	0x0b, 2	; 11
 130:	86 e9       	ldi	r24, 0x96	; 150
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <__vector_5+0xc4>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
 138:	4c 99       	sbic	0x09, 4	; 9
 13a:	0f c0       	rjmp	.+30     	; 0x15a <__vector_5+0xea>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	cb d2       	rcall	.+1430   	; 0x6d8 <lcd_puts>
					flag++;
 142:	80 91 40 01 	lds	r24, 0x0140
 146:	90 91 41 01 	lds	r25, 0x0141
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	90 93 41 01 	sts	0x0141, r25
 150:	80 93 40 01 	sts	0x0140, r24
					key = '3';
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	80 93 7d 01 	sts	0x017D, r24
			}
			PORTD &= ~(1 << 3);
 15a:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 5);
 15c:	45 98       	cbi	0x08, 5	; 8
			PORTD &= ~(1 << 2);
 15e:	5a 98       	cbi	0x0b, 2	; 11
 160:	99 c0       	rjmp	.+306    	; 0x294 <__vector_5+0x224>
		
			}

		}		
	
	}else if(bit_is_clear(PIND,5)){
 162:	4d 99       	sbic	0x09, 5	; 9
 164:	4b c0       	rjmp	.+150    	; 0x1fc <__vector_5+0x18c>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 166:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 168:	5a 9a       	sbi	0x0b, 2	; 11
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <__vector_5+0xfe>
	_delay_loop_2(100);

	if(bit_is_clear(PIND,5)){
 172:	4d 99       	sbic	0x09, 5	; 9
 174:	10 c0       	rjmp	.+32     	; 0x196 <__vector_5+0x126>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	ae d2       	rcall	.+1372   	; 0x6d8 <lcd_puts>
		flag++;
 17c:	80 91 40 01 	lds	r24, 0x0140
 180:	90 91 41 01 	lds	r25, 0x0141
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 41 01 	sts	0x0141, r25
 18a:	80 93 40 01 	sts	0x0140, r24
		key = '4';
 18e:	84 e3       	ldi	r24, 0x34	; 52
 190:	80 93 7d 01 	sts	0x017D, r24
 194:	7f c0       	rjmp	.+254    	; 0x294 <__vector_5+0x224>
	
		}else{
	
		PORTD |= (1 << 3);
 196:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 198:	44 98       	cbi	0x08, 4	; 8
 19a:	86 e9       	ldi	r24, 0x96	; 150
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <__vector_5+0x12e>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,5)){
 1a2:	4d 99       	sbic	0x09, 5	; 9
 1a4:	10 c0       	rjmp	.+32     	; 0x1c6 <__vector_5+0x156>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	96 d2       	rcall	.+1324   	; 0x6d8 <lcd_puts>
			flag++;
 1ac:	80 91 40 01 	lds	r24, 0x0140
 1b0:	90 91 41 01 	lds	r25, 0x0141
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 41 01 	sts	0x0141, r25
 1ba:	80 93 40 01 	sts	0x0140, r24
			key = '5';
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	80 93 7d 01 	sts	0x017D, r24
 1c4:	67 c0       	rjmp	.+206    	; 0x294 <__vector_5+0x224>
		
			}else{
		
			PORTC |= (1 << 4);
 1c6:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 1c8:	5a 98       	cbi	0x0b, 2	; 11
 1ca:	86 e9       	ldi	r24, 0x96	; 150
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <__vector_5+0x15e>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,5)){
 1d2:	4d 99       	sbic	0x09, 5	; 9
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <__vector_5+0x184>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	7e d2       	rcall	.+1276   	; 0x6d8 <lcd_puts>
				flag++;
 1dc:	80 91 40 01 	lds	r24, 0x0140
 1e0:	90 91 41 01 	lds	r25, 0x0141
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	90 93 41 01 	sts	0x0141, r25
 1ea:	80 93 40 01 	sts	0x0140, r24
				key = '6';
 1ee:	86 e3       	ldi	r24, 0x36	; 54
 1f0:	80 93 7d 01 	sts	0x017D, r24
			}
			PORTD &= ~(1 << 3);
 1f4:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 1f6:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 1f8:	5a 98       	cbi	0x0b, 2	; 11
 1fa:	4c c0       	rjmp	.+152    	; 0x294 <__vector_5+0x224>
		
		}

	}

	}else if(bit_is_clear(PIND,6)){
 1fc:	4e 99       	sbic	0x09, 6	; 9
 1fe:	4a c0       	rjmp	.+148    	; 0x294 <__vector_5+0x224>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 200:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 202:	5a 9a       	sbi	0x0b, 2	; 11
 204:	86 e9       	ldi	r24, 0x96	; 150
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <__vector_5+0x198>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,6)){
 20c:	4e 99       	sbic	0x09, 6	; 9
 20e:	10 c0       	rjmp	.+32     	; 0x230 <__vector_5+0x1c0>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	61 d2       	rcall	.+1218   	; 0x6d8 <lcd_puts>
		flag++;
 216:	80 91 40 01 	lds	r24, 0x0140
 21a:	90 91 41 01 	lds	r25, 0x0141
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 41 01 	sts	0x0141, r25
 224:	80 93 40 01 	sts	0x0140, r24
		key = '7';
 228:	87 e3       	ldi	r24, 0x37	; 55
 22a:	80 93 7d 01 	sts	0x017D, r24
 22e:	32 c0       	rjmp	.+100    	; 0x294 <__vector_5+0x224>
	
		}else{
	
		PORTD |= (1 << 3);
 230:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 232:	44 98       	cbi	0x08, 4	; 8
 234:	86 e9       	ldi	r24, 0x96	; 150
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <__vector_5+0x1c8>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,6)){
 23c:	4e 99       	sbic	0x09, 6	; 9
 23e:	10 c0       	rjmp	.+32     	; 0x260 <__vector_5+0x1f0>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	49 d2       	rcall	.+1170   	; 0x6d8 <lcd_puts>
			flag++;
 246:	80 91 40 01 	lds	r24, 0x0140
 24a:	90 91 41 01 	lds	r25, 0x0141
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 41 01 	sts	0x0141, r25
 254:	80 93 40 01 	sts	0x0140, r24
			key = '8';
 258:	88 e3       	ldi	r24, 0x38	; 56
 25a:	80 93 7d 01 	sts	0x017D, r24
 25e:	1a c0       	rjmp	.+52     	; 0x294 <__vector_5+0x224>
		
			}else{
		
			PORTC |= (1 << 4);
 260:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 262:	5a 98       	cbi	0x0b, 2	; 11
 264:	86 e9       	ldi	r24, 0x96	; 150
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <__vector_5+0x1f8>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,6)){
 26c:	4e 99       	sbic	0x09, 6	; 9
 26e:	0f c0       	rjmp	.+30     	; 0x28e <__vector_5+0x21e>
				
				//curr_userPin[flag] = key;
				lcd_puts("*");
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	31 d2       	rcall	.+1122   	; 0x6d8 <lcd_puts>
				flag++;
 276:	80 91 40 01 	lds	r24, 0x0140
 27a:	90 91 41 01 	lds	r25, 0x0141
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 41 01 	sts	0x0141, r25
 284:	80 93 40 01 	sts	0x0140, r24
				key = '9';
 288:	89 e3       	ldi	r24, 0x39	; 57
 28a:	80 93 7d 01 	sts	0x017D, r24
			}
			PORTD &= ~(1 << 3);
 28e:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 290:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 292:	5a 98       	cbi	0x0b, 2	; 11

	}

	}

	if(bit_is_clear(PIND,7)){
 294:	4f 99       	sbic	0x09, 7	; 9
 296:	4a c0       	rjmp	.+148    	; 0x32c <__vector_5+0x2bc>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 298:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 29a:	5a 9a       	sbi	0x0b, 2	; 11
 29c:	86 e9       	ldi	r24, 0x96	; 150
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <__vector_5+0x230>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,7)){
 2a4:	4f 99       	sbic	0x09, 7	; 9
 2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <__vector_5+0x258>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	15 d2       	rcall	.+1066   	; 0x6d8 <lcd_puts>
		flag++;
 2ae:	80 91 40 01 	lds	r24, 0x0140
 2b2:	90 91 41 01 	lds	r25, 0x0141
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 41 01 	sts	0x0141, r25
 2bc:	80 93 40 01 	sts	0x0140, r24
		key = '*';
 2c0:	8a e2       	ldi	r24, 0x2A	; 42
 2c2:	80 93 7d 01 	sts	0x017D, r24
 2c6:	32 c0       	rjmp	.+100    	; 0x32c <__vector_5+0x2bc>
	
		}else{
	
		PORTD |= (1 << 3);
 2c8:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 2ca:	44 98       	cbi	0x08, 4	; 8
 2cc:	8a ef       	ldi	r24, 0xFA	; 250
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <__vector_5+0x260>
	
		_delay_loop_2(250);
	
		if(bit_is_clear(PIND,7)){
 2d4:	4f 99       	sbic	0x09, 7	; 9
 2d6:	10 c0       	rjmp	.+32     	; 0x2f8 <__vector_5+0x288>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	fd d1       	rcall	.+1018   	; 0x6d8 <lcd_puts>
			flag++;
 2de:	80 91 40 01 	lds	r24, 0x0140
 2e2:	90 91 41 01 	lds	r25, 0x0141
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	90 93 41 01 	sts	0x0141, r25
 2ec:	80 93 40 01 	sts	0x0140, r24
			key = '0';
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	80 93 7d 01 	sts	0x017D, r24
 2f6:	1a c0       	rjmp	.+52     	; 0x32c <__vector_5+0x2bc>
		
			}else{
		
			PORTC |= (1 << 4);
 2f8:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 2fa:	5a 98       	cbi	0x0b, 2	; 11
 2fc:	86 e9       	ldi	r24, 0x96	; 150
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <__vector_5+0x290>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,7)){
 304:	4f 99       	sbic	0x09, 7	; 9
 306:	0f c0       	rjmp	.+30     	; 0x326 <__vector_5+0x2b6>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	e5 d1       	rcall	.+970    	; 0x6d8 <lcd_puts>
				flag++;
 30e:	80 91 40 01 	lds	r24, 0x0140
 312:	90 91 41 01 	lds	r25, 0x0141
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	90 93 41 01 	sts	0x0141, r25
 31c:	80 93 40 01 	sts	0x0140, r24
				key = '#';
 320:	83 e2       	ldi	r24, 0x23	; 35
 322:	80 93 7d 01 	sts	0x017D, r24
			}
			PORTD &= ~(1 << 3);
 326:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 328:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 32a:	5a 98       	cbi	0x0b, 2	; 11
 32c:	86 e9       	ldi	r24, 0x96	; 150
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <__vector_5+0x2c0>

	}
	
	_delay_loop_2(150);
	
	if(key != ' '){
 334:	80 91 7d 01 	lds	r24, 0x017D
 338:	80 32       	cpi	r24, 0x20	; 32
 33a:	39 f0       	breq	.+14     	; 0x34a <__vector_5+0x2da>
		curr_userPin[flag] = key;
 33c:	e0 91 40 01 	lds	r30, 0x0140
 340:	f0 91 41 01 	lds	r31, 0x0141
 344:	e1 58       	subi	r30, 0x81	; 129
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	80 83       	st	Z, r24
		//flag++;
		//lcd_puts("*");
		//PORTC &= ~(1 << 5);
	}
	
	if(flag >= 4){
 34a:	80 91 40 01 	lds	r24, 0x0140
 34e:	90 91 41 01 	lds	r25, 0x0141
 352:	04 97       	sbiw	r24, 0x04	; 4
 354:	ec f0       	brlt	.+58     	; 0x390 <__vector_5+0x320>
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
 356:	ab d1       	rcall	.+854    	; 0x6ae <lcd_home>
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
			final_userPin[i-1] = key;
 358:	80 91 80 01 	lds	r24, 0x0180
 35c:	80 93 6c 01 	sts	0x016C, r24
 360:	80 91 81 01 	lds	r24, 0x0181
 364:	80 93 6d 01 	sts	0x016D, r24
 368:	80 91 82 01 	lds	r24, 0x0182
 36c:	80 93 6e 01 	sts	0x016E, r24
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
 370:	80 91 83 01 	lds	r24, 0x0183
			final_userPin[i-1] = key;
 374:	80 93 6f 01 	sts	0x016F, r24
 378:	80 93 7d 01 	sts	0x017D, r24
		}
	
		pin_event = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 43 01 	sts	0x0143, r25
 384:	80 93 42 01 	sts	0x0142, r24
		flag = 0;
 388:	10 92 41 01 	sts	0x0141, r1
 38c:	10 92 40 01 	sts	0x0140, r1
//		check_pin();
	}

}
}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	7f 91       	pop	r23
 39e:	6f 91       	pop	r22
 3a0:	5f 91       	pop	r21
 3a2:	4f 91       	pop	r20
 3a4:	3f 91       	pop	r19
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <__vector_18>:

//Data received on the serial port interrupt -- RX
ISR(USART_RX_vect){
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
	data = UDR0;
 3c0:	80 91 c6 00 	lds	r24, 0x00C6
 3c4:	80 93 7c 01 	sts	0x017C, r24
	PORTC &= ~(1 << 5);	// Turn LED on
 3c8:	45 98       	cbi	0x08, 5	; 8
	if(curr_state == Scan_Finger){
 3ca:	80 91 46 01 	lds	r24, 0x0146
 3ce:	90 91 47 01 	lds	r25, 0x0147
 3d2:	03 97       	sbiw	r24, 0x03	; 3
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <__vector_18+0x26>
		PORTC &= ~(1 << 5);	// Turn LED on
 3d6:	45 98       	cbi	0x08, 5	; 8
	}
}
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <uart_transmit>:
	uart_transmit(0x12);	// Low byte checksum
	uart_transmit(0x01);	// High byte checksum
}

void uart_transmit(unsigned char data){
	cli();
 3e6:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e8:	e7 ec       	ldi	r30, 0xC7	; 199
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <uart_transmit+0x6>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <uart_transmit+0xc>
 3f2:	00 00       	nop
	_delay_us(100);
	uart_putc(data);
 3f4:	f7 d1       	rcall	.+1006   	; 0x7e4 <uart_putc>
	sei();
 3f6:	78 94       	sei
 3f8:	08 95       	ret

000003fa <initialize_fps>:
	 }
}

void initialize_fps(){
	// Open connection 
	uart_transmit(0x55);	// Start code 1
 3fa:	85 e5       	ldi	r24, 0x55	; 85
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	f3 df       	rcall	.-26     	; 0x3e6 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 400:	8a ea       	ldi	r24, 0xAA	; 170
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	f0 df       	rcall	.-32     	; 0x3e6 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ed df       	rcall	.-38     	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	ea df       	rcall	.-44     	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 1
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	e7 df       	rcall	.-50     	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	e4 df       	rcall	.-56     	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	e1 df       	rcall	.-62     	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4	
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	de df       	rcall	.-68     	; 0x3e6 <uart_transmit>
	uart_transmit(0x01);	// Byte 1 of command
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	db df       	rcall	.-74     	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	d8 df       	rcall	.-80     	; 0x3e6 <uart_transmit>
	uart_transmit(0x01);	// Low byte checksum
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	d5 df       	rcall	.-86     	; 0x3e6 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	d2 df       	rcall	.-92     	; 0x3e6 <uart_transmit>
 442:	84 e6       	ldi	r24, 0x64	; 100
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <initialize_fps+0x4c>
	// Turn FPS LED on
	_delay_loop_2(100);
	uart_transmit(0x55);	// Start code 1
 44a:	85 e5       	ldi	r24, 0x55	; 85
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	cb df       	rcall	.-106    	; 0x3e6 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 450:	8a ea       	ldi	r24, 0xAA	; 170
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	c8 df       	rcall	.-112    	; 0x3e6 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	c5 df       	rcall	.-118    	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	c2 df       	rcall	.-124    	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 1
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	bf df       	rcall	.-130    	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	bc df       	rcall	.-136    	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	b9 df       	rcall	.-142    	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	b6 df       	rcall	.-148    	; 0x3e6 <uart_transmit>
	uart_transmit(0x12);	// Byte 1 of command
 47a:	82 e1       	ldi	r24, 0x12	; 18
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	b3 df       	rcall	.-154    	; 0x3e6 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	b0 df       	rcall	.-160    	; 0x3e6 <uart_transmit>
	uart_transmit(0x12);	// Low byte checksum
 486:	82 e1       	ldi	r24, 0x12	; 18
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	ad df       	rcall	.-166    	; 0x3e6 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	aa df       	rcall	.-172    	; 0x3e6 <uart_transmit>
 492:	08 95       	ret

00000494 <main>:
}

int main(void)            // Main Loop
{
	
	DDRB = 0b00101000;
 494:	88 e2       	ldi	r24, 0x28	; 40
 496:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b01111111;	// PC5 for keypad (before PD1)
 498:	8f e7       	ldi	r24, 0x7F	; 127
 49a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00001110;	// PD0 (RX) input & PD1 (TX) output for serial/ PD3 is now PD0 for keypad
 49c:	8e e0       	ldi	r24, 0x0E	; 14
 49e:	8a b9       	out	0x0a, r24	; 10
	//DDRD &= ~(1 << PD3);	// Set PD3 as input for mag card
	PORTC |= (1 << 5);	// Turn LED off -- Sets bit
 4a0:	45 9a       	sbi	0x08, 5	; 8
	//PORTB |= (1 << 1);
	PORTD = 0xF0;
 4a2:	c0 ef       	ldi	r28, 0xF0	; 240
 4a4:	cb b9       	out	0x0b, r28	; 11
	
	//USART_Init();
	uart_init(BAUDRATE);
 4a6:	83 e3       	ldi	r24, 0x33	; 51
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	81 d1       	rcall	.+770    	; 0x7ae <uart_init>
	// Enables pin change interrupt 
	tmp3 = PCICR;
 4ac:	e8 e6       	ldi	r30, 0x68	; 104
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
	tmp3 = 1 << (PCIE2) | 0 << (PCIE1) | 0 << (PCIE0);
 4b2:	84 e0       	ldi	r24, 0x04	; 4
 4b4:	80 93 7b 01 	sts	0x017B, r24
	PCICR = tmp3;
 4b8:	80 83       	st	Z, r24
	tmp3 = PCMSK2;
 4ba:	ed e6       	ldi	r30, 0x6D	; 109
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
	tmp3 = 1 << (PCINT23) | 1 << (PCINT22) | 1 << (PCINT21) | 1 << (PCINT20) | 0 << (PCINT19) | 0 << (PCINT18) | 0 << (PCINT17) | 0 << (PCINT16);
 4c0:	c0 93 7b 01 	sts	0x017B, r28
	PCMSK2 = tmp3;
 4c4:	c0 83       	st	Z, r28
	
	sei();                // Enables global interrupts
 4c6:	78 94       	sei

	
	lcd_init(LCD_DISP_ON);
 4c8:	8c e0       	ldi	r24, 0x0C	; 12
 4ca:	15 d1       	rcall	.+554    	; 0x6f6 <lcd_init>
					while(pin_event != 1){
						_delay_us(50);
						// Forever loop until keypad enters in 4 numbers for pin
					}
					pin_event = 0;
					curr_state = Check_Pin;
 4cc:	01 e0       	ldi	r16, 0x01	; 1
 4ce:	10 e0       	ldi	r17, 0x00	; 0
				curr_state = Check_Pin;
			 break;
			 
			 case Check_Pin:
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
					curr_state = Authorize;
 4d0:	68 94       	set
 4d2:	ee 24       	eor	r14, r14
 4d4:	e1 f8       	bld	r14, 1
 4d6:	f1 2c       	mov	r15, r1
				lcd_clrscr();
				lcd_puts("Access Granted");
				
				PORTC &= ~(1 << 5);	// Turn LED on for 5 seconds
				_delay_ms(1000);
				curr_state = Scan_Finger;
 4d8:	c3 e0       	ldi	r28, 0x03	; 3
 4da:	d0 e0       	ldi	r29, 0x00	; 0
	
	lcd_init(LCD_DISP_ON);
	
	 while(1)
	 {
		 switch(curr_state){
 4dc:	80 91 46 01 	lds	r24, 0x0146
 4e0:	90 91 47 01 	lds	r25, 0x0147
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	91 05       	cpc	r25, r1
 4e8:	51 f1       	breq	.+84     	; 0x53e <__stack+0x3f>
 4ea:	1c f4       	brge	.+6      	; 0x4f2 <main+0x5e>
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	51 f0       	breq	.+20     	; 0x504 <__stack+0x5>
 4f0:	f9 cf       	rjmp	.-14     	; 0x4e4 <main+0x50>
 4f2:	82 30       	cpi	r24, 0x02	; 2
 4f4:	91 05       	cpc	r25, r1
 4f6:	09 f4       	brne	.+2      	; 0x4fa <main+0x66>
 4f8:	5a c0       	rjmp	.+180    	; 0x5ae <__stack+0xaf>
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	91 05       	cpc	r25, r1
 4fe:	09 f4       	brne	.+2      	; 0x502 <__stack+0x3>
 500:	6a c0       	rjmp	.+212    	; 0x5d6 <__stack+0xd7>
 502:	f0 cf       	rjmp	.-32     	; 0x4e4 <main+0x50>
			 
			 case Get_Pin:
				lcd_clrscr();
 504:	d1 d0       	rcall	.+418    	; 0x6a8 <lcd_clrscr>
				//lcd_puts("Print Valid ");
				//lcd_putc('\n');
				lcd_puts("Enter PIN: ");
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	e6 d0       	rcall	.+460    	; 0x6d8 <lcd_puts>
				while(pin_event != 1){
 50c:	80 91 42 01 	lds	r24, 0x0142
 510:	90 91 43 01 	lds	r25, 0x0143
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	51 f0       	breq	.+20     	; 0x52c <__stack+0x2d>
 518:	25 e8       	ldi	r18, 0x85	; 133
 51a:	2a 95       	dec	r18
 51c:	f1 f7       	brne	.-4      	; 0x51a <__stack+0x1b>
 51e:	00 00       	nop
 520:	80 91 42 01 	lds	r24, 0x0142
 524:	90 91 43 01 	lds	r25, 0x0143
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	b1 f7       	brne	.-20     	; 0x518 <__stack+0x19>
					_delay_us(50);
					 // Forever loop until keypad enters in 4 numbers for pin
			    }   
				pin_event = 0;
 52c:	10 92 43 01 	sts	0x0143, r1
 530:	10 92 42 01 	sts	0x0142, r1
				curr_state = Check_Pin;
 534:	10 93 47 01 	sts	0x0147, r17
 538:	00 93 46 01 	sts	0x0146, r16
			 break;
 53c:	cf cf       	rjmp	.-98     	; 0x4dc <main+0x48>
			 
			 case Check_Pin:
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
 53e:	44 e0       	ldi	r20, 0x04	; 4
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	64 e3       	ldi	r22, 0x34	; 52
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	8c e6       	ldi	r24, 0x6C	; 108
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	61 d1       	rcall	.+706    	; 0x80e <strncmp_P>
 54c:	89 2b       	or	r24, r25
 54e:	29 f4       	brne	.+10     	; 0x55a <__stack+0x5b>
					curr_state = Authorize;
 550:	f0 92 47 01 	sts	0x0147, r15
 554:	e0 92 46 01 	sts	0x0146, r14
 558:	c1 cf       	rjmp	.-126    	; 0x4dc <main+0x48>
				}else{
					lcd_clrscr();
 55a:	a6 d0       	rcall	.+332    	; 0x6a8 <lcd_clrscr>
					lcd_puts("Pin invalid");
 55c:	8e e0       	ldi	r24, 0x0E	; 14
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	bb d0       	rcall	.+374    	; 0x6d8 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	98 e0       	ldi	r25, 0x08	; 8
 566:	2d e3       	ldi	r18, 0x3D	; 61
 568:	81 50       	subi	r24, 0x01	; 1
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	20 40       	sbci	r18, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <__stack+0x69>
 570:	00 c0       	rjmp	.+0      	; 0x572 <__stack+0x73>
 572:	00 00       	nop
					_delay_ms(2500);
					lcd_clrscr();
 574:	99 d0       	rcall	.+306    	; 0x6a8 <lcd_clrscr>
					lcd_puts("Enter PIN:");
 576:	8a e1       	ldi	r24, 0x1A	; 26
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	ae d0       	rcall	.+348    	; 0x6d8 <lcd_puts>
					while(pin_event != 1){
 57c:	80 91 42 01 	lds	r24, 0x0142
 580:	90 91 43 01 	lds	r25, 0x0143
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	51 f0       	breq	.+20     	; 0x59c <__stack+0x9d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 588:	85 e8       	ldi	r24, 0x85	; 133
 58a:	8a 95       	dec	r24
 58c:	f1 f7       	brne	.-4      	; 0x58a <__stack+0x8b>
 58e:	00 00       	nop
 590:	80 91 42 01 	lds	r24, 0x0142
 594:	90 91 43 01 	lds	r25, 0x0143
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	b1 f7       	brne	.-20     	; 0x588 <__stack+0x89>
						_delay_us(50);
						// Forever loop until keypad enters in 4 numbers for pin
					}
					pin_event = 0;
 59c:	10 92 43 01 	sts	0x0143, r1
 5a0:	10 92 42 01 	sts	0x0142, r1
					curr_state = Check_Pin;
 5a4:	10 93 47 01 	sts	0x0147, r17
 5a8:	00 93 46 01 	sts	0x0146, r16
 5ac:	97 cf       	rjmp	.-210    	; 0x4dc <main+0x48>
				}
				
			 break;
			 
			 case Authorize:
				lcd_clrscr();
 5ae:	7c d0       	rcall	.+248    	; 0x6a8 <lcd_clrscr>
				lcd_puts("Access Granted");
 5b0:	85 e2       	ldi	r24, 0x25	; 37
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	91 d0       	rcall	.+290    	; 0x6d8 <lcd_puts>
				
				PORTC &= ~(1 << 5);	// Turn LED on for 5 seconds
 5b6:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	29 e6       	ldi	r18, 0x69	; 105
 5bc:	88 e1       	ldi	r24, 0x18	; 24
 5be:	91 50       	subi	r25, 0x01	; 1
 5c0:	20 40       	sbci	r18, 0x00	; 0
 5c2:	80 40       	sbci	r24, 0x00	; 0
 5c4:	e1 f7       	brne	.-8      	; 0x5be <__stack+0xbf>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <__stack+0xc9>
 5c8:	00 00       	nop
				_delay_ms(1000);
				curr_state = Scan_Finger;
 5ca:	d0 93 47 01 	sts	0x0147, r29
 5ce:	c0 93 46 01 	sts	0x0146, r28
				PORTC |= (1 << 5);	// Turn LED off
 5d2:	45 9a       	sbi	0x08, 5	; 8
			
			  break;
 5d4:	83 cf       	rjmp	.-250    	; 0x4dc <main+0x48>
			  
			case Scan_Finger:
			  initialize_fps();
 5d6:	11 df       	rcall	.-478    	; 0x3fa <initialize_fps>
			  lcd_clrscr();	// Initialize LCD with text
 5d8:	67 d0       	rcall	.+206    	; 0x6a8 <lcd_clrscr>
			  lcd_puts("Scan Finger");
 5da:	84 e3       	ldi	r24, 0x34	; 52
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	7c d0       	rcall	.+248    	; 0x6d8 <lcd_puts>
 5e0:	9f ef       	ldi	r25, 0xFF	; 255
 5e2:	28 e0       	ldi	r18, 0x08	; 8
 5e4:	8d e3       	ldi	r24, 0x3D	; 61
 5e6:	91 50       	subi	r25, 0x01	; 1
 5e8:	20 40       	sbci	r18, 0x00	; 0
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <__stack+0xe7>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <__stack+0xf1>
 5f0:	00 00       	nop
			  _delay_ms(2500);
			  if(finger_event == 0){
 5f2:	80 91 44 01 	lds	r24, 0x0144
 5f6:	90 91 45 01 	lds	r25, 0x0145
 5fa:	89 2b       	or	r24, r25
 5fc:	29 f4       	brne	.+10     	; 0x608 <__stack+0x109>
				  curr_state = Scan_Finger;	// No card swipe
 5fe:	d0 93 47 01 	sts	0x0147, r29
 602:	c0 93 46 01 	sts	0x0146, r28
 606:	6a cf       	rjmp	.-300    	; 0x4dc <main+0x48>
				  }else{
				  curr_state = Validate_User;
 608:	84 e0       	ldi	r24, 0x04	; 4
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	90 93 47 01 	sts	0x0147, r25
 610:	80 93 46 01 	sts	0x0146, r24
 614:	63 cf       	rjmp	.-314    	; 0x4dc <main+0x48>

00000616 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 616:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 618:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 61a:	2b 98       	cbi	0x05, 3	; 5
 61c:	08 95       	ret

0000061e <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 624:	66 23       	and	r22, r22
 626:	11 f0       	breq	.+4      	; 0x62c <lcd_write+0xe>
       lcd_rs_high();
 628:	2d 9a       	sbi	0x05, 5	; 5
 62a:	01 c0       	rjmp	.+2      	; 0x62e <lcd_write+0x10>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 62c:	2d 98       	cbi	0x05, 5	; 5
    }
    lcd_rw_low();    /* RW=0  write mode      */
 62e:	2c 98       	cbi	0x05, 4	; 5

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 630:	87 b1       	in	r24, 0x07	; 7
 632:	8f 60       	ori	r24, 0x0F	; 15
 634:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 636:	c8 b1       	in	r28, 0x08	; 8
 638:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 63a:	8d 2f       	mov	r24, r29
 63c:	82 95       	swap	r24
 63e:	8f 70       	andi	r24, 0x0F	; 15
 640:	8c 2b       	or	r24, r28
 642:	88 b9       	out	0x08, r24	; 8
        lcd_e_toggle();
 644:	e8 df       	rcall	.-48     	; 0x616 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 646:	df 70       	andi	r29, 0x0F	; 15
 648:	dc 2b       	or	r29, r28
 64a:	d8 b9       	out	0x08, r29	; 8
        lcd_e_toggle();
 64c:	e4 df       	rcall	.-56     	; 0x616 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 64e:	cf 60       	ori	r28, 0x0F	; 15
 650:	c8 b9       	out	0x08, r28	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 658:	88 23       	and	r24, r24
 65a:	11 f0       	breq	.+4      	; 0x660 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 65c:	2d 9a       	sbi	0x05, 5	; 5
 65e:	01 c0       	rjmp	.+2      	; 0x662 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 660:	2d 98       	cbi	0x05, 5	; 5
    lcd_rw_high();                           /* RW=1  read mode      */
 662:	2c 9a       	sbi	0x05, 4	; 5
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 664:	87 b1       	in	r24, 0x07	; 7
 666:	80 7f       	andi	r24, 0xF0	; 240
 668:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
 66a:	2b 9a       	sbi	0x05, 3	; 5
 66c:	00 00       	nop
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 66e:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
 670:	2b 98       	cbi	0x05, 3	; 5
 672:	00 00       	nop
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
 674:	2b 9a       	sbi	0x05, 3	; 5
 676:	00 00       	nop
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 678:	86 b1       	in	r24, 0x06	; 6
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 67a:	92 95       	swap	r25
 67c:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 67e:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
 680:	2b 98       	cbi	0x05, 3	; 5
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 682:	89 2b       	or	r24, r25
 684:	08 95       	ret

00000686 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	e7 df       	rcall	.-50     	; 0x658 <lcd_read>
 68a:	88 23       	and	r24, r24
 68c:	e4 f3       	brlt	.-8      	; 0x686 <lcd_waitbusy>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <lcd_waitbusy+0xa>
 690:	00 c0       	rjmp	.+0      	; 0x692 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	e1 df       	rcall	.-62     	; 0x658 <lcd_read>
    
}/* lcd_waitbusy */
 696:	08 95       	ret

00000698 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 698:	cf 93       	push	r28
 69a:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 69c:	f4 df       	rcall	.-24     	; 0x686 <lcd_waitbusy>
    lcd_write(cmd,0);
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	8c 2f       	mov	r24, r28
 6a2:	bd df       	rcall	.-134    	; 0x61e <lcd_write>
}
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	f6 df       	rcall	.-20     	; 0x698 <lcd_command>
 6ac:	08 95       	ret

000006ae <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	f3 df       	rcall	.-26     	; 0x698 <lcd_command>
 6b2:	08 95       	ret

000006b4 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 6b4:	cf 93       	push	r28
 6b6:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 6b8:	e6 df       	rcall	.-52     	; 0x686 <lcd_waitbusy>
    if (c=='\n')
 6ba:	ca 30       	cpi	r28, 0x0A	; 10
 6bc:	41 f4       	brne	.+16     	; 0x6ce <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 6be:	80 34       	cpi	r24, 0x40	; 64
 6c0:	10 f4       	brcc	.+4      	; 0x6c6 <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
 6c2:	80 e4       	ldi	r24, 0x40	; 64
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
 6c6:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 6c8:	80 58       	subi	r24, 0x80	; 128
 6ca:	e6 df       	rcall	.-52     	; 0x698 <lcd_command>
 6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	8c 2f       	mov	r24, r28
 6d2:	a5 df       	rcall	.-182    	; 0x61e <lcd_write>
    }

}/* lcd_putc */
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 6dc:	ec 01       	movw	r28, r24
 6de:	21 96       	adiw	r28, 0x01	; 1
 6e0:	fc 01       	movw	r30, r24
 6e2:	80 81       	ld	r24, Z
 6e4:	88 23       	and	r24, r24
 6e6:	21 f0       	breq	.+8      	; 0x6f0 <lcd_puts+0x18>
        lcd_putc(c);
 6e8:	e5 df       	rcall	.-54     	; 0x6b4 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 6ea:	89 91       	ld	r24, Y+
 6ec:	81 11       	cpse	r24, r1
 6ee:	fc cf       	rjmp	.-8      	; 0x6e8 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	08 95       	ret

000006f6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 6f6:	cf 93       	push	r28
 6f8:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 6fa:	87 b1       	in	r24, 0x07	; 7
 6fc:	8f 60       	ori	r24, 0x0F	; 15
 6fe:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 700:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 702:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 704:	23 9a       	sbi	0x04, 3	; 4
 706:	8f e9       	ldi	r24, 0x9F	; 159
 708:	9f e0       	ldi	r25, 0x0F	; 15
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	f1 f7       	brne	.-4      	; 0x70a <lcd_init+0x14>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <lcd_init+0x1a>
 710:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 712:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 714:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
 716:	7f df       	rcall	.-258    	; 0x616 <toggle_e>
 718:	81 ee       	ldi	r24, 0xE1	; 225
 71a:	94 e0       	ldi	r25, 0x04	; 4
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <lcd_init+0x26>
 720:	00 c0       	rjmp	.+0      	; 0x722 <lcd_init+0x2c>
 722:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 724:	78 df       	rcall	.-272    	; 0x616 <toggle_e>
 726:	95 e1       	ldi	r25, 0x15	; 21
 728:	9a 95       	dec	r25
 72a:	f1 f7       	brne	.-4      	; 0x728 <lcd_init+0x32>
 72c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 72e:	73 df       	rcall	.-282    	; 0x616 <toggle_e>
 730:	85 e1       	ldi	r24, 0x15	; 21
 732:	8a 95       	dec	r24
 734:	f1 f7       	brne	.-4      	; 0x732 <lcd_init+0x3c>
 736:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 738:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
 73a:	6d df       	rcall	.-294    	; 0x616 <toggle_e>
 73c:	95 e1       	ldi	r25, 0x15	; 21
 73e:	9a 95       	dec	r25
 740:	f1 f7       	brne	.-4      	; 0x73e <lcd_init+0x48>
 742:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 744:	88 e2       	ldi	r24, 0x28	; 40
 746:	a8 df       	rcall	.-176    	; 0x698 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 748:	88 e0       	ldi	r24, 0x08	; 8
 74a:	a6 df       	rcall	.-180    	; 0x698 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 74c:	ad df       	rcall	.-166    	; 0x6a8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 74e:	86 e0       	ldi	r24, 0x06	; 6
 750:	a3 df       	rcall	.-186    	; 0x698 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 752:	8c 2f       	mov	r24, r28
 754:	a1 df       	rcall	.-190    	; 0x698 <lcd_command>

}/* lcd_init */
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	8f 93       	push	r24
 766:	9f 93       	push	r25
 768:	ef 93       	push	r30
 76a:	ff 93       	push	r31
    unsigned char tmptail;
  
      
    if ( UART_TxHead != UART_TxTail) {
 76c:	90 91 4b 01 	lds	r25, 0x014B
 770:	80 91 4a 01 	lds	r24, 0x014A
 774:	98 17       	cp	r25, r24
 776:	69 f0       	breq	.+26     	; 0x792 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 778:	e0 91 4a 01 	lds	r30, 0x014A
 77c:	ef 5f       	subi	r30, 0xFF	; 255
 77e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 780:	e0 93 4a 01 	sts	0x014A, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	e4 5b       	subi	r30, 0xB4	; 180
 788:	fe 4f       	sbci	r31, 0xFE	; 254
 78a:	80 81       	ld	r24, Z
 78c:	80 93 c6 00 	sts	0x00C6, r24
 790:	05 c0       	rjmp	.+10     	; 0x79c <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 792:	e1 ec       	ldi	r30, 0xC1	; 193
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	8f 7d       	andi	r24, 0xDF	; 223
 79a:	80 83       	st	Z, r24
    }
}
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	9f 91       	pop	r25
 7a2:	8f 91       	pop	r24
 7a4:	0f 90       	pop	r0
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	0f 90       	pop	r0
 7aa:	1f 90       	pop	r1
 7ac:	18 95       	reti

000007ae <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 7ae:	10 92 4b 01 	sts	0x014B, r1
    UART_TxTail = 0;
 7b2:	10 92 4a 01 	sts	0x014A, r1
    UART_RxHead = 0;
 7b6:	10 92 49 01 	sts	0x0149, r1
    UART_RxTail = 0;
 7ba:	10 92 48 01 	sts	0x0148, r1
    UCSRC = (3<<UCSZ0);
    #endif 
      
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 7be:	99 23       	and	r25, r25
 7c0:	24 f4       	brge	.+8      	; 0x7ca <uart_init+0x1c>
    {
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 7c2:	22 e0       	ldi	r18, 0x02	; 2
 7c4:	20 93 c0 00 	sts	0x00C0, r18
        baudrate &= ~0x8000;
 7c8:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRR0H = (unsigned char)(baudrate>>8);
 7ca:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 7ce:	80 93 c4 00 	sts	0x00C4, r24
  
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);  
 7d2:	88 e9       	ldi	r24, 0x98	; 152
 7d4:	80 93 c1 00 	sts	0x00C1, r24
      
    /* Set frame format: asynchronous, 8data, no parity, 2stop bit */
    UCSR0C |= (3<<UCSZ00)|(1<<USBS0);
 7d8:	e2 ec       	ldi	r30, 0xC2	; 194
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	8e 60       	ori	r24, 0x0E	; 14
 7e0:	80 83       	st	Z, r24
 7e2:	08 95       	ret

000007e4 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;
  
      
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 7e4:	20 91 4b 01 	lds	r18, 0x014B
 7e8:	2f 5f       	subi	r18, 0xFF	; 255
 7ea:	2f 71       	andi	r18, 0x1F	; 31
      
    while ( tmphead == UART_TxTail ){
 7ec:	90 91 4a 01 	lds	r25, 0x014A
 7f0:	29 17       	cp	r18, r25
 7f2:	e1 f3       	breq	.-8      	; 0x7ec <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
      
    UART_TxBuf[tmphead] = data;
 7f4:	e2 2f       	mov	r30, r18
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	e4 5b       	subi	r30, 0xB4	; 180
 7fa:	fe 4f       	sbci	r31, 0xFE	; 254
 7fc:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 7fe:	20 93 4b 01 	sts	0x014B, r18
  
    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 802:	e1 ec       	ldi	r30, 0xC1	; 193
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	80 62       	ori	r24, 0x20	; 32
 80a:	80 83       	st	Z, r24
 80c:	08 95       	ret

0000080e <strncmp_P>:
 80e:	fb 01       	movw	r30, r22
 810:	dc 01       	movw	r26, r24
 812:	41 50       	subi	r20, 0x01	; 1
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	30 f0       	brcs	.+12     	; 0x824 <strncmp_P+0x16>
 818:	8d 91       	ld	r24, X+
 81a:	05 90       	lpm	r0, Z+
 81c:	80 19       	sub	r24, r0
 81e:	19 f4       	brne	.+6      	; 0x826 <strncmp_P+0x18>
 820:	00 20       	and	r0, r0
 822:	b9 f7       	brne	.-18     	; 0x812 <strncmp_P+0x4>
 824:	88 1b       	sub	r24, r24
 826:	99 0b       	sbc	r25, r25
 828:	08 95       	ret

0000082a <_exit>:
 82a:	f8 94       	cli

0000082c <__stop_program>:
 82c:	ff cf       	rjmp	.-2      	; 0x82c <__stop_program>
