
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000986  00000a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800168  00800168  00000a82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018e1  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000882  00000000  00000000  00002af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f8  00000000  00000000  00003378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  00003670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c7e  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
   4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
   6:	33 c0       	rjmp	.+102    	; 0x6e <__bad_interrupt>
   8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__vector_5>
   c:	30 c0       	rjmp	.+96     	; 0x6e <__bad_interrupt>
   e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
  10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
  12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>
  14:	2c c0       	rjmp	.+88     	; 0x6e <__bad_interrupt>
  16:	2b c0       	rjmp	.+86     	; 0x6e <__bad_interrupt>
  18:	2a c0       	rjmp	.+84     	; 0x6e <__bad_interrupt>
  1a:	29 c0       	rjmp	.+82     	; 0x6e <__bad_interrupt>
  1c:	28 c0       	rjmp	.+80     	; 0x6e <__bad_interrupt>
  1e:	27 c0       	rjmp	.+78     	; 0x6e <__bad_interrupt>
  20:	26 c0       	rjmp	.+76     	; 0x6e <__bad_interrupt>
  22:	25 c0       	rjmp	.+74     	; 0x6e <__bad_interrupt>
  24:	cf c1       	rjmp	.+926    	; 0x3c4 <__vector_18>
  26:	45 c4       	rjmp	.+2186   	; 0x8b2 <__vector_19>
  28:	22 c0       	rjmp	.+68     	; 0x6e <__bad_interrupt>
  2a:	21 c0       	rjmp	.+66     	; 0x6e <__bad_interrupt>
  2c:	20 c0       	rjmp	.+64     	; 0x6e <__bad_interrupt>
  2e:	1f c0       	rjmp	.+62     	; 0x6e <__bad_interrupt>
  30:	1e c0       	rjmp	.+60     	; 0x6e <__bad_interrupt>
  32:	1d c0       	rjmp	.+58     	; 0x6e <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	38 39       	cpi	r19, 0x98	; 152
  36:	38 39       	cpi	r19, 0x98	; 152

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf ef       	ldi	r28, 0xFF	; 255
  3e:	d4 e0       	ldi	r29, 0x04	; 4
  40:	de bf       	out	0x3e, r29	; 62
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	11 e0       	ldi	r17, 0x01	; 1
  46:	a0 e0       	ldi	r26, 0x00	; 0
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	e6 e8       	ldi	r30, 0x86	; 134
  4c:	f9 e0       	ldi	r31, 0x09	; 9
  4e:	02 c0       	rjmp	.+4      	; 0x54 <__do_copy_data+0x10>
  50:	05 90       	lpm	r0, Z+
  52:	0d 92       	st	X+, r0
  54:	a8 36       	cpi	r26, 0x68	; 104
  56:	b1 07       	cpc	r27, r17
  58:	d9 f7       	brne	.-10     	; 0x50 <__do_copy_data+0xc>

0000005a <__do_clear_bss>:
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	a8 e6       	ldi	r26, 0x68	; 104
  5e:	b1 e0       	ldi	r27, 0x01	; 1
  60:	01 c0       	rjmp	.+2      	; 0x64 <.do_clear_bss_start>

00000062 <.do_clear_bss_loop>:
  62:	1d 92       	st	X+, r1

00000064 <.do_clear_bss_start>:
  64:	a3 3a       	cpi	r26, 0xA3	; 163
  66:	b2 07       	cpc	r27, r18
  68:	e1 f7       	brne	.-8      	; 0x62 <.do_clear_bss_loop>
  6a:	74 d2       	rcall	.+1256   	; 0x554 <main>
  6c:	8a c4       	rjmp	.+2324   	; 0x982 <_exit>

0000006e <__bad_interrupt>:
  6e:	c8 cf       	rjmp	.-112    	; 0x0 <__vectors>

00000070 <__vector_5>:


const char pin[pin_length] PROGMEM = "8989";

// Interrupt for Keypad
ISR(PCINT2_vect){
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	2f 93       	push	r18
  7c:	3f 93       	push	r19
  7e:	4f 93       	push	r20
  80:	5f 93       	push	r21
  82:	6f 93       	push	r22
  84:	7f 93       	push	r23
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
	tmp2 = PORTD;
  92:	8b b1       	in	r24, 0x0b	; 11
	tmp2 &= ~(0x06);	// Clear PD2/PD3
  94:	89 7f       	andi	r24, 0xF9	; 249
  96:	80 93 9a 01 	sts	0x019A, r24
	PORTD = tmp2;
  9a:	8b b9       	out	0x0b, r24	; 11
	tmp2 = PORTC;
  9c:	88 b1       	in	r24, 0x08	; 8
	tmp2 &= ~(0x16);
  9e:	89 7e       	andi	r24, 0xE9	; 233
  a0:	80 93 9a 01 	sts	0x019A, r24
	PORTC = tmp2;	// Clear PC4
  a4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	80 e7       	ldi	r24, 0x70	; 112
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <__vector_5+0x3c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__vector_5+0x46>
  b6:	00 00       	nop
	
	_delay_ms(100);
	
	if((curr_state == Get_Pin)||(curr_state == Check_Pin)||(curr_state == Scan_Finger)){
  b8:	80 91 70 01 	lds	r24, 0x0170
  bc:	90 91 71 01 	lds	r25, 0x0171
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	91 05       	cpc	r25, r1
  c4:	18 f0       	brcs	.+6      	; 0xcc <__vector_5+0x5c>
  c6:	03 97       	sbiw	r24, 0x03	; 3
  c8:	09 f0       	breq	.+2      	; 0xcc <__vector_5+0x5c>
  ca:	6b c1       	rjmp	.+726    	; 0x3a2 <__vector_5+0x332>
		PORTC |= (1 << 5);	// Turn LED off -- Sets bit
  cc:	45 9a       	sbi	0x08, 5	; 8
		if(bit_is_clear(PIND,4)){
  ce:	4c 99       	sbic	0x09, 4	; 9
  d0:	4b c0       	rjmp	.+150    	; 0x168 <__vector_5+0xf8>
			//PORTD &= ~(1 << 0);
			PORTC |= (1 << 4);
  d2:	44 9a       	sbi	0x08, 4	; 8
			PORTD |= (1 << 2);
  d4:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d6:	86 e9       	ldi	r24, 0x96	; 150
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <__vector_5+0x6a>
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
  de:	4c 99       	sbic	0x09, 4	; 9
  e0:	10 c0       	rjmp	.+32     	; 0x102 <__vector_5+0x92>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	a4 d3       	rcall	.+1864   	; 0x830 <lcd_puts>
					flag++;
  e8:	80 91 6a 01 	lds	r24, 0x016A
  ec:	90 91 6b 01 	lds	r25, 0x016B
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 6b 01 	sts	0x016B, r25
  f6:	80 93 6a 01 	sts	0x016A, r24
					key = '1';
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	80 93 9d 01 	sts	0x019D, r24
 100:	cc c0       	rjmp	.+408    	; 0x29a <__vector_5+0x22a>
		
			}else{
		
			PORTD |= (1 << 3);
 102:	5b 9a       	sbi	0x0b, 3	; 11
	
			PORTC &= ~(1 << 4);
 104:	44 98       	cbi	0x08, 4	; 8
 106:	86 e9       	ldi	r24, 0x96	; 150
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <__vector_5+0x9a>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
 10e:	4c 99       	sbic	0x09, 4	; 9
 110:	10 c0       	rjmp	.+32     	; 0x132 <__vector_5+0xc2>

					//curr_userPin[flag] = key;
					lcd_puts("*");
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	8c d3       	rcall	.+1816   	; 0x830 <lcd_puts>
					flag++;
 118:	80 91 6a 01 	lds	r24, 0x016A
 11c:	90 91 6b 01 	lds	r25, 0x016B
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 6b 01 	sts	0x016B, r25
 126:	80 93 6a 01 	sts	0x016A, r24
					key = '2';
 12a:	82 e3       	ldi	r24, 0x32	; 50
 12c:	80 93 9d 01 	sts	0x019D, r24
 130:	b4 c0       	rjmp	.+360    	; 0x29a <__vector_5+0x22a>
		
			}else{
				
			PORTC |= (1 << 4);
 132:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 134:	5a 98       	cbi	0x0b, 2	; 11
 136:	86 e9       	ldi	r24, 0x96	; 150
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <__vector_5+0xca>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,4)){
 13e:	4c 99       	sbic	0x09, 4	; 9
 140:	0f c0       	rjmp	.+30     	; 0x160 <__vector_5+0xf0>
	
					//curr_userPin[flag] = key;
					lcd_puts("*");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	74 d3       	rcall	.+1768   	; 0x830 <lcd_puts>
					flag++;
 148:	80 91 6a 01 	lds	r24, 0x016A
 14c:	90 91 6b 01 	lds	r25, 0x016B
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 6b 01 	sts	0x016B, r25
 156:	80 93 6a 01 	sts	0x016A, r24
					key = '3';
 15a:	83 e3       	ldi	r24, 0x33	; 51
 15c:	80 93 9d 01 	sts	0x019D, r24
			}
			PORTD &= ~(1 << 3);
 160:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 5);
 162:	45 98       	cbi	0x08, 5	; 8
			PORTD &= ~(1 << 2);
 164:	5a 98       	cbi	0x0b, 2	; 11
 166:	99 c0       	rjmp	.+306    	; 0x29a <__vector_5+0x22a>
		
			}

		}		
	
	}else if(bit_is_clear(PIND,5)){
 168:	4d 99       	sbic	0x09, 5	; 9
 16a:	4b c0       	rjmp	.+150    	; 0x202 <__vector_5+0x192>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 16c:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 16e:	5a 9a       	sbi	0x0b, 2	; 11
 170:	84 e6       	ldi	r24, 0x64	; 100
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <__vector_5+0x104>
	_delay_loop_2(100);

	if(bit_is_clear(PIND,5)){
 178:	4d 99       	sbic	0x09, 5	; 9
 17a:	10 c0       	rjmp	.+32     	; 0x19c <__vector_5+0x12c>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	57 d3       	rcall	.+1710   	; 0x830 <lcd_puts>
		flag++;
 182:	80 91 6a 01 	lds	r24, 0x016A
 186:	90 91 6b 01 	lds	r25, 0x016B
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 6b 01 	sts	0x016B, r25
 190:	80 93 6a 01 	sts	0x016A, r24
		key = '4';
 194:	84 e3       	ldi	r24, 0x34	; 52
 196:	80 93 9d 01 	sts	0x019D, r24
 19a:	7f c0       	rjmp	.+254    	; 0x29a <__vector_5+0x22a>
	
		}else{
	
		PORTD |= (1 << 3);
 19c:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 19e:	44 98       	cbi	0x08, 4	; 8
 1a0:	86 e9       	ldi	r24, 0x96	; 150
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <__vector_5+0x134>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,5)){
 1a8:	4d 99       	sbic	0x09, 5	; 9
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <__vector_5+0x15c>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	3f d3       	rcall	.+1662   	; 0x830 <lcd_puts>
			flag++;
 1b2:	80 91 6a 01 	lds	r24, 0x016A
 1b6:	90 91 6b 01 	lds	r25, 0x016B
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 6b 01 	sts	0x016B, r25
 1c0:	80 93 6a 01 	sts	0x016A, r24
			key = '5';
 1c4:	85 e3       	ldi	r24, 0x35	; 53
 1c6:	80 93 9d 01 	sts	0x019D, r24
 1ca:	67 c0       	rjmp	.+206    	; 0x29a <__vector_5+0x22a>
		
			}else{
		
			PORTC |= (1 << 4);
 1cc:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 1ce:	5a 98       	cbi	0x0b, 2	; 11
 1d0:	86 e9       	ldi	r24, 0x96	; 150
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <__vector_5+0x164>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,5)){
 1d8:	4d 99       	sbic	0x09, 5	; 9
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <__vector_5+0x18a>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	27 d3       	rcall	.+1614   	; 0x830 <lcd_puts>
				flag++;
 1e2:	80 91 6a 01 	lds	r24, 0x016A
 1e6:	90 91 6b 01 	lds	r25, 0x016B
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	90 93 6b 01 	sts	0x016B, r25
 1f0:	80 93 6a 01 	sts	0x016A, r24
				key = '6';
 1f4:	86 e3       	ldi	r24, 0x36	; 54
 1f6:	80 93 9d 01 	sts	0x019D, r24
			}
			PORTD &= ~(1 << 3);
 1fa:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 1fc:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 1fe:	5a 98       	cbi	0x0b, 2	; 11
 200:	4c c0       	rjmp	.+152    	; 0x29a <__vector_5+0x22a>
		
		}

	}

	}else if(bit_is_clear(PIND,6)){
 202:	4e 99       	sbic	0x09, 6	; 9
 204:	4a c0       	rjmp	.+148    	; 0x29a <__vector_5+0x22a>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 206:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 208:	5a 9a       	sbi	0x0b, 2	; 11
 20a:	86 e9       	ldi	r24, 0x96	; 150
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <__vector_5+0x19e>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,6)){
 212:	4e 99       	sbic	0x09, 6	; 9
 214:	10 c0       	rjmp	.+32     	; 0x236 <__vector_5+0x1c6>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0a d3       	rcall	.+1556   	; 0x830 <lcd_puts>
		flag++;
 21c:	80 91 6a 01 	lds	r24, 0x016A
 220:	90 91 6b 01 	lds	r25, 0x016B
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	90 93 6b 01 	sts	0x016B, r25
 22a:	80 93 6a 01 	sts	0x016A, r24
		key = '7';
 22e:	87 e3       	ldi	r24, 0x37	; 55
 230:	80 93 9d 01 	sts	0x019D, r24
 234:	32 c0       	rjmp	.+100    	; 0x29a <__vector_5+0x22a>
	
		}else{
	
		PORTD |= (1 << 3);
 236:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 238:	44 98       	cbi	0x08, 4	; 8
 23a:	86 e9       	ldi	r24, 0x96	; 150
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <__vector_5+0x1ce>
	
		_delay_loop_2(150);
	
		if(bit_is_clear(PIND,6)){
 242:	4e 99       	sbic	0x09, 6	; 9
 244:	10 c0       	rjmp	.+32     	; 0x266 <__vector_5+0x1f6>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	f2 d2       	rcall	.+1508   	; 0x830 <lcd_puts>
			flag++;
 24c:	80 91 6a 01 	lds	r24, 0x016A
 250:	90 91 6b 01 	lds	r25, 0x016B
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 6b 01 	sts	0x016B, r25
 25a:	80 93 6a 01 	sts	0x016A, r24
			key = '8';
 25e:	88 e3       	ldi	r24, 0x38	; 56
 260:	80 93 9d 01 	sts	0x019D, r24
 264:	1a c0       	rjmp	.+52     	; 0x29a <__vector_5+0x22a>
		
			}else{
		
			PORTC |= (1 << 4);
 266:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 268:	5a 98       	cbi	0x0b, 2	; 11
 26a:	86 e9       	ldi	r24, 0x96	; 150
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <__vector_5+0x1fe>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,6)){
 272:	4e 99       	sbic	0x09, 6	; 9
 274:	0f c0       	rjmp	.+30     	; 0x294 <__vector_5+0x224>
				
				//curr_userPin[flag] = key;
				lcd_puts("*");
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	da d2       	rcall	.+1460   	; 0x830 <lcd_puts>
				flag++;
 27c:	80 91 6a 01 	lds	r24, 0x016A
 280:	90 91 6b 01 	lds	r25, 0x016B
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	90 93 6b 01 	sts	0x016B, r25
 28a:	80 93 6a 01 	sts	0x016A, r24
				key = '9';
 28e:	89 e3       	ldi	r24, 0x39	; 57
 290:	80 93 9d 01 	sts	0x019D, r24
			}
			PORTD &= ~(1 << 3);
 294:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 296:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 298:	5a 98       	cbi	0x0b, 2	; 11

	}

	}

	if(bit_is_clear(PIND,7)){
 29a:	4f 99       	sbic	0x09, 7	; 9
 29c:	50 c0       	rjmp	.+160    	; 0x33e <__vector_5+0x2ce>

	//PORTD &= ~(1 << 0);
	PORTC |= (1 << 4);
 29e:	44 9a       	sbi	0x08, 4	; 8
	PORTD |= (1 << 2);
 2a0:	5a 9a       	sbi	0x0b, 2	; 11
 2a2:	86 e9       	ldi	r24, 0x96	; 150
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <__vector_5+0x236>
	_delay_loop_2(150);

	if(bit_is_clear(PIND,7)){
 2aa:	4f 99       	sbic	0x09, 7	; 9
 2ac:	16 c0       	rjmp	.+44     	; 0x2da <__vector_5+0x26a>
	
		//curr_userPin[flag] = key;
		lcd_puts("*");
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	be d2       	rcall	.+1404   	; 0x830 <lcd_puts>
		flag++;
 2b4:	80 91 6a 01 	lds	r24, 0x016A
 2b8:	90 91 6b 01 	lds	r25, 0x016B
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 6b 01 	sts	0x016B, r25
 2c2:	80 93 6a 01 	sts	0x016A, r24
		key = '*';
 2c6:	8a e2       	ldi	r24, 0x2A	; 42
 2c8:	80 93 9d 01 	sts	0x019D, r24
		finger_event = 2;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 6f 01 	sts	0x016F, r25
 2d4:	80 93 6e 01 	sts	0x016E, r24
 2d8:	32 c0       	rjmp	.+100    	; 0x33e <__vector_5+0x2ce>
		}else{
	
		PORTD |= (1 << 3);
 2da:	5b 9a       	sbi	0x0b, 3	; 11
	
		PORTC &= ~(1 << 4);
 2dc:	44 98       	cbi	0x08, 4	; 8
 2de:	8a ef       	ldi	r24, 0xFA	; 250
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <__vector_5+0x272>
	
		_delay_loop_2(250);
	
		if(bit_is_clear(PIND,7)){
 2e6:	4f 99       	sbic	0x09, 7	; 9
 2e8:	10 c0       	rjmp	.+32     	; 0x30a <__vector_5+0x29a>

			//curr_userPin[flag] = key;
			lcd_puts("*");
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	a0 d2       	rcall	.+1344   	; 0x830 <lcd_puts>
			flag++;
 2f0:	80 91 6a 01 	lds	r24, 0x016A
 2f4:	90 91 6b 01 	lds	r25, 0x016B
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	90 93 6b 01 	sts	0x016B, r25
 2fe:	80 93 6a 01 	sts	0x016A, r24
			key = '0';
 302:	80 e3       	ldi	r24, 0x30	; 48
 304:	80 93 9d 01 	sts	0x019D, r24
 308:	1a c0       	rjmp	.+52     	; 0x33e <__vector_5+0x2ce>
			
			}else{
		
			PORTC |= (1 << 4);
 30a:	44 9a       	sbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 30c:	5a 98       	cbi	0x0b, 2	; 11
 30e:	86 e9       	ldi	r24, 0x96	; 150
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <__vector_5+0x2a2>
		
			_delay_loop_2(150);
		
			if(bit_is_clear(PIND,7)){
 316:	4f 99       	sbic	0x09, 7	; 9
 318:	0f c0       	rjmp	.+30     	; 0x338 <__vector_5+0x2c8>
			
				//curr_userPin[flag] = key;
				lcd_puts("*");
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	88 d2       	rcall	.+1296   	; 0x830 <lcd_puts>
				flag++;
 320:	80 91 6a 01 	lds	r24, 0x016A
 324:	90 91 6b 01 	lds	r25, 0x016B
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	90 93 6b 01 	sts	0x016B, r25
 32e:	80 93 6a 01 	sts	0x016A, r24
				key = '#';
 332:	83 e2       	ldi	r24, 0x23	; 35
 334:	80 93 9d 01 	sts	0x019D, r24
			}
			PORTD &= ~(1 << 3);
 338:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1 << 4);
 33a:	44 98       	cbi	0x08, 4	; 8
			PORTD &= ~(1 << 2);
 33c:	5a 98       	cbi	0x0b, 2	; 11
 33e:	86 e9       	ldi	r24, 0x96	; 150
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <__vector_5+0x2d2>

	}
	
	_delay_loop_2(150);
	
	if(key != ' '){
 346:	80 91 9d 01 	lds	r24, 0x019D
 34a:	80 32       	cpi	r24, 0x20	; 32
 34c:	39 f0       	breq	.+14     	; 0x35c <__vector_5+0x2ec>
		curr_userPin[flag] = key;
 34e:	e0 91 6a 01 	lds	r30, 0x016A
 352:	f0 91 6b 01 	lds	r31, 0x016B
 356:	e1 56       	subi	r30, 0x61	; 97
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 83       	st	Z, r24
		//flag++;
		//lcd_puts("*");
		//PORTC &= ~(1 << 5);
	}
	
	if(flag >= 4){
 35c:	80 91 6a 01 	lds	r24, 0x016A
 360:	90 91 6b 01 	lds	r25, 0x016B
 364:	04 97       	sbiw	r24, 0x04	; 4
 366:	ec f0       	brlt	.+58     	; 0x3a2 <__vector_5+0x332>
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
 368:	4e d2       	rcall	.+1180   	; 0x806 <lcd_home>
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
			final_userPin[i-1] = key;
 36a:	80 91 a0 01 	lds	r24, 0x01A0
 36e:	80 93 96 01 	sts	0x0196, r24
 372:	80 91 a1 01 	lds	r24, 0x01A1
 376:	80 93 97 01 	sts	0x0197, r24
 37a:	80 91 a2 01 	lds	r24, 0x01A2
 37e:	80 93 98 01 	sts	0x0198, r24
		//PORTC |= (1 << 5);
		lcd_clrscr;
		lcd_home();
		for(int i = 1; i < 5; i ++){
			//lcd_putc(curr_userPin[i]);
			key = curr_userPin[i];
 382:	80 91 a3 01 	lds	r24, 0x01A3
			final_userPin[i-1] = key;
 386:	80 93 99 01 	sts	0x0199, r24
 38a:	80 93 9d 01 	sts	0x019D, r24
		}
	
		pin_event = 1;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	90 93 6d 01 	sts	0x016D, r25
 396:	80 93 6c 01 	sts	0x016C, r24
		flag = 0;
 39a:	10 92 6b 01 	sts	0x016B, r1
 39e:	10 92 6a 01 	sts	0x016A, r1
//		check_pin();
	}

}
}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <__vector_18>:

//Data received on the serial port interrupt -- RX

ISR(USART_RX_vect){
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
		data = UDR0;
 3e6:	20 91 c6 00 	lds	r18, 0x00C6
 3ea:	20 93 9c 01 	sts	0x019C, r18
		//_delay_ms(100);
		if((count == 5)&&(data == 0x00)){
 3ee:	80 91 68 01 	lds	r24, 0x0168
 3f2:	90 91 69 01 	lds	r25, 0x0169
 3f6:	05 97       	sbiw	r24, 0x05	; 5
 3f8:	79 f4       	brne	.+30     	; 0x418 <__vector_18+0x54>
 3fa:	21 11       	cpse	r18, r1
 3fc:	0d c0       	rjmp	.+26     	; 0x418 <__vector_18+0x54>
			lcd_clrscr();
 3fe:	00 d2       	rcall	.+1024   	; 0x800 <lcd_clrscr>
			lcd_puts("test");
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	15 d2       	rcall	.+1066   	; 0x830 <lcd_puts>
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	89 e6       	ldi	r24, 0x69	; 105
 40a:	98 e1       	ldi	r25, 0x18	; 24
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <__vector_18+0x48>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__vector_18+0x52>
 416:	00 00       	nop
			_delay_ms(1000);
		}
		lcd_clrscr();
 418:	f3 d1       	rcall	.+998    	; 0x800 <lcd_clrscr>
		if(data == 0x31){
 41a:	80 91 9c 01 	lds	r24, 0x019C
 41e:	81 33       	cpi	r24, 0x31	; 49
 420:	69 f4       	brne	.+26     	; 0x43c <__vector_18+0x78>
			lcd_clrscr();
 422:	ee d1       	rcall	.+988    	; 0x800 <lcd_clrscr>
			lcd_puts("response error");
 424:	87 e0       	ldi	r24, 0x07	; 7
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	03 d2       	rcall	.+1030   	; 0x830 <lcd_puts>
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	89 e6       	ldi	r24, 0x69	; 105
 42e:	98 e1       	ldi	r25, 0x18	; 24
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <__vector_18+0x6c>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__vector_18+0x76>
 43a:	00 00       	nop
			_delay_ms(1000);
		}
		if(data == 0x30){
 43c:	80 91 9c 01 	lds	r24, 0x019C
 440:	80 33       	cpi	r24, 0x30	; 48
 442:	69 f4       	brne	.+26     	; 0x45e <__vector_18+0x9a>
			lcd_clrscr();
 444:	dd d1       	rcall	.+954    	; 0x800 <lcd_clrscr>
			lcd_puts("ack good");
 446:	86 e1       	ldi	r24, 0x16	; 22
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	f2 d1       	rcall	.+996    	; 0x830 <lcd_puts>
 44c:	2f ef       	ldi	r18, 0xFF	; 255
 44e:	89 e6       	ldi	r24, 0x69	; 105
 450:	98 e1       	ldi	r25, 0x18	; 24
 452:	21 50       	subi	r18, 0x01	; 1
 454:	80 40       	sbci	r24, 0x00	; 0
 456:	90 40       	sbci	r25, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <__vector_18+0x8e>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__vector_18+0x98>
 45c:	00 00       	nop
			_delay_ms(1000);
		}
		count++; 
 45e:	80 91 68 01 	lds	r24, 0x0168
 462:	90 91 69 01 	lds	r25, 0x0169
 466:	01 96       	adiw	r24, 0x01	; 1
		if(count == 12){
 468:	8c 30       	cpi	r24, 0x0C	; 12
 46a:	91 05       	cpc	r25, r1
 46c:	29 f0       	breq	.+10     	; 0x478 <__vector_18+0xb4>
		if(data == 0x30){
			lcd_clrscr();
			lcd_puts("ack good");
			_delay_ms(1000);
		}
		count++; 
 46e:	90 93 69 01 	sts	0x0169, r25
 472:	80 93 68 01 	sts	0x0168, r24
 476:	0f c0       	rjmp	.+30     	; 0x496 <__vector_18+0xd2>
		if(count == 12){
			count = 0;
 478:	10 92 69 01 	sts	0x0169, r1
 47c:	10 92 68 01 	sts	0x0168, r1
			PORTC &= ~(1 << 5);
 480:	45 98       	cbi	0x08, 5	; 8
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	89 e6       	ldi	r24, 0x69	; 105
 486:	98 e1       	ldi	r25, 0x18	; 24
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__vector_18+0xc4>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__vector_18+0xce>
 492:	00 00       	nop
			_delay_ms(1000);
			PORTC |= (1 << 5);	// Turn LED off -- Sets bit
 494:	45 9a       	sbi	0x08, 5	; 8
		}
	
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <uart_transmit>:
	//uart_receive();
}

void uart_transmit(unsigned char data){
	//_delay_ms(10);
	cli();
 4b8:	f8 94       	cli
	uart_putc(data);
 4ba:	40 d2       	rcall	.+1152   	; 0x93c <uart_putc>
	//while(!(UCSR0A & (1 << UDRE0)));
	//UDR0 = data;
	//while((UCSR0A & (1 << TXC0)) == 0){};
	sei();
 4bc:	78 94       	sei
 4be:	08 95       	ret

000004c0 <initialize_fps>:
}

void initialize_fps(){
	// Open connection 

	uart_transmit(0x55);	// Start code 1
 4c0:	85 e5       	ldi	r24, 0x55	; 85
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	f9 df       	rcall	.-14     	; 0x4b8 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 4c6:	8a ea       	ldi	r24, 0xAA	; 170
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	f6 df       	rcall	.-20     	; 0x4b8 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	f3 df       	rcall	.-26     	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	f0 df       	rcall	.-32     	; 0x4b8 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 (largest byte of param)
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	ed df       	rcall	.-38     	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2 (second largest byte of param)
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	ea df       	rcall	.-44     	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	e7 df       	rcall	.-50     	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4	
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	e4 df       	rcall	.-56     	; 0x4b8 <uart_transmit>
	uart_transmit(0x01);	// Byte 1 of command
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	e1 df       	rcall	.-62     	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	de df       	rcall	.-68     	; 0x4b8 <uart_transmit>
	uart_transmit(0x02);	// Low byte checksum
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	db df       	rcall	.-74     	; 0x4b8 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	d8 df       	rcall	.-80     	; 0x4b8 <uart_transmit>
 508:	08 95       	ret

0000050a <led_on>:
}

// Turn FPS LED on
void led_on(){
	
	uart_transmit(0x55);	// Start code 1
 50a:	85 e5       	ldi	r24, 0x55	; 85
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	d4 df       	rcall	.-88     	; 0x4b8 <uart_transmit>
	uart_transmit(0xAA);	// Start code 2
 510:	8a ea       	ldi	r24, 0xAA	; 170
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	d1 df       	rcall	.-94     	; 0x4b8 <uart_transmit>
	uart_transmit(0x01);	// Device ID
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	ce df       	rcall	.-100    	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Second part of ID
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	cb df       	rcall	.-106    	; 0x4b8 <uart_transmit>
	uart_transmit(0x01);	// Input parameter byte 1 -- LED ON
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	c8 df       	rcall	.-112    	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 2
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	c5 df       	rcall	.-118    	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 3
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	c2 df       	rcall	.-124    	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Input parameter byte 4
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	bf df       	rcall	.-130    	; 0x4b8 <uart_transmit>
	uart_transmit(0x12);	// Byte 1 of command
 53a:	82 e1       	ldi	r24, 0x12	; 18
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	bc df       	rcall	.-136    	; 0x4b8 <uart_transmit>
	uart_transmit(0x00);	// Byte 2 of command
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	b9 df       	rcall	.-142    	; 0x4b8 <uart_transmit>
	uart_transmit(0x13);	// Low byte checksum
 546:	83 e1       	ldi	r24, 0x13	; 19
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	b6 df       	rcall	.-148    	; 0x4b8 <uart_transmit>
	uart_transmit(0x01);	// High byte checksum
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	b3 df       	rcall	.-154    	; 0x4b8 <uart_transmit>
 552:	08 95       	ret

00000554 <main>:
}

int main(void)            // Main Loop
{
	
	DDRB = 0b00101000;
 554:	88 e2       	ldi	r24, 0x28	; 40
 556:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b01111111;	// PC5 for keypad (before PD1)
 558:	8f e7       	ldi	r24, 0x7F	; 127
 55a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00001110;	// PD0 (RX) input & PD1 (TX) output for serial/ PD3 is now PD0 for keypad
 55c:	8e e0       	ldi	r24, 0x0E	; 14
 55e:	8a b9       	out	0x0a, r24	; 10
	//DDRD &= ~(1 << PD3);	// Set PD3 as input for mag card
	PORTC |= (1 << 5);	// Turn LED off -- Sets bit
 560:	45 9a       	sbi	0x08, 5	; 8
	//PORTB |= (1 << 1);
	PORTD = 0xF0;
 562:	80 ef       	ldi	r24, 0xF0	; 240
 564:	8b b9       	out	0x0b, r24	; 11

	// Enables pin change interrupt  
	tmp3 = PCICR;
 566:	e8 e6       	ldi	r30, 0x68	; 104
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	90 81       	ld	r25, Z
	tmp3 = 1 << (PCIE2) | 0 << (PCIE1) | 0 << (PCIE0);
 56c:	94 e0       	ldi	r25, 0x04	; 4
 56e:	90 93 9b 01 	sts	0x019B, r25
	PCICR = tmp3;
 572:	90 83       	st	Z, r25
	tmp3 = PCMSK2;
 574:	ed e6       	ldi	r30, 0x6D	; 109
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	90 81       	ld	r25, Z
	tmp3 = 1 << (PCINT23) | 1 << (PCINT22) | 1 << (PCINT21) | 1 << (PCINT20) | 0 << (PCINT19) | 0 << (PCINT18) | 0 << (PCINT17) | 0 << (PCINT16);
 57a:	80 93 9b 01 	sts	0x019B, r24
	PCMSK2 = tmp3;
 57e:	80 83       	st	Z, r24
	sei();                // Enables global interrupts
 580:	78 94       	sei
	lcd_init(LCD_DISP_ON);
 582:	8c e0       	ldi	r24, 0x0C	; 12
 584:	64 d1       	rcall	.+712    	; 0x84e <lcd_init>
	uart_init(BAUDRATE);
 586:	83 e3       	ldi	r24, 0x33	; 51
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	bd d1       	rcall	.+890    	; 0x906 <uart_init>
 58c:	2f ef       	ldi	r18, 0xFF	; 255
 58e:	89 e6       	ldi	r24, 0x69	; 105
 590:	98 e1       	ldi	r25, 0x18	; 24
 592:	21 50       	subi	r18, 0x01	; 1
 594:	80 40       	sbci	r24, 0x00	; 0
 596:	90 40       	sbci	r25, 0x00	; 0
 598:	e1 f7       	brne	.-8      	; 0x592 <main+0x3e>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <main+0x48>
 59c:	00 00       	nop
	//uart_init(51);
	//USART_Init();
	_delay_ms(1000);
	initialize_fps();
 59e:	90 df       	rcall	.-224    	; 0x4c0 <initialize_fps>
 5a0:	2f ef       	ldi	r18, 0xFF	; 255
 5a2:	89 e6       	ldi	r24, 0x69	; 105
 5a4:	98 e1       	ldi	r25, 0x18	; 24
 5a6:	21 50       	subi	r18, 0x01	; 1
 5a8:	80 40       	sbci	r24, 0x00	; 0
 5aa:	90 40       	sbci	r25, 0x00	; 0
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x52>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x5c>
 5b0:	00 00       	nop
	_delay_ms(1000);
	led_on();
 5b2:	ab df       	rcall	.-170    	; 0x50a <led_on>
 5b4:	2f ef       	ldi	r18, 0xFF	; 255
 5b6:	89 e6       	ldi	r24, 0x69	; 105
 5b8:	98 e1       	ldi	r25, 0x18	; 24
 5ba:	21 50       	subi	r18, 0x01	; 1
 5bc:	80 40       	sbci	r24, 0x00	; 0
 5be:	90 40       	sbci	r25, 0x00	; 0
 5c0:	e1 f7       	brne	.-8      	; 0x5ba <main+0x66>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <main+0x70>
 5c4:	00 00       	nop
 5c6:	2f e7       	ldi	r18, 0x7F	; 127
 5c8:	88 e3       	ldi	r24, 0x38	; 56
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0x78>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0x82>
 5d6:	00 00       	nop
				lcd_clrscr();
				lcd_puts("Access Granted");
				
				PORTC &= ~(1 << 5);	// Turn LED on 
				_delay_ms(2500);
				curr_state = Scan_Finger;
 5d8:	c3 e0       	ldi	r28, 0x03	; 3
 5da:	d0 e0       	ldi	r29, 0x00	; 0
			  if(finger_event == 0){
				  curr_state = Scan_Finger;	// No card swipe
				  }else if (finger_event == 1){
				  curr_state = Enroll_User;
				 }else{
					 curr_state = EXIT;
 5dc:	0f 2e       	mov	r0, r31
 5de:	f5 e0       	ldi	r31, 0x05	; 5
 5e0:	af 2e       	mov	r10, r31
 5e2:	b1 2c       	mov	r11, r1
 5e4:	f0 2d       	mov	r31, r0
			  lcd_puts("Scan Finger");
			  _delay_ms(2500);
			  if(finger_event == 0){
				  curr_state = Scan_Finger;	// No card swipe
				  }else if (finger_event == 1){
				  curr_state = Enroll_User;
 5e6:	68 94       	set
 5e8:	ee 24       	eor	r14, r14
 5ea:	e2 f8       	bld	r14, 2
 5ec:	f1 2c       	mov	r15, r1
				while(pin_event != 1){
					_delay_us(50);
					 // Forever loop until keypad enters in 4 numbers for pin
			    }   
				pin_event = 0;
				curr_state = Check_Pin;
 5ee:	01 e0       	ldi	r16, 0x01	; 1
 5f0:	10 e0       	ldi	r17, 0x00	; 0
			 break;
			 
			 case Check_Pin:
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
					curr_state = Authorize;
 5f2:	68 94       	set
 5f4:	cc 24       	eor	r12, r12
 5f6:	c1 f8       	bld	r12, 1
 5f8:	d1 2c       	mov	r13, r1
		led_on();
	}*/
	_delay_ms(50);
	 while(1)
	 {
		 switch(curr_state){
 5fa:	80 91 70 01 	lds	r24, 0x0170
 5fe:	90 91 71 01 	lds	r25, 0x0171
 602:	82 30       	cpi	r24, 0x02	; 2
 604:	91 05       	cpc	r25, r1
 606:	09 f4       	brne	.+2      	; 0x60a <main+0xb6>
 608:	64 c0       	rjmp	.+200    	; 0x6d2 <main+0x17e>
 60a:	34 f4       	brge	.+12     	; 0x618 <main+0xc4>
 60c:	00 97       	sbiw	r24, 0x00	; 0
 60e:	69 f0       	breq	.+26     	; 0x62a <main+0xd6>
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	91 05       	cpc	r25, r1
 614:	39 f1       	breq	.+78     	; 0x664 <main+0x110>
 616:	f5 cf       	rjmp	.-22     	; 0x602 <main+0xae>
 618:	83 30       	cpi	r24, 0x03	; 3
 61a:	91 05       	cpc	r25, r1
 61c:	09 f4       	brne	.+2      	; 0x620 <main+0xcc>
 61e:	6d c0       	rjmp	.+218    	; 0x6fa <main+0x1a6>
 620:	85 30       	cpi	r24, 0x05	; 5
 622:	91 05       	cpc	r25, r1
 624:	09 f4       	brne	.+2      	; 0x628 <main+0xd4>
 626:	8d c0       	rjmp	.+282    	; 0x742 <main+0x1ee>
 628:	ec cf       	rjmp	.-40     	; 0x602 <main+0xae>
			 
			 case Get_Pin:
				lcd_clrscr();
 62a:	ea d0       	rcall	.+468    	; 0x800 <lcd_clrscr>
				//lcd_puts("Print Valid ");
				//lcd_putc('\n');
				lcd_puts("Enter PIN: ");
 62c:	8f e1       	ldi	r24, 0x1F	; 31
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	ff d0       	rcall	.+510    	; 0x830 <lcd_puts>
				while(pin_event != 1){
 632:	80 91 6c 01 	lds	r24, 0x016C
 636:	90 91 6d 01 	lds	r25, 0x016D
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	51 f0       	breq	.+20     	; 0x652 <main+0xfe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63e:	25 e8       	ldi	r18, 0x85	; 133
 640:	2a 95       	dec	r18
 642:	f1 f7       	brne	.-4      	; 0x640 <main+0xec>
 644:	00 00       	nop
 646:	80 91 6c 01 	lds	r24, 0x016C
 64a:	90 91 6d 01 	lds	r25, 0x016D
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	b1 f7       	brne	.-20     	; 0x63e <main+0xea>
					_delay_us(50);
					 // Forever loop until keypad enters in 4 numbers for pin
			    }   
				pin_event = 0;
 652:	10 92 6d 01 	sts	0x016D, r1
 656:	10 92 6c 01 	sts	0x016C, r1
				curr_state = Check_Pin;
 65a:	10 93 71 01 	sts	0x0171, r17
 65e:	00 93 70 01 	sts	0x0170, r16
			 break;
 662:	cb cf       	rjmp	.-106    	; 0x5fa <main+0xa6>
			 
			 case Check_Pin:
				if(strncmp_P(final_userPin, pin, pin_length) == 0){
 664:	a7 01       	movw	r20, r14
 666:	64 e3       	ldi	r22, 0x34	; 52
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	86 e9       	ldi	r24, 0x96	; 150
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	7b d1       	rcall	.+758    	; 0x966 <strncmp_P>
 670:	89 2b       	or	r24, r25
 672:	29 f4       	brne	.+10     	; 0x67e <main+0x12a>
					curr_state = Authorize;
 674:	d0 92 71 01 	sts	0x0171, r13
 678:	c0 92 70 01 	sts	0x0170, r12
 67c:	be cf       	rjmp	.-132    	; 0x5fa <main+0xa6>
				}else{
					lcd_clrscr();
 67e:	c0 d0       	rcall	.+384    	; 0x800 <lcd_clrscr>
					lcd_puts("Pin invalid");
 680:	8b e2       	ldi	r24, 0x2B	; 43
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	d5 d0       	rcall	.+426    	; 0x830 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	98 e0       	ldi	r25, 0x08	; 8
 68a:	2d e3       	ldi	r18, 0x3D	; 61
 68c:	81 50       	subi	r24, 0x01	; 1
 68e:	90 40       	sbci	r25, 0x00	; 0
 690:	20 40       	sbci	r18, 0x00	; 0
 692:	e1 f7       	brne	.-8      	; 0x68c <main+0x138>
 694:	00 c0       	rjmp	.+0      	; 0x696 <main+0x142>
 696:	00 00       	nop
					_delay_ms(2500);
					lcd_clrscr();
 698:	b3 d0       	rcall	.+358    	; 0x800 <lcd_clrscr>
					lcd_puts("Enter PIN:");
 69a:	87 e3       	ldi	r24, 0x37	; 55
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	c8 d0       	rcall	.+400    	; 0x830 <lcd_puts>
					while(pin_event != 1){
 6a0:	80 91 6c 01 	lds	r24, 0x016C
 6a4:	90 91 6d 01 	lds	r25, 0x016D
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	51 f0       	breq	.+20     	; 0x6c0 <main+0x16c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ac:	85 e8       	ldi	r24, 0x85	; 133
 6ae:	8a 95       	dec	r24
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <main+0x15a>
 6b2:	00 00       	nop
 6b4:	80 91 6c 01 	lds	r24, 0x016C
 6b8:	90 91 6d 01 	lds	r25, 0x016D
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	b1 f7       	brne	.-20     	; 0x6ac <main+0x158>
						_delay_us(50);
						// Forever loop until keypad enters in 4 numbers for pin
					}
					pin_event = 0;
 6c0:	10 92 6d 01 	sts	0x016D, r1
 6c4:	10 92 6c 01 	sts	0x016C, r1
					curr_state = Check_Pin;
 6c8:	10 93 71 01 	sts	0x0171, r17
 6cc:	00 93 70 01 	sts	0x0170, r16
 6d0:	94 cf       	rjmp	.-216    	; 0x5fa <main+0xa6>
				}
				
			 break;
			 
			 case Authorize:
				lcd_clrscr();
 6d2:	96 d0       	rcall	.+300    	; 0x800 <lcd_clrscr>
				lcd_puts("Access Granted");
 6d4:	82 e4       	ldi	r24, 0x42	; 66
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	ab d0       	rcall	.+342    	; 0x830 <lcd_puts>
				
				PORTC &= ~(1 << 5);	// Turn LED on 
 6da:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6dc:	9f ef       	ldi	r25, 0xFF	; 255
 6de:	28 e0       	ldi	r18, 0x08	; 8
 6e0:	8d e3       	ldi	r24, 0x3D	; 61
 6e2:	91 50       	subi	r25, 0x01	; 1
 6e4:	20 40       	sbci	r18, 0x00	; 0
 6e6:	80 40       	sbci	r24, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x18e>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x198>
 6ec:	00 00       	nop
				_delay_ms(2500);
				curr_state = Scan_Finger;
 6ee:	d0 93 71 01 	sts	0x0171, r29
 6f2:	c0 93 70 01 	sts	0x0170, r28
			
				PORTC |= (1 << 5);	// Turn LED off
 6f6:	45 9a       	sbi	0x08, 5	; 8
			  break;
 6f8:	80 cf       	rjmp	.-256    	; 0x5fa <main+0xa6>
			  
			case Scan_Finger:
			  lcd_clrscr();	// Initialize LCD with text
 6fa:	82 d0       	rcall	.+260    	; 0x800 <lcd_clrscr>
			  lcd_puts("Scan Finger");
 6fc:	81 e5       	ldi	r24, 0x51	; 81
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	97 d0       	rcall	.+302    	; 0x830 <lcd_puts>
 702:	9f ef       	ldi	r25, 0xFF	; 255
 704:	28 e0       	ldi	r18, 0x08	; 8
 706:	8d e3       	ldi	r24, 0x3D	; 61
 708:	91 50       	subi	r25, 0x01	; 1
 70a:	20 40       	sbci	r18, 0x00	; 0
 70c:	80 40       	sbci	r24, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x1b4>
 710:	00 c0       	rjmp	.+0      	; 0x712 <main+0x1be>
 712:	00 00       	nop
			  _delay_ms(2500);
			  if(finger_event == 0){
 714:	80 91 6e 01 	lds	r24, 0x016E
 718:	90 91 6f 01 	lds	r25, 0x016F
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	29 f4       	brne	.+10     	; 0x72a <main+0x1d6>
				  curr_state = Scan_Finger;	// No card swipe
 720:	d0 93 71 01 	sts	0x0171, r29
 724:	c0 93 70 01 	sts	0x0170, r28
 728:	68 cf       	rjmp	.-304    	; 0x5fa <main+0xa6>
				  }else if (finger_event == 1){
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	29 f4       	brne	.+10     	; 0x738 <main+0x1e4>
				  curr_state = Enroll_User;
 72e:	f0 92 71 01 	sts	0x0171, r15
 732:	e0 92 70 01 	sts	0x0170, r14
 736:	61 cf       	rjmp	.-318    	; 0x5fa <main+0xa6>
				 }else{
					 curr_state = EXIT;
 738:	b0 92 71 01 	sts	0x0171, r11
 73c:	a0 92 70 01 	sts	0x0170, r10
 740:	5c cf       	rjmp	.-328    	; 0x5fa <main+0xa6>
			case Enroll_User:
			  
			break;
			
			case EXIT:
				lcd_clrscr();
 742:	5e d0       	rcall	.+188    	; 0x800 <lcd_clrscr>
				lcd_puts("User exit");
 744:	8d e5       	ldi	r24, 0x5D	; 93
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	73 d0       	rcall	.+230    	; 0x830 <lcd_puts>
 74a:	9f ef       	ldi	r25, 0xFF	; 255
 74c:	23 ed       	ldi	r18, 0xD3	; 211
 74e:	80 e3       	ldi	r24, 0x30	; 48
 750:	91 50       	subi	r25, 0x01	; 1
 752:	20 40       	sbci	r18, 0x00	; 0
 754:	80 40       	sbci	r24, 0x00	; 0
 756:	e1 f7       	brne	.-8      	; 0x750 <main+0x1fc>
 758:	00 c0       	rjmp	.+0      	; 0x75a <main+0x206>
 75a:	00 00       	nop
				_delay_ms(2000);
				finger_event = 0;
 75c:	10 92 6f 01 	sts	0x016F, r1
 760:	10 92 6e 01 	sts	0x016E, r1
				curr_state = Get_Pin;
 764:	10 92 71 01 	sts	0x0171, r1
 768:	10 92 70 01 	sts	0x0170, r1
			break;
 76c:	46 cf       	rjmp	.-372    	; 0x5fa <main+0xa6>

0000076e <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 76e:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 770:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 772:	2b 98       	cbi	0x05, 3	; 5
 774:	08 95       	ret

00000776 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 77c:	66 23       	and	r22, r22
 77e:	11 f0       	breq	.+4      	; 0x784 <lcd_write+0xe>
       lcd_rs_high();
 780:	2d 9a       	sbi	0x05, 5	; 5
 782:	01 c0       	rjmp	.+2      	; 0x786 <lcd_write+0x10>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 784:	2d 98       	cbi	0x05, 5	; 5
    }
    lcd_rw_low();    /* RW=0  write mode      */
 786:	2c 98       	cbi	0x05, 4	; 5

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 788:	87 b1       	in	r24, 0x07	; 7
 78a:	8f 60       	ori	r24, 0x0F	; 15
 78c:	87 b9       	out	0x07, r24	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 78e:	c8 b1       	in	r28, 0x08	; 8
 790:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 792:	8d 2f       	mov	r24, r29
 794:	82 95       	swap	r24
 796:	8f 70       	andi	r24, 0x0F	; 15
 798:	8c 2b       	or	r24, r28
 79a:	88 b9       	out	0x08, r24	; 8
        lcd_e_toggle();
 79c:	e8 df       	rcall	.-48     	; 0x76e <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 79e:	df 70       	andi	r29, 0x0F	; 15
 7a0:	dc 2b       	or	r29, r28
 7a2:	d8 b9       	out	0x08, r29	; 8
        lcd_e_toggle();
 7a4:	e4 df       	rcall	.-56     	; 0x76e <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 7a6:	cf 60       	ori	r28, 0x0F	; 15
 7a8:	c8 b9       	out	0x08, r28	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 7b0:	88 23       	and	r24, r24
 7b2:	11 f0       	breq	.+4      	; 0x7b8 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 7b4:	2d 9a       	sbi	0x05, 5	; 5
 7b6:	01 c0       	rjmp	.+2      	; 0x7ba <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 7b8:	2d 98       	cbi	0x05, 5	; 5
    lcd_rw_high();                           /* RW=1  read mode      */
 7ba:	2c 9a       	sbi	0x05, 4	; 5
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 7bc:	87 b1       	in	r24, 0x07	; 7
 7be:	80 7f       	andi	r24, 0xF0	; 240
 7c0:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
 7c2:	2b 9a       	sbi	0x05, 3	; 5
 7c4:	00 00       	nop
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 7c6:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
 7c8:	2b 98       	cbi	0x05, 3	; 5
 7ca:	00 00       	nop
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
 7cc:	2b 9a       	sbi	0x05, 3	; 5
 7ce:	00 00       	nop
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 7d0:	86 b1       	in	r24, 0x06	; 6
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 7d2:	92 95       	swap	r25
 7d4:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 7d6:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
 7d8:	2b 98       	cbi	0x05, 3	; 5
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 7da:	89 2b       	or	r24, r25
 7dc:	08 95       	ret

000007de <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	e7 df       	rcall	.-50     	; 0x7b0 <lcd_read>
 7e2:	88 23       	and	r24, r24
 7e4:	e4 f3       	brlt	.-8      	; 0x7de <lcd_waitbusy>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <lcd_waitbusy+0xa>
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	e1 df       	rcall	.-62     	; 0x7b0 <lcd_read>
    
}/* lcd_waitbusy */
 7ee:	08 95       	ret

000007f0 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 7f0:	cf 93       	push	r28
 7f2:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 7f4:	f4 df       	rcall	.-24     	; 0x7de <lcd_waitbusy>
    lcd_write(cmd,0);
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	8c 2f       	mov	r24, r28
 7fa:	bd df       	rcall	.-134    	; 0x776 <lcd_write>
}
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	f6 df       	rcall	.-20     	; 0x7f0 <lcd_command>
 804:	08 95       	ret

00000806 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	f3 df       	rcall	.-26     	; 0x7f0 <lcd_command>
 80a:	08 95       	ret

0000080c <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 80c:	cf 93       	push	r28
 80e:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 810:	e6 df       	rcall	.-52     	; 0x7de <lcd_waitbusy>
    if (c=='\n')
 812:	ca 30       	cpi	r28, 0x0A	; 10
 814:	41 f4       	brne	.+16     	; 0x826 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 816:	80 34       	cpi	r24, 0x40	; 64
 818:	10 f4       	brcc	.+4      	; 0x81e <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
 81a:	80 e4       	ldi	r24, 0x40	; 64
 81c:	01 c0       	rjmp	.+2      	; 0x820 <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
 81e:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 820:	80 58       	subi	r24, 0x80	; 128
 822:	e6 df       	rcall	.-52     	; 0x7f0 <lcd_command>
 824:	03 c0       	rjmp	.+6      	; 0x82c <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	8c 2f       	mov	r24, r28
 82a:	a5 df       	rcall	.-182    	; 0x776 <lcd_write>
    }

}/* lcd_putc */
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 834:	ec 01       	movw	r28, r24
 836:	21 96       	adiw	r28, 0x01	; 1
 838:	fc 01       	movw	r30, r24
 83a:	80 81       	ld	r24, Z
 83c:	88 23       	and	r24, r24
 83e:	21 f0       	breq	.+8      	; 0x848 <lcd_puts+0x18>
        lcd_putc(c);
 840:	e5 df       	rcall	.-54     	; 0x80c <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 842:	89 91       	ld	r24, Y+
 844:	81 11       	cpse	r24, r1
 846:	fc cf       	rjmp	.-8      	; 0x840 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	08 95       	ret

0000084e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 84e:	cf 93       	push	r28
 850:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 852:	87 b1       	in	r24, 0x07	; 7
 854:	8f 60       	ori	r24, 0x0F	; 15
 856:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 858:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 85a:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 85c:	23 9a       	sbi	0x04, 3	; 4
 85e:	8f e9       	ldi	r24, 0x9F	; 159
 860:	9f e0       	ldi	r25, 0x0F	; 15
 862:	01 97       	sbiw	r24, 0x01	; 1
 864:	f1 f7       	brne	.-4      	; 0x862 <lcd_init+0x14>
 866:	00 c0       	rjmp	.+0      	; 0x868 <lcd_init+0x1a>
 868:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 86a:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 86c:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
 86e:	7f df       	rcall	.-258    	; 0x76e <toggle_e>
 870:	81 ee       	ldi	r24, 0xE1	; 225
 872:	94 e0       	ldi	r25, 0x04	; 4
 874:	01 97       	sbiw	r24, 0x01	; 1
 876:	f1 f7       	brne	.-4      	; 0x874 <lcd_init+0x26>
 878:	00 c0       	rjmp	.+0      	; 0x87a <lcd_init+0x2c>
 87a:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 87c:	78 df       	rcall	.-272    	; 0x76e <toggle_e>
 87e:	95 e1       	ldi	r25, 0x15	; 21
 880:	9a 95       	dec	r25
 882:	f1 f7       	brne	.-4      	; 0x880 <lcd_init+0x32>
 884:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 886:	73 df       	rcall	.-282    	; 0x76e <toggle_e>
 888:	85 e1       	ldi	r24, 0x15	; 21
 88a:	8a 95       	dec	r24
 88c:	f1 f7       	brne	.-4      	; 0x88a <lcd_init+0x3c>
 88e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 890:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
 892:	6d df       	rcall	.-294    	; 0x76e <toggle_e>
 894:	95 e1       	ldi	r25, 0x15	; 21
 896:	9a 95       	dec	r25
 898:	f1 f7       	brne	.-4      	; 0x896 <lcd_init+0x48>
 89a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 89c:	88 e2       	ldi	r24, 0x28	; 40
 89e:	a8 df       	rcall	.-176    	; 0x7f0 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 8a0:	88 e0       	ldi	r24, 0x08	; 8
 8a2:	a6 df       	rcall	.-180    	; 0x7f0 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 8a4:	ad df       	rcall	.-166    	; 0x800 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 8a6:	86 e0       	ldi	r24, 0x06	; 6
 8a8:	a3 df       	rcall	.-186    	; 0x7f0 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 8aa:	8c 2f       	mov	r24, r28
 8ac:	a1 df       	rcall	.-190    	; 0x7f0 <lcd_command>

}/* lcd_init */
 8ae:	cf 91       	pop	r28
 8b0:	08 95       	ret

000008b2 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 8b2:	1f 92       	push	r1
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	8f 93       	push	r24
 8be:	9f 93       	push	r25
 8c0:	ef 93       	push	r30
 8c2:	ff 93       	push	r31
    unsigned char tmptail;
  
      
    if ( UART_TxHead != UART_TxTail) {
 8c4:	90 91 75 01 	lds	r25, 0x0175
 8c8:	80 91 74 01 	lds	r24, 0x0174
 8cc:	98 17       	cp	r25, r24
 8ce:	69 f0       	breq	.+26     	; 0x8ea <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 8d0:	e0 91 74 01 	lds	r30, 0x0174
 8d4:	ef 5f       	subi	r30, 0xFF	; 255
 8d6:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 8d8:	e0 93 74 01 	sts	0x0174, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	ea 58       	subi	r30, 0x8A	; 138
 8e0:	fe 4f       	sbci	r31, 0xFE	; 254
 8e2:	80 81       	ld	r24, Z
 8e4:	80 93 c6 00 	sts	0x00C6, r24
 8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 8ea:	e1 ec       	ldi	r30, 0xC1	; 193
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	8f 7d       	andi	r24, 0xDF	; 223
 8f2:	80 83       	st	Z, r24
    }
}
 8f4:	ff 91       	pop	r31
 8f6:	ef 91       	pop	r30
 8f8:	9f 91       	pop	r25
 8fa:	8f 91       	pop	r24
 8fc:	0f 90       	pop	r0
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	0f 90       	pop	r0
 902:	1f 90       	pop	r1
 904:	18 95       	reti

00000906 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 906:	10 92 75 01 	sts	0x0175, r1
    UART_TxTail = 0;
 90a:	10 92 74 01 	sts	0x0174, r1
    UART_RxHead = 0;
 90e:	10 92 73 01 	sts	0x0173, r1
    UART_RxTail = 0;
 912:	10 92 72 01 	sts	0x0172, r1
    UCSRC = (3<<UCSZ0);
    #endif 
      
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 916:	99 23       	and	r25, r25
 918:	24 f4       	brge	.+8      	; 0x922 <uart_init+0x1c>
    {
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 91a:	22 e0       	ldi	r18, 0x02	; 2
 91c:	20 93 c0 00 	sts	0x00C0, r18
        baudrate &= ~0x8000;
 920:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRR0H = (unsigned char)(baudrate>>8);
 922:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 926:	80 93 c4 00 	sts	0x00C4, r24
  
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);  
 92a:	88 e9       	ldi	r24, 0x98	; 152
 92c:	80 93 c1 00 	sts	0x00C1, r24
      
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    UCSR0C |= (3<<UCSZ00);	// 1 stop bit
 930:	e2 ec       	ldi	r30, 0xC2	; 194
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	86 60       	ori	r24, 0x06	; 6
 938:	80 83       	st	Z, r24
 93a:	08 95       	ret

0000093c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;
  
      
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 93c:	20 91 75 01 	lds	r18, 0x0175
 940:	2f 5f       	subi	r18, 0xFF	; 255
 942:	2f 71       	andi	r18, 0x1F	; 31
      
    while ( tmphead == UART_TxTail ){
 944:	90 91 74 01 	lds	r25, 0x0174
 948:	29 17       	cp	r18, r25
 94a:	e1 f3       	breq	.-8      	; 0x944 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
      
    UART_TxBuf[tmphead] = data;
 94c:	e2 2f       	mov	r30, r18
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	ea 58       	subi	r30, 0x8A	; 138
 952:	fe 4f       	sbci	r31, 0xFE	; 254
 954:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 956:	20 93 75 01 	sts	0x0175, r18
  
    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 95a:	e1 ec       	ldi	r30, 0xC1	; 193
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	80 62       	ori	r24, 0x20	; 32
 962:	80 83       	st	Z, r24
 964:	08 95       	ret

00000966 <strncmp_P>:
 966:	fb 01       	movw	r30, r22
 968:	dc 01       	movw	r26, r24
 96a:	41 50       	subi	r20, 0x01	; 1
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	30 f0       	brcs	.+12     	; 0x97c <strncmp_P+0x16>
 970:	8d 91       	ld	r24, X+
 972:	05 90       	lpm	r0, Z+
 974:	80 19       	sub	r24, r0
 976:	19 f4       	brne	.+6      	; 0x97e <strncmp_P+0x18>
 978:	00 20       	and	r0, r0
 97a:	b9 f7       	brne	.-18     	; 0x96a <strncmp_P+0x4>
 97c:	88 1b       	sub	r24, r24
 97e:	99 0b       	sbc	r25, r25
 980:	08 95       	ret

00000982 <_exit>:
 982:	f8 94       	cli

00000984 <__stop_program>:
 984:	ff cf       	rjmp	.-2      	; 0x984 <__stop_program>
